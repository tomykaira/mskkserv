// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/user_dictionary/user_dictionary_storage.proto

/*
Package user_dictionary is a generated protocol buffer package.

It is generated from these files:
	mozc/user_dictionary/user_dictionary_storage.proto

It has these top-level messages:
	UserDictionary
	UserDictionaryStorage
	UserDictionaryCommand
	UserDictionaryCommandStatus
*/
package user_dictionary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserDictionary_PosType int32

const (
	UserDictionary_NOUN                          UserDictionary_PosType = 1
	UserDictionary_ABBREVIATION                  UserDictionary_PosType = 2
	UserDictionary_SUGGESTION_ONLY               UserDictionary_PosType = 3
	UserDictionary_PROPER_NOUN                   UserDictionary_PosType = 4
	UserDictionary_PERSONAL_NAME                 UserDictionary_PosType = 5
	UserDictionary_FAMILY_NAME                   UserDictionary_PosType = 6
	UserDictionary_FIRST_NAME                    UserDictionary_PosType = 7
	UserDictionary_ORGANIZATION_NAME             UserDictionary_PosType = 8
	UserDictionary_PLACE_NAME                    UserDictionary_PosType = 9
	UserDictionary_SA_IRREGULAR_CONJUGATION_NOUN UserDictionary_PosType = 10
	UserDictionary_ADJECTIVE_VERBAL_NOUN         UserDictionary_PosType = 11
	UserDictionary_NUMBER                        UserDictionary_PosType = 12
	UserDictionary_ALPHABET                      UserDictionary_PosType = 13
	UserDictionary_SYMBOL                        UserDictionary_PosType = 14
	UserDictionary_EMOTICON                      UserDictionary_PosType = 15
	UserDictionary_ADVERB                        UserDictionary_PosType = 16
	UserDictionary_PRENOUN_ADJECTIVAL            UserDictionary_PosType = 17
	UserDictionary_CONJUNCTION                   UserDictionary_PosType = 18
	UserDictionary_INTERJECTION                  UserDictionary_PosType = 19
	UserDictionary_PREFIX                        UserDictionary_PosType = 20
	UserDictionary_COUNTER_SUFFIX                UserDictionary_PosType = 21
	UserDictionary_GENERIC_SUFFIX                UserDictionary_PosType = 22
	UserDictionary_PERSON_NAME_SUFFIX            UserDictionary_PosType = 23
	UserDictionary_PLACE_NAME_SUFFIX             UserDictionary_PosType = 24
	UserDictionary_WA_GROUP1_VERB                UserDictionary_PosType = 25
	UserDictionary_KA_GROUP1_VERB                UserDictionary_PosType = 26
	UserDictionary_SA_GROUP1_VERB                UserDictionary_PosType = 27
	UserDictionary_TA_GROUP1_VERB                UserDictionary_PosType = 28
	UserDictionary_NA_GROUP1_VERB                UserDictionary_PosType = 29
	UserDictionary_MA_GROUP1_VERB                UserDictionary_PosType = 30
	UserDictionary_RA_GROUP1_VERB                UserDictionary_PosType = 31
	UserDictionary_GA_GROUP1_VERB                UserDictionary_PosType = 32
	UserDictionary_BA_GROUP1_VERB                UserDictionary_PosType = 33
	UserDictionary_HA_GROUP1_VERB                UserDictionary_PosType = 34
	UserDictionary_GROUP2_VERB                   UserDictionary_PosType = 35
	UserDictionary_KURU_GROUP3_VERB              UserDictionary_PosType = 36
	UserDictionary_SURU_GROUP3_VERB              UserDictionary_PosType = 37
	UserDictionary_ZURU_GROUP3_VERB              UserDictionary_PosType = 38
	UserDictionary_RU_GROUP3_VERB                UserDictionary_PosType = 39
	UserDictionary_ADJECTIVE                     UserDictionary_PosType = 40
	UserDictionary_SENTENCE_ENDING_PARTICLE      UserDictionary_PosType = 41
	UserDictionary_PUNCTUATION                   UserDictionary_PosType = 42
	UserDictionary_FREE_STANDING_WORD            UserDictionary_PosType = 43
	UserDictionary_SUPPRESSION_WORD              UserDictionary_PosType = 44
)

var UserDictionary_PosType_name = map[int32]string{
	1:  "NOUN",
	2:  "ABBREVIATION",
	3:  "SUGGESTION_ONLY",
	4:  "PROPER_NOUN",
	5:  "PERSONAL_NAME",
	6:  "FAMILY_NAME",
	7:  "FIRST_NAME",
	8:  "ORGANIZATION_NAME",
	9:  "PLACE_NAME",
	10: "SA_IRREGULAR_CONJUGATION_NOUN",
	11: "ADJECTIVE_VERBAL_NOUN",
	12: "NUMBER",
	13: "ALPHABET",
	14: "SYMBOL",
	15: "EMOTICON",
	16: "ADVERB",
	17: "PRENOUN_ADJECTIVAL",
	18: "CONJUNCTION",
	19: "INTERJECTION",
	20: "PREFIX",
	21: "COUNTER_SUFFIX",
	22: "GENERIC_SUFFIX",
	23: "PERSON_NAME_SUFFIX",
	24: "PLACE_NAME_SUFFIX",
	25: "WA_GROUP1_VERB",
	26: "KA_GROUP1_VERB",
	27: "SA_GROUP1_VERB",
	28: "TA_GROUP1_VERB",
	29: "NA_GROUP1_VERB",
	30: "MA_GROUP1_VERB",
	31: "RA_GROUP1_VERB",
	32: "GA_GROUP1_VERB",
	33: "BA_GROUP1_VERB",
	34: "HA_GROUP1_VERB",
	35: "GROUP2_VERB",
	36: "KURU_GROUP3_VERB",
	37: "SURU_GROUP3_VERB",
	38: "ZURU_GROUP3_VERB",
	39: "RU_GROUP3_VERB",
	40: "ADJECTIVE",
	41: "SENTENCE_ENDING_PARTICLE",
	42: "PUNCTUATION",
	43: "FREE_STANDING_WORD",
	44: "SUPPRESSION_WORD",
}
var UserDictionary_PosType_value = map[string]int32{
	"NOUN":                          1,
	"ABBREVIATION":                  2,
	"SUGGESTION_ONLY":               3,
	"PROPER_NOUN":                   4,
	"PERSONAL_NAME":                 5,
	"FAMILY_NAME":                   6,
	"FIRST_NAME":                    7,
	"ORGANIZATION_NAME":             8,
	"PLACE_NAME":                    9,
	"SA_IRREGULAR_CONJUGATION_NOUN": 10,
	"ADJECTIVE_VERBAL_NOUN":         11,
	"NUMBER":                        12,
	"ALPHABET":                      13,
	"SYMBOL":                        14,
	"EMOTICON":                      15,
	"ADVERB":                        16,
	"PRENOUN_ADJECTIVAL":            17,
	"CONJUNCTION":                   18,
	"INTERJECTION":                  19,
	"PREFIX":                        20,
	"COUNTER_SUFFIX":                21,
	"GENERIC_SUFFIX":                22,
	"PERSON_NAME_SUFFIX":            23,
	"PLACE_NAME_SUFFIX":             24,
	"WA_GROUP1_VERB":                25,
	"KA_GROUP1_VERB":                26,
	"SA_GROUP1_VERB":                27,
	"TA_GROUP1_VERB":                28,
	"NA_GROUP1_VERB":                29,
	"MA_GROUP1_VERB":                30,
	"RA_GROUP1_VERB":                31,
	"GA_GROUP1_VERB":                32,
	"BA_GROUP1_VERB":                33,
	"HA_GROUP1_VERB":                34,
	"GROUP2_VERB":                   35,
	"KURU_GROUP3_VERB":              36,
	"SURU_GROUP3_VERB":              37,
	"ZURU_GROUP3_VERB":              38,
	"RU_GROUP3_VERB":                39,
	"ADJECTIVE":                     40,
	"SENTENCE_ENDING_PARTICLE":      41,
	"PUNCTUATION":                   42,
	"FREE_STANDING_WORD":            43,
	"SUPPRESSION_WORD":              44,
}

func (x UserDictionary_PosType) Enum() *UserDictionary_PosType {
	p := new(UserDictionary_PosType)
	*p = x
	return p
}
func (x UserDictionary_PosType) String() string {
	return proto.EnumName(UserDictionary_PosType_name, int32(x))
}
func (x *UserDictionary_PosType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserDictionary_PosType_value, data, "UserDictionary_PosType")
	if err != nil {
		return err
	}
	*x = UserDictionary_PosType(value)
	return nil
}
func (UserDictionary_PosType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type UserDictionaryStorage_StorageType int32

const (
	UserDictionaryStorage_SNAPSHOT UserDictionaryStorage_StorageType = 1
	UserDictionaryStorage_UPDATE   UserDictionaryStorage_StorageType = 2
)

var UserDictionaryStorage_StorageType_name = map[int32]string{
	1: "SNAPSHOT",
	2: "UPDATE",
}
var UserDictionaryStorage_StorageType_value = map[string]int32{
	"SNAPSHOT": 1,
	"UPDATE":   2,
}

func (x UserDictionaryStorage_StorageType) Enum() *UserDictionaryStorage_StorageType {
	p := new(UserDictionaryStorage_StorageType)
	*p = x
	return p
}
func (x UserDictionaryStorage_StorageType) String() string {
	return proto.EnumName(UserDictionaryStorage_StorageType_name, int32(x))
}
func (x *UserDictionaryStorage_StorageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserDictionaryStorage_StorageType_value, data, "UserDictionaryStorage_StorageType")
	if err != nil {
		return err
	}
	*x = UserDictionaryStorage_StorageType(value)
	return nil
}
func (UserDictionaryStorage_StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type UserDictionaryCommand_CommandType int32

const (
	// Does nothing.
	UserDictionaryCommand_NO_OPERATION UserDictionaryCommand_CommandType = 0
	// Unlink the user dictionary file if necessary.
	// We can do this operation without creating a session.
	// This operation is introduced as a last resort to clean up
	// user dictionary, so it *forces* to unlink the file regardless
	// of the current user dictionary session status.
	UserDictionaryCommand_CLEAR_STORAGE UserDictionaryCommand_CommandType = 1
	// Creates a new session, and returns its id via
	// UserDictionaryCommandStatus::session_id.
	UserDictionaryCommand_CREATE_SESSION UserDictionaryCommand_CommandType = 2
	// Deletes the session identified by session_id.
	UserDictionaryCommand_DELETE_SESSION UserDictionaryCommand_CommandType = 3
	// Sets the default dictionary name. It will be used when
	// ensure_non_empty_storage is enabled and the operation supporting the
	// flag is invoked.
	UserDictionaryCommand_SET_DEFAULT_DICTIONARY_NAME UserDictionaryCommand_CommandType = 4
	// Checks if the session is currently undoable or not.
	UserDictionaryCommand_CHECK_UNDOABILITY UserDictionaryCommand_CommandType = 5
	// Undoes the last operation.
	UserDictionaryCommand_UNDO UserDictionaryCommand_CommandType = 6
	// Loads from local storage.
	UserDictionaryCommand_LOAD UserDictionaryCommand_CommandType = 7
	// Saves to local storage.
	UserDictionaryCommand_SAVE UserDictionaryCommand_CommandType = 8
	// Returns a list of name and dictionary-id pairs.
	// They are filled in the form of UserDictionary without any entries
	// in UserDictionaryCommandStatus::storage.
	UserDictionaryCommand_GET_USER_DICTIONARY_NAME_LIST UserDictionaryCommand_CommandType = 9
	// Returns the number of entries in the dictionary with the
	// given dictionary_id.
	UserDictionaryCommand_GET_ENTRY_SIZE UserDictionaryCommand_CommandType = 10
	// Use GET_ENTRIES instead.
	UserDictionaryCommand_OBSOLETE_GET_ENTRY UserDictionaryCommand_CommandType = 11
	// Returns if it is possible to add new dictionary or not.
	// The result is returned by using status code.
	UserDictionaryCommand_CHECK_NEW_DICTIONARY_AVAILABILITY UserDictionaryCommand_CommandType = 12
	// Creates a new dictionary with the dictionary_name.
	UserDictionaryCommand_CREATE_DICTIONARY UserDictionaryCommand_CommandType = 13
	// Deletes the dictionary with the given dictionary_id.
	UserDictionaryCommand_DELETE_DICTIONARY UserDictionaryCommand_CommandType = 14
	// Renames the dictionary with the given dictionary_id to dictionary_name.
	UserDictionaryCommand_RENAME_DICTIONARY UserDictionaryCommand_CommandType = 15
	// Returns if it is possible to add new entry to the dictionary
	// with the given dictionary_id or not.
	UserDictionaryCommand_CHECK_NEW_ENTRY_AVAILABILITY UserDictionaryCommand_CommandType = 16
	// Adds an entry to the dictionary with the given dictionary_id.
	// Added entry should be located at the end of the dictionary, and
	// the data should be passed via entry field.
	UserDictionaryCommand_ADD_ENTRY UserDictionaryCommand_CommandType = 17
	// Edits an entry in the dictionary with the given dictionary_id.
	// The new data should be passed via entry.
	// The edit target should be specified via entry_index(0).
	UserDictionaryCommand_EDIT_ENTRY UserDictionaryCommand_CommandType = 18
	// Deletes entries in the dictionary with the given dictionary_id.
	// The target entries should be specified based on index in entry_index.
	UserDictionaryCommand_DELETE_ENTRY UserDictionaryCommand_CommandType = 19
	// Imports entries from the given data into a dictionary.
	// There are two ways to specify the dictionary:
	// 1) set dictionary_id for the dictionary
	// 2) set dictionary_name to create a new dictionary with the name.
	UserDictionaryCommand_IMPORT_DATA UserDictionaryCommand_CommandType = 20
	// Gets the entire UserDictionaryStorage data.
	// Note: The result of this command could be too large for IPC, which has a
	// size limitation of the response data.
	UserDictionaryCommand_GET_STORAGE UserDictionaryCommand_CommandType = 21
	// Returns entries in the dictionary specified by dictionary_id.
	// The position of the entry should be specified via entry_index().
	UserDictionaryCommand_GET_ENTRIES UserDictionaryCommand_CommandType = 22
)

var UserDictionaryCommand_CommandType_name = map[int32]string{
	0:  "NO_OPERATION",
	1:  "CLEAR_STORAGE",
	2:  "CREATE_SESSION",
	3:  "DELETE_SESSION",
	4:  "SET_DEFAULT_DICTIONARY_NAME",
	5:  "CHECK_UNDOABILITY",
	6:  "UNDO",
	7:  "LOAD",
	8:  "SAVE",
	9:  "GET_USER_DICTIONARY_NAME_LIST",
	10: "GET_ENTRY_SIZE",
	11: "OBSOLETE_GET_ENTRY",
	12: "CHECK_NEW_DICTIONARY_AVAILABILITY",
	13: "CREATE_DICTIONARY",
	14: "DELETE_DICTIONARY",
	15: "RENAME_DICTIONARY",
	16: "CHECK_NEW_ENTRY_AVAILABILITY",
	17: "ADD_ENTRY",
	18: "EDIT_ENTRY",
	19: "DELETE_ENTRY",
	20: "IMPORT_DATA",
	21: "GET_STORAGE",
	22: "GET_ENTRIES",
}
var UserDictionaryCommand_CommandType_value = map[string]int32{
	"NO_OPERATION":                      0,
	"CLEAR_STORAGE":                     1,
	"CREATE_SESSION":                    2,
	"DELETE_SESSION":                    3,
	"SET_DEFAULT_DICTIONARY_NAME":       4,
	"CHECK_UNDOABILITY":                 5,
	"UNDO":                              6,
	"LOAD":                              7,
	"SAVE":                              8,
	"GET_USER_DICTIONARY_NAME_LIST":     9,
	"GET_ENTRY_SIZE":                    10,
	"OBSOLETE_GET_ENTRY":                11,
	"CHECK_NEW_DICTIONARY_AVAILABILITY": 12,
	"CREATE_DICTIONARY":                 13,
	"DELETE_DICTIONARY":                 14,
	"RENAME_DICTIONARY":                 15,
	"CHECK_NEW_ENTRY_AVAILABILITY":      16,
	"ADD_ENTRY":                         17,
	"EDIT_ENTRY":                        18,
	"DELETE_ENTRY":                      19,
	"IMPORT_DATA":                       20,
	"GET_STORAGE":                       21,
	"GET_ENTRIES":                       22,
}

func (x UserDictionaryCommand_CommandType) Enum() *UserDictionaryCommand_CommandType {
	p := new(UserDictionaryCommand_CommandType)
	*p = x
	return p
}
func (x UserDictionaryCommand_CommandType) String() string {
	return proto.EnumName(UserDictionaryCommand_CommandType_name, int32(x))
}
func (x *UserDictionaryCommand_CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserDictionaryCommand_CommandType_value, data, "UserDictionaryCommand_CommandType")
	if err != nil {
		return err
	}
	*x = UserDictionaryCommand_CommandType(value)
	return nil
}
func (UserDictionaryCommand_CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

// Note: this status code is now temporary assgined.
// It may be updated (incl. re-numbering) to organize the code.
// I.e., the code shouldn't be saved in serialized format for now.
// TODO(hidehiko): Re-organize and re-number the enum values,
//   after we check all necessary codes in.
type UserDictionaryCommandStatus_Status int32

const (
	// Note: SUCCEEDED is conflicting Windows MACRO.
	UserDictionaryCommandStatus_USER_DICTIONARY_COMMAND_SUCCESS UserDictionaryCommandStatus_Status = 1
	UserDictionaryCommandStatus_UNKNOWN_ERROR                   UserDictionaryCommandStatus_Status = 2
	UserDictionaryCommandStatus_UNKNOWN_COMMAND                 UserDictionaryCommandStatus_Status = 3
	UserDictionaryCommandStatus_INVALID_ARGUMENT                UserDictionaryCommandStatus_Status = 4
	UserDictionaryCommandStatus_UNKNOWN_SESSION_ID              UserDictionaryCommandStatus_Status = 5
	UserDictionaryCommandStatus_FILE_NOT_FOUND                  UserDictionaryCommandStatus_Status = 6
	UserDictionaryCommandStatus_INVALID_FILE_FORMAT             UserDictionaryCommandStatus_Status = 7
	// Note: currently if we recieve this error status,
	// the file is actually saved.
	UserDictionaryCommandStatus_FILE_SIZE_LIMIT_EXCEEDED       UserDictionaryCommandStatus_Status = 8
	UserDictionaryCommandStatus_DICTIONARY_SIZE_LIMIT_EXCEEDED UserDictionaryCommandStatus_Status = 9
	UserDictionaryCommandStatus_ENTRY_SIZE_LIMIT_EXCEEDED      UserDictionaryCommandStatus_Status = 10
	UserDictionaryCommandStatus_UNKNOWN_DICTIONARY_ID          UserDictionaryCommandStatus_Status = 11
	UserDictionaryCommandStatus_ENTRY_INDEX_OUT_OF_RANGE       UserDictionaryCommandStatus_Status = 12
	// Errors for dictionary names.
	UserDictionaryCommandStatus_DICTIONARY_NAME_EMPTY                      UserDictionaryCommandStatus_Status = 13
	UserDictionaryCommandStatus_DICTIONARY_NAME_TOO_LONG                   UserDictionaryCommandStatus_Status = 14
	UserDictionaryCommandStatus_DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER UserDictionaryCommandStatus_Status = 15
	UserDictionaryCommandStatus_DICTIONARY_NAME_DUPLICATED                 UserDictionaryCommandStatus_Status = 16
	// Errors for entry data.
	UserDictionaryCommandStatus_READING_EMPTY                      UserDictionaryCommandStatus_Status = 17
	UserDictionaryCommandStatus_READING_TOO_LONG                   UserDictionaryCommandStatus_Status = 18
	UserDictionaryCommandStatus_READING_CONTAINS_INVALID_CHARACTER UserDictionaryCommandStatus_Status = 19
	UserDictionaryCommandStatus_WORD_EMPTY                         UserDictionaryCommandStatus_Status = 20
	UserDictionaryCommandStatus_WORD_TOO_LONG                      UserDictionaryCommandStatus_Status = 21
	UserDictionaryCommandStatus_WORD_CONTAINS_INVALID_CHARACTER    UserDictionaryCommandStatus_Status = 22
	UserDictionaryCommandStatus_INVALID_POS_TYPE                   UserDictionaryCommandStatus_Status = 23
	UserDictionaryCommandStatus_COMMENT_TOO_LONG                   UserDictionaryCommandStatus_Status = 24
	UserDictionaryCommandStatus_COMMENT_CONTAINS_INVALID_CHARACTER UserDictionaryCommandStatus_Status = 25
	// Errors for importing.
	UserDictionaryCommandStatus_IMPORT_TOO_MANY_WORDS  UserDictionaryCommandStatus_Status = 26
	UserDictionaryCommandStatus_IMPORT_INVALID_ENTRIES UserDictionaryCommandStatus_Status = 27
	UserDictionaryCommandStatus_NO_UNDO_HISTORY        UserDictionaryCommandStatus_Status = 28
)

var UserDictionaryCommandStatus_Status_name = map[int32]string{
	1:  "USER_DICTIONARY_COMMAND_SUCCESS",
	2:  "UNKNOWN_ERROR",
	3:  "UNKNOWN_COMMAND",
	4:  "INVALID_ARGUMENT",
	5:  "UNKNOWN_SESSION_ID",
	6:  "FILE_NOT_FOUND",
	7:  "INVALID_FILE_FORMAT",
	8:  "FILE_SIZE_LIMIT_EXCEEDED",
	9:  "DICTIONARY_SIZE_LIMIT_EXCEEDED",
	10: "ENTRY_SIZE_LIMIT_EXCEEDED",
	11: "UNKNOWN_DICTIONARY_ID",
	12: "ENTRY_INDEX_OUT_OF_RANGE",
	13: "DICTIONARY_NAME_EMPTY",
	14: "DICTIONARY_NAME_TOO_LONG",
	15: "DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER",
	16: "DICTIONARY_NAME_DUPLICATED",
	17: "READING_EMPTY",
	18: "READING_TOO_LONG",
	19: "READING_CONTAINS_INVALID_CHARACTER",
	20: "WORD_EMPTY",
	21: "WORD_TOO_LONG",
	22: "WORD_CONTAINS_INVALID_CHARACTER",
	23: "INVALID_POS_TYPE",
	24: "COMMENT_TOO_LONG",
	25: "COMMENT_CONTAINS_INVALID_CHARACTER",
	26: "IMPORT_TOO_MANY_WORDS",
	27: "IMPORT_INVALID_ENTRIES",
	28: "NO_UNDO_HISTORY",
}
var UserDictionaryCommandStatus_Status_value = map[string]int32{
	"USER_DICTIONARY_COMMAND_SUCCESS":            1,
	"UNKNOWN_ERROR":                              2,
	"UNKNOWN_COMMAND":                            3,
	"INVALID_ARGUMENT":                           4,
	"UNKNOWN_SESSION_ID":                         5,
	"FILE_NOT_FOUND":                             6,
	"INVALID_FILE_FORMAT":                        7,
	"FILE_SIZE_LIMIT_EXCEEDED":                   8,
	"DICTIONARY_SIZE_LIMIT_EXCEEDED":             9,
	"ENTRY_SIZE_LIMIT_EXCEEDED":                  10,
	"UNKNOWN_DICTIONARY_ID":                      11,
	"ENTRY_INDEX_OUT_OF_RANGE":                   12,
	"DICTIONARY_NAME_EMPTY":                      13,
	"DICTIONARY_NAME_TOO_LONG":                   14,
	"DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER": 15,
	"DICTIONARY_NAME_DUPLICATED":                 16,
	"READING_EMPTY":                              17,
	"READING_TOO_LONG":                           18,
	"READING_CONTAINS_INVALID_CHARACTER":         19,
	"WORD_EMPTY":                                 20,
	"WORD_TOO_LONG":                              21,
	"WORD_CONTAINS_INVALID_CHARACTER":            22,
	"INVALID_POS_TYPE":                           23,
	"COMMENT_TOO_LONG":                           24,
	"COMMENT_CONTAINS_INVALID_CHARACTER":         25,
	"IMPORT_TOO_MANY_WORDS":                      26,
	"IMPORT_INVALID_ENTRIES":                     27,
	"NO_UNDO_HISTORY":                            28,
}

func (x UserDictionaryCommandStatus_Status) Enum() *UserDictionaryCommandStatus_Status {
	p := new(UserDictionaryCommandStatus_Status)
	*p = x
	return p
}
func (x UserDictionaryCommandStatus_Status) String() string {
	return proto.EnumName(UserDictionaryCommandStatus_Status_name, int32(x))
}
func (x *UserDictionaryCommandStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserDictionaryCommandStatus_Status_value, data, "UserDictionaryCommandStatus_Status")
	if err != nil {
		return err
	}
	*x = UserDictionaryCommandStatus_Status(value)
	return nil
}
func (UserDictionaryCommandStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type UserDictionary struct {
	// ID of this dictionary
	Id *uint64 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	// set false if this dictionary is not used.
	// Even if |enabled| is false, the dictionary
	// it self is visible to user.
	Enabled *bool `protobuf:"varint,2,opt,name=enabled,def=1" json:"enabled,omitempty"`
	// name of dictionary
	Name    *string                 `protobuf:"bytes,3,opt,name=name,def=" json:"name,omitempty"`
	Entries []*UserDictionary_Entry `protobuf:"bytes,4,rep,name=entries" json:"entries,omitempty"`
	// set true if this dictionary is removed.
	// This flag is used for cloud sync feature.
	// Cloud sync feature is already deprecated and this flag is only
	// used to convert sync dictionary to normal dictionary.
	Removed *bool `protobuf:"varint,5,opt,name=removed,def=0" json:"removed,omitempty"`
	// This flag is used for cloud sync feature.
	// Cloud sync feature is already deprecated and this flag is only
	// used to convert sync dictionary to normal dictionary.
	Syncable         *bool  `protobuf:"varint,6,opt,name=syncable,def=0" json:"syncable,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserDictionary) Reset()                    { *m = UserDictionary{} }
func (m *UserDictionary) String() string            { return proto.CompactTextString(m) }
func (*UserDictionary) ProtoMessage()               {}
func (*UserDictionary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_UserDictionary_Id uint64 = 0
const Default_UserDictionary_Enabled bool = true
const Default_UserDictionary_Removed bool = false
const Default_UserDictionary_Syncable bool = false

func (m *UserDictionary) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return Default_UserDictionary_Id
}

func (m *UserDictionary) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return Default_UserDictionary_Enabled
}

func (m *UserDictionary) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserDictionary) GetEntries() []*UserDictionary_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *UserDictionary) GetRemoved() bool {
	if m != nil && m.Removed != nil {
		return *m.Removed
	}
	return Default_UserDictionary_Removed
}

func (m *UserDictionary) GetSyncable() bool {
	if m != nil && m.Syncable != nil {
		return *m.Syncable
	}
	return Default_UserDictionary_Syncable
}

// entry of each word
type UserDictionary_Entry struct {
	Key     *string `protobuf:"bytes,1,opt,name=key,def=" json:"key,omitempty"`
	Value   *string `protobuf:"bytes,2,opt,name=value,def=" json:"value,omitempty"`
	Comment *string `protobuf:"bytes,4,opt,name=comment,def=" json:"comment,omitempty"`
	// Historically we used to use tag number '3' for POS in string format.
	// In order to switch it to enum based POS, we removed (deprecated) the
	// tag number '3' field and created another field numbered '5'.
	Pos *UserDictionary_PosType `protobuf:"varint,5,opt,name=pos,enum=mozc.user_dictionary.UserDictionary_PosType" json:"pos,omitempty"`
	// set true if this entry is removed.
	// This flag is used for cloud sync feature.
	// Cloud sync feature is already deprecated and this flag is only
	// used to convert sync dictionary to normal dictionary.
	Removed *bool `protobuf:"varint,10,opt,name=removed,def=0" json:"removed,omitempty"`
	// set true if this entry is automatically registered
	// by converter.
	AutoRegistered   *bool  `protobuf:"varint,11,opt,name=auto_registered,json=autoRegistered,def=0" json:"auto_registered,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserDictionary_Entry) Reset()                    { *m = UserDictionary_Entry{} }
func (m *UserDictionary_Entry) String() string            { return proto.CompactTextString(m) }
func (*UserDictionary_Entry) ProtoMessage()               {}
func (*UserDictionary_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

const Default_UserDictionary_Entry_Removed bool = false
const Default_UserDictionary_Entry_AutoRegistered bool = false

func (m *UserDictionary_Entry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *UserDictionary_Entry) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *UserDictionary_Entry) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *UserDictionary_Entry) GetPos() UserDictionary_PosType {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return UserDictionary_NOUN
}

func (m *UserDictionary_Entry) GetRemoved() bool {
	if m != nil && m.Removed != nil {
		return *m.Removed
	}
	return Default_UserDictionary_Entry_Removed
}

func (m *UserDictionary_Entry) GetAutoRegistered() bool {
	if m != nil && m.AutoRegistered != nil {
		return *m.AutoRegistered
	}
	return Default_UserDictionary_Entry_AutoRegistered
}

type UserDictionaryStorage struct {
	// version of user dictionary
	Version *int32 `protobuf:"varint,1,opt,name=version,def=0" json:"version,omitempty"`
	// dictionary body
	Dictionaries     []*UserDictionary                  `protobuf:"bytes,2,rep,name=dictionaries" json:"dictionaries,omitempty"`
	StorageType      *UserDictionaryStorage_StorageType `protobuf:"varint,10,opt,name=storage_type,json=storageType,enum=mozc.user_dictionary.UserDictionaryStorage_StorageType,def=1" json:"storage_type,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *UserDictionaryStorage) Reset()                    { *m = UserDictionaryStorage{} }
func (m *UserDictionaryStorage) String() string            { return proto.CompactTextString(m) }
func (*UserDictionaryStorage) ProtoMessage()               {}
func (*UserDictionaryStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_UserDictionaryStorage_Version int32 = 0
const Default_UserDictionaryStorage_StorageType UserDictionaryStorage_StorageType = UserDictionaryStorage_SNAPSHOT

func (m *UserDictionaryStorage) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_UserDictionaryStorage_Version
}

func (m *UserDictionaryStorage) GetDictionaries() []*UserDictionary {
	if m != nil {
		return m.Dictionaries
	}
	return nil
}

func (m *UserDictionaryStorage) GetStorageType() UserDictionaryStorage_StorageType {
	if m != nil && m.StorageType != nil {
		return *m.StorageType
	}
	return Default_UserDictionaryStorage_StorageType
}

type UserDictionaryCommand struct {
	Type                  *UserDictionaryCommand_CommandType `protobuf:"varint,1,req,name=type,enum=mozc.user_dictionary.UserDictionaryCommand_CommandType" json:"type,omitempty"`
	SessionId             *uint64                            `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DictionaryId          *uint64                            `protobuf:"varint,3,opt,name=dictionary_id,json=dictionaryId" json:"dictionary_id,omitempty"`
	DictionaryName        *string                            `protobuf:"bytes,4,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
	EntryIndex            []int32                            `protobuf:"varint,5,rep,name=entry_index,json=entryIndex" json:"entry_index,omitempty"`
	Entry                 *UserDictionary_Entry              `protobuf:"bytes,6,opt,name=entry" json:"entry,omitempty"`
	Data                  *string                            `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	EnsureNonEmptyStorage *bool                              `protobuf:"varint,8,opt,name=ensure_non_empty_storage,json=ensureNonEmptyStorage" json:"ensure_non_empty_storage,omitempty"`
	IgnoreInvalidEntries  *bool                              `protobuf:"varint,9,opt,name=ignore_invalid_entries,json=ignoreInvalidEntries" json:"ignore_invalid_entries,omitempty"`
	XXX_unrecognized      []byte                             `json:"-"`
}

func (m *UserDictionaryCommand) Reset()                    { *m = UserDictionaryCommand{} }
func (m *UserDictionaryCommand) String() string            { return proto.CompactTextString(m) }
func (*UserDictionaryCommand) ProtoMessage()               {}
func (*UserDictionaryCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserDictionaryCommand) GetType() UserDictionaryCommand_CommandType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return UserDictionaryCommand_NO_OPERATION
}

func (m *UserDictionaryCommand) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *UserDictionaryCommand) GetDictionaryId() uint64 {
	if m != nil && m.DictionaryId != nil {
		return *m.DictionaryId
	}
	return 0
}

func (m *UserDictionaryCommand) GetDictionaryName() string {
	if m != nil && m.DictionaryName != nil {
		return *m.DictionaryName
	}
	return ""
}

func (m *UserDictionaryCommand) GetEntryIndex() []int32 {
	if m != nil {
		return m.EntryIndex
	}
	return nil
}

func (m *UserDictionaryCommand) GetEntry() *UserDictionary_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *UserDictionaryCommand) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *UserDictionaryCommand) GetEnsureNonEmptyStorage() bool {
	if m != nil && m.EnsureNonEmptyStorage != nil {
		return *m.EnsureNonEmptyStorage
	}
	return false
}

func (m *UserDictionaryCommand) GetIgnoreInvalidEntries() bool {
	if m != nil && m.IgnoreInvalidEntries != nil {
		return *m.IgnoreInvalidEntries
	}
	return false
}

type UserDictionaryCommandStatus struct {
	Status           *UserDictionaryCommandStatus_Status `protobuf:"varint,1,req,name=status,enum=mozc.user_dictionary.UserDictionaryCommandStatus_Status" json:"status,omitempty"`
	SessionId        *uint64                             `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Storage          *UserDictionaryStorage              `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	DictionaryId     *uint64                             `protobuf:"varint,5,opt,name=dictionary_id,json=dictionaryId" json:"dictionary_id,omitempty"`
	EntrySize        *uint32                             `protobuf:"varint,6,opt,name=entry_size,json=entrySize" json:"entry_size,omitempty"`
	Entries          []*UserDictionary_Entry             `protobuf:"bytes,7,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *UserDictionaryCommandStatus) Reset()                    { *m = UserDictionaryCommandStatus{} }
func (m *UserDictionaryCommandStatus) String() string            { return proto.CompactTextString(m) }
func (*UserDictionaryCommandStatus) ProtoMessage()               {}
func (*UserDictionaryCommandStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserDictionaryCommandStatus) GetStatus() UserDictionaryCommandStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UserDictionaryCommandStatus_USER_DICTIONARY_COMMAND_SUCCESS
}

func (m *UserDictionaryCommandStatus) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *UserDictionaryCommandStatus) GetStorage() *UserDictionaryStorage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *UserDictionaryCommandStatus) GetDictionaryId() uint64 {
	if m != nil && m.DictionaryId != nil {
		return *m.DictionaryId
	}
	return 0
}

func (m *UserDictionaryCommandStatus) GetEntrySize() uint32 {
	if m != nil && m.EntrySize != nil {
		return *m.EntrySize
	}
	return 0
}

func (m *UserDictionaryCommandStatus) GetEntries() []*UserDictionary_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*UserDictionary)(nil), "mozc.user_dictionary.UserDictionary")
	proto.RegisterType((*UserDictionary_Entry)(nil), "mozc.user_dictionary.UserDictionary.Entry")
	proto.RegisterType((*UserDictionaryStorage)(nil), "mozc.user_dictionary.UserDictionaryStorage")
	proto.RegisterType((*UserDictionaryCommand)(nil), "mozc.user_dictionary.UserDictionaryCommand")
	proto.RegisterType((*UserDictionaryCommandStatus)(nil), "mozc.user_dictionary.UserDictionaryCommandStatus")
	proto.RegisterEnum("mozc.user_dictionary.UserDictionary_PosType", UserDictionary_PosType_name, UserDictionary_PosType_value)
	proto.RegisterEnum("mozc.user_dictionary.UserDictionaryStorage_StorageType", UserDictionaryStorage_StorageType_name, UserDictionaryStorage_StorageType_value)
	proto.RegisterEnum("mozc.user_dictionary.UserDictionaryCommand_CommandType", UserDictionaryCommand_CommandType_name, UserDictionaryCommand_CommandType_value)
	proto.RegisterEnum("mozc.user_dictionary.UserDictionaryCommandStatus_Status", UserDictionaryCommandStatus_Status_name, UserDictionaryCommandStatus_Status_value)
}

func init() { proto.RegisterFile("mozc/user_dictionary/user_dictionary_storage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x97, 0xdd, 0x72, 0xdb, 0xb8,
	0x15, 0x80, 0x57, 0x96, 0x64, 0xc9, 0x90, 0x2d, 0xc3, 0xf0, 0x4f, 0x14, 0xff, 0xc4, 0xb6, 0xb2,
	0xbb, 0x71, 0xb3, 0x3b, 0x4a, 0xeb, 0x76, 0x66, 0x3b, 0xb9, 0xe8, 0x14, 0x22, 0x21, 0x99, 0x31,
	0x05, 0x72, 0x40, 0xd0, 0x89, 0x73, 0x83, 0x51, 0x2c, 0xae, 0xc3, 0x26, 0x12, 0x3d, 0x22, 0xed,
	0xa9, 0x72, 0xd5, 0x07, 0x68, 0x9f, 0xa4, 0x7d, 0xa5, 0xde, 0xf6, 0xbe, 0x33, 0x7d, 0x80, 0xce,
	0x01, 0x49, 0x59, 0x52, 0x3d, 0x69, 0xb2, 0x57, 0x22, 0xbe, 0xf3, 0x0b, 0x10, 0xe7, 0x1c, 0x0a,
	0x9d, 0x0e, 0xa3, 0x4f, 0x57, 0x2f, 0x6e, 0xe3, 0x60, 0xac, 0x06, 0xe1, 0x55, 0x12, 0x46, 0xa3,
	0xfe, 0x78, 0xb2, 0xb8, 0x56, 0x71, 0x12, 0x8d, 0xfb, 0xd7, 0x41, 0xeb, 0x66, 0x1c, 0x25, 0x11,
	0xd9, 0x02, 0x9b, 0xd6, 0x82, 0x4e, 0xf3, 0x1f, 0x08, 0xd5, 0xfd, 0x38, 0x18, 0x9b, 0x53, 0x44,
	0x36, 0xd0, 0x52, 0x38, 0x68, 0x14, 0x8e, 0x0a, 0x27, 0xa5, 0x97, 0x85, 0x5f, 0x8b, 0xa5, 0x70,
	0x40, 0x9e, 0xa0, 0x4a, 0x30, 0xea, 0xbf, 0xfb, 0x18, 0x0c, 0x1a, 0x4b, 0x47, 0x85, 0x93, 0xea,
	0xcb, 0x52, 0x32, 0xbe, 0x0d, 0x44, 0x0e, 0xc9, 0x16, 0x2a, 0x8d, 0xfa, 0xc3, 0xa0, 0x51, 0x3c,
	0x2a, 0x9c, 0xac, 0xbc, 0xfc, 0x46, 0xe8, 0x15, 0x31, 0xc1, 0x2a, 0x19, 0x87, 0x41, 0xdc, 0x28,
	0x1d, 0x15, 0x4f, 0x6a, 0xa7, 0xcf, 0x5b, 0x0f, 0xe5, 0xd0, 0x9a, 0x8f, 0xdf, 0x62, 0xa3, 0x64,
	0x3c, 0x11, 0xb9, 0x29, 0x39, 0x44, 0x95, 0x71, 0x30, 0x8c, 0xee, 0x82, 0x41, 0xa3, 0xac, 0x63,
	0x97, 0x7f, 0xee, 0x7f, 0x8c, 0x03, 0x91, 0x53, 0x72, 0x8c, 0xaa, 0xf1, 0x64, 0x74, 0x05, 0x99,
	0x34, 0x96, 0x67, 0x35, 0xa6, 0x78, 0xf7, 0x5f, 0x05, 0x54, 0xd6, 0x6e, 0x09, 0x41, 0xc5, 0x0f,
	0xc1, 0x44, 0xef, 0x0e, 0x12, 0x85, 0x05, 0xd9, 0x41, 0xe5, 0xbb, 0xfe, 0xc7, 0xdb, 0x40, 0xef,
	0x0d, 0x68, 0xba, 0x24, 0xbb, 0xa8, 0x72, 0x15, 0x0d, 0x87, 0xc1, 0x28, 0x69, 0x94, 0x32, 0x49,
	0x0e, 0xc8, 0x1f, 0x50, 0xf1, 0x26, 0x8a, 0x75, 0x46, 0xf5, 0xd3, 0x1f, 0xbf, 0x68, 0x5f, 0x6e,
	0x14, 0xcb, 0xc9, 0x4d, 0x20, 0xc0, 0x70, 0x76, 0x57, 0xe8, 0xc1, 0x5d, 0xb5, 0xd0, 0x7a, 0xff,
	0x36, 0x89, 0xd4, 0x38, 0xb8, 0x0e, 0xe3, 0x24, 0x18, 0x07, 0x83, 0x46, 0x6d, 0x56, 0xb1, 0x0e,
	0x52, 0x31, 0x15, 0xbe, 0x2a, 0x55, 0x8b, 0xb8, 0xd4, 0xfc, 0xe7, 0x32, 0xaa, 0x64, 0x71, 0x48,
	0x15, 0x95, 0xb8, 0xe3, 0x73, 0x5c, 0x20, 0x18, 0xad, 0xd2, 0x76, 0x5b, 0xb0, 0x0b, 0x8b, 0x4a,
	0xcb, 0xe1, 0x78, 0x89, 0x6c, 0xa2, 0x75, 0xcf, 0xef, 0x76, 0x99, 0x07, 0x6b, 0xe5, 0x70, 0xfb,
	0x12, 0x17, 0xc9, 0x3a, 0xaa, 0xb9, 0xc2, 0x71, 0x99, 0x50, 0xda, 0xae, 0x44, 0x36, 0xd0, 0x9a,
	0xcb, 0x84, 0xe7, 0x70, 0x6a, 0x2b, 0x4e, 0x7b, 0x0c, 0x97, 0x41, 0xa7, 0x43, 0x7b, 0x96, 0x7d,
	0x99, 0x82, 0x65, 0x52, 0x47, 0xa8, 0x63, 0x09, 0x4f, 0xa6, 0xeb, 0x0a, 0xd9, 0x46, 0x1b, 0x8e,
	0xe8, 0x52, 0x6e, 0xbd, 0xd5, 0xb1, 0x52, 0x5c, 0x05, 0x35, 0xd7, 0xa6, 0x06, 0x4b, 0xd7, 0x2b,
	0xe4, 0x18, 0x1d, 0x78, 0x54, 0x59, 0x42, 0xb0, 0xae, 0x6f, 0x53, 0xa1, 0x0c, 0x87, 0xbf, 0xf2,
	0xbb, 0x99, 0x09, 0x44, 0x47, 0xe4, 0x31, 0xda, 0xa6, 0xe6, 0x2b, 0x66, 0x48, 0xeb, 0x82, 0xa9,
	0x0b, 0x26, 0xda, 0x90, 0x05, 0x88, 0x6a, 0x04, 0xa1, 0x65, 0xee, 0xf7, 0xda, 0x4c, 0xe0, 0x55,
	0xb2, 0x8a, 0xaa, 0xd4, 0x76, 0xcf, 0x68, 0x9b, 0x49, 0xbc, 0x06, 0x12, 0xef, 0xb2, 0xd7, 0x76,
	0x6c, 0x5c, 0x07, 0x09, 0xeb, 0x39, 0xd2, 0x32, 0x1c, 0x8e, 0xd7, 0x41, 0x42, 0x4d, 0x70, 0x83,
	0x31, 0xd9, 0x41, 0xc4, 0x15, 0x0c, 0x9c, 0xa9, 0x3c, 0x04, 0xb5, 0xf1, 0x06, 0xec, 0x4e, 0x27,
	0xc2, 0x0d, 0x7d, 0x4e, 0x04, 0x4e, 0xce, 0xe2, 0x92, 0x09, 0xad, 0xe3, 0x70, 0xbc, 0x09, 0x6e,
	0x5c, 0xc1, 0x3a, 0xd6, 0x1b, 0xbc, 0x45, 0x08, 0xaa, 0x1b, 0x8e, 0x0f, 0x72, 0xe5, 0xf9, 0x1d,
	0x60, 0xdb, 0xc0, 0xba, 0x8c, 0x33, 0x61, 0x19, 0x39, 0xdb, 0xd1, 0xe1, 0xf4, 0x39, 0xea, 0xdd,
	0xe7, 0xfc, 0x11, 0x9c, 0xd5, 0xfd, 0xa1, 0xe4, 0xb8, 0x01, 0x2e, 0x5e, 0x53, 0xd5, 0x15, 0x8e,
	0xef, 0xfe, 0x46, 0x6f, 0x1c, 0x3f, 0x06, 0x76, 0x3e, 0xcf, 0x76, 0x81, 0x79, 0xf3, 0x6c, 0x0f,
	0x98, 0x9c, 0x67, 0xfb, 0xc0, 0xf8, 0x3c, 0x3b, 0x00, 0xd6, 0x9b, 0x67, 0x4f, 0x80, 0x89, 0x79,
	0x76, 0xa8, 0xb7, 0x33, 0xcf, 0x8e, 0x80, 0xb5, 0xe7, 0xd9, 0x31, 0xb0, 0xb3, 0x79, 0xd6, 0x84,
	0xd3, 0xd4, 0xe0, 0x34, 0x05, 0x4f, 0xc9, 0x16, 0xc2, 0xe7, 0xbe, 0xf0, 0x53, 0xb5, 0xdf, 0xa6,
	0xf4, 0x5b, 0xa0, 0xde, 0x22, 0xfd, 0x0e, 0xe8, 0xdb, 0x45, 0xfa, 0xbd, 0x4e, 0x71, 0x9e, 0x3d,
	0x23, 0x6b, 0x68, 0x65, 0x7a, 0x4f, 0xf0, 0x09, 0xd9, 0x47, 0x0d, 0x8f, 0x71, 0xc9, 0xb8, 0xc1,
	0x14, 0xe3, 0xa6, 0xc5, 0xbb, 0xca, 0xa5, 0x42, 0x5a, 0x86, 0xcd, 0xf0, 0xaf, 0xf4, 0x1d, 0x87,
	0xd7, 0xeb, 0xa7, 0x95, 0xf0, 0x1c, 0xde, 0x4d, 0x47, 0x30, 0xa6, 0x3c, 0x49, 0x53, 0xe5, 0xd7,
	0x8e, 0x30, 0xf1, 0x0f, 0x69, 0x56, 0xae, 0x2b, 0x98, 0xe7, 0xc1, 0x9d, 0xd4, 0xf4, 0xc7, 0xe6,
	0xdf, 0x96, 0xd0, 0xf6, 0x7c, 0x59, 0x7b, 0x69, 0x93, 0x25, 0x7b, 0xa8, 0x72, 0x17, 0x8c, 0xe3,
	0x30, 0x1a, 0xe9, 0xe6, 0x52, 0x86, 0xd6, 0x99, 0x13, 0x72, 0x86, 0x56, 0xa7, 0x7d, 0x01, 0xda,
	0xe1, 0x92, 0x6e, 0x87, 0xdf, 0x7e, 0x49, 0xdb, 0x10, 0x73, 0x96, 0x64, 0x80, 0x56, 0xb3, 0xb6,
	0xae, 0x92, 0xc9, 0x4d, 0xa0, 0x9b, 0x47, 0xfd, 0xf4, 0xa7, 0x2f, 0xf1, 0x94, 0x65, 0xda, 0xca,
	0x7e, 0xa1, 0x47, 0xbc, 0xac, 0x7a, 0x9c, 0xba, 0xde, 0x99, 0x23, 0x45, 0x2d, 0xbe, 0xc7, 0xcd,
	0x67, 0xa8, 0x36, 0xa3, 0x05, 0x85, 0x94, 0xeb, 0xe1, 0x02, 0x54, 0x80, 0xef, 0x9a, 0x54, 0x32,
	0xbc, 0xd4, 0xfc, 0x7b, 0x65, 0xf1, 0x3c, 0x8c, 0x68, 0x38, 0xec, 0x8f, 0x06, 0xe4, 0x1c, 0x95,
	0x74, 0x82, 0x85, 0xa3, 0xa5, 0x2f, 0x4d, 0x30, 0x33, 0x6d, 0x65, 0xbf, 0xba, 0x59, 0x6a, 0x27,
	0xe4, 0x00, 0xa1, 0x38, 0x88, 0xe1, 0x28, 0x55, 0x98, 0x8e, 0xa0, 0x92, 0x58, 0xc9, 0x88, 0x35,
	0x20, 0x4f, 0xd1, 0xda, 0xcc, 0xd8, 0x0b, 0x07, 0x7a, 0x0e, 0x95, 0x66, 0x4e, 0x6e, 0x62, 0x0d,
	0xc8, 0x33, 0xb4, 0x3e, 0xa3, 0xa4, 0xc7, 0x95, 0xee, 0xea, 0xa2, 0x7e, 0x8f, 0x39, 0x8c, 0xad,
	0x43, 0x54, 0x83, 0xd9, 0x33, 0x51, 0xe1, 0x68, 0x10, 0xfc, 0xb9, 0x51, 0x3e, 0x2a, 0x9e, 0x94,
	0x05, 0xd2, 0xc8, 0x02, 0x42, 0xfe, 0x88, 0xca, 0x7a, 0xa5, 0xa7, 0xcd, 0xd7, 0x4d, 0xb5, 0xd4,
	0x90, 0x10, 0x54, 0x1a, 0xf4, 0x93, 0x7e, 0xa3, 0xa2, 0x13, 0xd0, 0xcf, 0xe4, 0x27, 0xd4, 0x08,
	0x46, 0xf1, 0xed, 0x38, 0x50, 0xa3, 0x68, 0xa4, 0x82, 0xe1, 0x4d, 0x32, 0x9d, 0xe0, 0x8d, 0x2a,
	0x74, 0x7e, 0xb1, 0x9d, 0xca, 0x79, 0x34, 0x62, 0x20, 0xcd, 0x6f, 0xde, 0xef, 0xd0, 0x4e, 0x78,
	0x3d, 0x8a, 0xc6, 0x81, 0x0a, 0x47, 0x77, 0xfd, 0x8f, 0xe1, 0x40, 0xe5, 0x53, 0x77, 0x45, 0x9b,
	0x6d, 0xa5, 0x52, 0x2b, 0x15, 0xb2, 0x54, 0xd6, 0xfc, 0x77, 0x11, 0xd5, 0x66, 0x0e, 0x1a, 0x3a,
	0x1d, 0x77, 0x14, 0x74, 0xff, 0xb4, 0x32, 0xbe, 0x81, 0xee, 0x6f, 0xd8, 0x8c, 0x0a, 0xe5, 0x49,
	0x47, 0xd0, 0x2e, 0xc3, 0x05, 0xdd, 0xf0, 0x04, 0xa3, 0x92, 0x29, 0x2f, 0xad, 0x0b, 0xbc, 0x04,
	0xcc, 0x64, 0x36, 0x9b, 0x61, 0x45, 0x72, 0x88, 0xf6, 0x3c, 0x26, 0x95, 0xc9, 0x3a, 0xd4, 0xb7,
	0xa5, 0x32, 0x2d, 0xdd, 0x3d, 0xa9, 0xc8, 0xa6, 0x46, 0x09, 0x3a, 0x9f, 0x71, 0xc6, 0x8c, 0x73,
	0xe5, 0x73, 0xd3, 0xa1, 0x6d, 0xcb, 0xb6, 0xe4, 0x25, 0x2e, 0xc3, 0xc8, 0x02, 0x80, 0x97, 0xe1,
	0xc9, 0x76, 0xa8, 0x89, 0x2b, 0xf0, 0xe4, 0xd1, 0x0b, 0x98, 0x21, 0xc7, 0xe8, 0xa0, 0xcb, 0xa4,
	0xf2, 0x3d, 0x26, 0x16, 0x5d, 0x2a, 0xdb, 0xf2, 0x24, 0x5e, 0x49, 0xbb, 0xaf, 0x54, 0x8c, 0x4b,
	0x71, 0xa9, 0x3c, 0xeb, 0x2d, 0xc3, 0x08, 0x2a, 0xdc, 0x69, 0x7b, 0x8e, 0x4e, 0x71, 0x2a, 0xc4,
	0x35, 0xf2, 0x1d, 0x3a, 0x4e, 0x73, 0xe0, 0xec, 0xf5, 0xac, 0x3f, 0x7a, 0x41, 0x2d, 0x3b, 0xcf,
	0x69, 0x55, 0xa7, 0x9a, 0xee, 0xf9, 0x5e, 0x07, 0xaf, 0x01, 0xce, 0xb6, 0x3d, 0x83, 0xeb, 0x80,
	0x05, 0xd3, 0x19, 0xcd, 0xe0, 0x75, 0x72, 0x84, 0xf6, 0xef, 0x63, 0xa5, 0xd9, 0xcd, 0x85, 0xc1,
	0x69, 0x17, 0x33, 0xb3, 0xe4, 0x36, 0x60, 0x5e, 0x32, 0xd3, 0xca, 0x93, 0xd5, 0x83, 0x28, 0x0b,
	0x97, 0x92, 0x4d, 0xe8, 0x64, 0x56, 0xcf, 0x75, 0x84, 0x54, 0x26, 0x95, 0x14, 0x6f, 0xe9, 0x76,
	0xcb, 0xe4, 0xf4, 0x6d, 0x6d, 0xe7, 0x00, 0x0c, 0x2c, 0xe6, 0xe1, 0x9d, 0xe6, 0x7f, 0xaa, 0x68,
	0xef, 0xc1, 0x92, 0xf3, 0x92, 0x7e, 0x72, 0x1b, 0x13, 0x17, 0x2d, 0xc7, 0xfa, 0x29, 0xab, 0xda,
	0xdf, 0x7f, 0x45, 0xd5, 0xa6, 0x2e, 0x5a, 0xe9, 0x8f, 0xc8, 0xfc, 0xfc, 0xbf, 0xc2, 0x65, 0xa8,
	0x92, 0x5f, 0xf1, 0xa2, 0xae, 0xa5, 0x1f, 0xbe, 0xa2, 0x91, 0x89, 0xdc, 0xf6, 0x7f, 0xeb, 0xbf,
	0xfc, 0x40, 0xfd, 0x1f, 0xa0, 0xb4, 0x86, 0x55, 0x1c, 0x7e, 0x4a, 0x3f, 0x14, 0xd7, 0xc4, 0x8a,
	0x26, 0x5e, 0xf8, 0x69, 0xee, 0x63, 0xb5, 0xf2, 0x8b, 0x3f, 0x56, 0x9b, 0x7f, 0x5d, 0x46, 0xcb,
	0xd9, 0x61, 0x3e, 0x45, 0x87, 0x8b, 0x37, 0xd5, 0x70, 0x7a, 0x3d, 0xca, 0x4d, 0xe5, 0xf9, 0x86,
	0xc1, 0x3c, 0x0f, 0x17, 0xa0, 0xc6, 0x7c, 0x7e, 0xce, 0x9d, 0xd7, 0x5c, 0x31, 0x21, 0x1c, 0x91,
	0x7e, 0x9a, 0xe5, 0x28, 0xd3, 0xc7, 0x45, 0x98, 0x46, 0x16, 0xbf, 0xa0, 0xb6, 0x65, 0x2a, 0x2a,
	0xba, 0x7e, 0x8f, 0x71, 0x89, 0x4b, 0x70, 0xb3, 0x73, 0xd5, 0xac, 0xf6, 0x94, 0x65, 0xe2, 0x32,
	0x54, 0x41, 0xc7, 0xb2, 0x99, 0xe2, 0x8e, 0x54, 0x1d, 0xc7, 0xe7, 0x26, 0x5e, 0x26, 0x8f, 0xd0,
	0x66, 0xee, 0x41, 0xcb, 0x3a, 0x8e, 0xe8, 0x51, 0x89, 0x2b, 0x30, 0x2f, 0x35, 0x80, 0x6a, 0x51,
	0xb6, 0xd5, 0x83, 0x4b, 0xf7, 0xc6, 0x60, 0xcc, 0x64, 0x26, 0xae, 0x92, 0x26, 0x7a, 0x32, 0xb3,
	0x81, 0x87, 0x74, 0x56, 0xc8, 0x01, 0x7a, 0x7c, 0x5f, 0x70, 0x8b, 0x62, 0xfd, 0x1d, 0x97, 0x67,
	0x39, 0xe3, 0xca, 0x32, 0x71, 0x0d, 0x62, 0xa7, 0x96, 0x16, 0x37, 0xd9, 0x1b, 0xe5, 0xf8, 0x52,
	0x39, 0x1d, 0x25, 0x28, 0xef, 0x32, 0xbc, 0x0a, 0x86, 0x8b, 0x65, 0xce, 0x7a, 0xae, 0x84, 0xea,
	0xdb, 0x47, 0x8d, 0x45, 0x91, 0x74, 0x1c, 0x65, 0x3b, 0xbc, 0x8b, 0xeb, 0xa4, 0x85, 0x9e, 0x2f,
	0x4a, 0x0d, 0x87, 0x4b, 0x6a, 0x71, 0x4f, 0xe5, 0x87, 0x60, 0x9c, 0x51, 0x41, 0x0d, 0xc9, 0x04,
	0x5e, 0x27, 0x4f, 0xd0, 0xee, 0xa2, 0xbe, 0xe9, 0xbb, 0xb6, 0x65, 0x50, 0xc9, 0x4c, 0x8c, 0xe1,
	0x2d, 0x09, 0x46, 0xf5, 0xd7, 0x41, 0x9a, 0xc0, 0x06, 0xbc, 0x90, 0x1c, 0x4d, 0x03, 0x13, 0xf2,
	0x3d, 0x6a, 0xe6, 0xf4, 0x33, 0x01, 0x37, 0xa1, 0xba, 0xe1, 0x83, 0x22, 0xf3, 0xb6, 0x05, 0x01,
	0xf4, 0x7a, 0xea, 0x6a, 0x1b, 0xae, 0x8f, 0x46, 0x9f, 0xf1, 0xb3, 0x33, 0x7b, 0x2d, 0x5c, 0xc7,
	0x53, 0xf2, 0xd2, 0x65, 0xf8, 0x11, 0x50, 0xb8, 0x39, 0x8c, 0xcb, 0x7b, 0x87, 0x0d, 0xc8, 0x2d,
	0xa7, 0x9f, 0xf1, 0xf9, 0x18, 0x4e, 0x3d, 0xeb, 0x2b, 0x60, 0xdc, 0xa3, 0xfc, 0x52, 0x7f, 0xfc,
	0x78, 0x78, 0x97, 0xec, 0xa2, 0x9d, 0x4c, 0x94, 0x1b, 0xe6, 0xbd, 0x65, 0x0f, 0xae, 0x2d, 0x77,
	0x74, 0x3b, 0x57, 0x67, 0x16, 0xf4, 0xa0, 0x4b, 0xbc, 0xff, 0xaa, 0x54, 0x2d, 0xe1, 0x72, 0xfb,
	0x2f, 0x05, 0xd4, 0x8a, 0xc6, 0xd7, 0x69, 0x3d, 0xf5, 0x47, 0x83, 0x71, 0x14, 0x0e, 0x5a, 0xe1,
	0xe8, 0xe6, 0x36, 0x19, 0x06, 0xc9, 0xfb, 0x68, 0xd0, 0xfa, 0x53, 0xff, 0xa6, 0x3f, 0x0a, 0xe2,
	0xec, 0x9f, 0xea, 0xbb, 0xdb, 0x9f, 0xdb, 0xbb, 0x2e, 0x3c, 0x3d, 0x58, 0xf6, 0x6f, 0x4f, 0xaf,
	0xc3, 0xe4, 0xfd, 0xed, 0xbb, 0xd6, 0x55, 0x34, 0x7c, 0x91, 0x44, 0xc3, 0xc9, 0x87, 0x7e, 0x38,
	0xee, 0xbf, 0x18, 0xc6, 0x1f, 0x3e, 0xc4, 0xc1, 0xf8, 0xee, 0xc5, 0x43, 0x7f, 0x8d, 0xff, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x74, 0x6c, 0x50, 0xf6, 0x31, 0x0f, 0x00, 0x00,
}
