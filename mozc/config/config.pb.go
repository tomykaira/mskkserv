// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/config/config.proto

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	mozc/config/config.proto

It has these top-level messages:
	GeneralConfig
	Config
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ////////////////////////////////////////////////////////////
//
// Basic features (40-79)
//
type Config_PreeditMethod int32

const (
	Config_ROMAN Config_PreeditMethod = 0
	Config_KANA  Config_PreeditMethod = 1
)

var Config_PreeditMethod_name = map[int32]string{
	0: "ROMAN",
	1: "KANA",
}
var Config_PreeditMethod_value = map[string]int32{
	"ROMAN": 0,
	"KANA":  1,
}

func (x Config_PreeditMethod) Enum() *Config_PreeditMethod {
	p := new(Config_PreeditMethod)
	*p = x
	return p
}
func (x Config_PreeditMethod) String() string {
	return proto.EnumName(Config_PreeditMethod_name, int32(x))
}
func (x *Config_PreeditMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_PreeditMethod_value, data, "Config_PreeditMethod")
	if err != nil {
		return err
	}
	*x = Config_PreeditMethod(value)
	return nil
}
func (Config_PreeditMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Config_SessionKeymap int32

const (
	// If NONE is selected, it will be replaced with MSIME or KOTOERI.
	// NONE is used only for a placeholder, so a configuration program
	// should not show NONE as one of selections.  NONE should be the
	// last of the items due to the limitation of the Qt GUI's
	// implementation. Note that keymap number should be correspoinding
	// to the index of QComboBox in config dialog. Since NONE is not
	// used, we set -1 here.
	Config_NONE     Config_SessionKeymap = -1
	Config_CUSTOM   Config_SessionKeymap = 0
	Config_ATOK     Config_SessionKeymap = 1
	Config_MSIME    Config_SessionKeymap = 2
	Config_KOTOERI  Config_SessionKeymap = 3
	Config_MOBILE   Config_SessionKeymap = 4
	Config_CHROMEOS Config_SessionKeymap = 5
)

var Config_SessionKeymap_name = map[int32]string{
	-1: "NONE",
	0:  "CUSTOM",
	1:  "ATOK",
	2:  "MSIME",
	3:  "KOTOERI",
	4:  "MOBILE",
	5:  "CHROMEOS",
}
var Config_SessionKeymap_value = map[string]int32{
	"NONE":     -1,
	"CUSTOM":   0,
	"ATOK":     1,
	"MSIME":    2,
	"KOTOERI":  3,
	"MOBILE":   4,
	"CHROMEOS": 5,
}

func (x Config_SessionKeymap) Enum() *Config_SessionKeymap {
	p := new(Config_SessionKeymap)
	*p = x
	return p
}
func (x Config_SessionKeymap) String() string {
	return proto.EnumName(Config_SessionKeymap_name, int32(x))
}
func (x *Config_SessionKeymap) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_SessionKeymap_value, data, "Config_SessionKeymap")
	if err != nil {
		return err
	}
	*x = Config_SessionKeymap(value)
	return nil
}
func (Config_SessionKeymap) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type Config_PunctuationMethod int32

const (
	Config_KUTEN_TOUTEN Config_PunctuationMethod = 0
	Config_COMMA_PERIOD Config_PunctuationMethod = 1
	Config_KUTEN_PERIOD Config_PunctuationMethod = 2
	Config_COMMA_TOUTEN Config_PunctuationMethod = 3
)

var Config_PunctuationMethod_name = map[int32]string{
	0: "KUTEN_TOUTEN",
	1: "COMMA_PERIOD",
	2: "KUTEN_PERIOD",
	3: "COMMA_TOUTEN",
}
var Config_PunctuationMethod_value = map[string]int32{
	"KUTEN_TOUTEN": 0,
	"COMMA_PERIOD": 1,
	"KUTEN_PERIOD": 2,
	"COMMA_TOUTEN": 3,
}

func (x Config_PunctuationMethod) Enum() *Config_PunctuationMethod {
	p := new(Config_PunctuationMethod)
	*p = x
	return p
}
func (x Config_PunctuationMethod) String() string {
	return proto.EnumName(Config_PunctuationMethod_name, int32(x))
}
func (x *Config_PunctuationMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_PunctuationMethod_value, data, "Config_PunctuationMethod")
	if err != nil {
		return err
	}
	*x = Config_PunctuationMethod(value)
	return nil
}
func (Config_PunctuationMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

type Config_SymbolMethod int32

const (
	Config_CORNER_BRACKET_MIDDLE_DOT Config_SymbolMethod = 0
	Config_SQUARE_BRACKET_SLASH      Config_SymbolMethod = 1
	Config_CORNER_BRACKET_SLASH      Config_SymbolMethod = 2
	Config_SQUARE_BRACKET_MIDDLE_DOT Config_SymbolMethod = 3
)

var Config_SymbolMethod_name = map[int32]string{
	0: "CORNER_BRACKET_MIDDLE_DOT",
	1: "SQUARE_BRACKET_SLASH",
	2: "CORNER_BRACKET_SLASH",
	3: "SQUARE_BRACKET_MIDDLE_DOT",
}
var Config_SymbolMethod_value = map[string]int32{
	"CORNER_BRACKET_MIDDLE_DOT": 0,
	"SQUARE_BRACKET_SLASH":      1,
	"CORNER_BRACKET_SLASH":      2,
	"SQUARE_BRACKET_MIDDLE_DOT": 3,
}

func (x Config_SymbolMethod) Enum() *Config_SymbolMethod {
	p := new(Config_SymbolMethod)
	*p = x
	return p
}
func (x Config_SymbolMethod) String() string {
	return proto.EnumName(Config_SymbolMethod_name, int32(x))
}
func (x *Config_SymbolMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_SymbolMethod_value, data, "Config_SymbolMethod")
	if err != nil {
		return err
	}
	*x = Config_SymbolMethod(value)
	return nil
}
func (Config_SymbolMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 3} }

type Config_FundamentalCharacterForm int32

const (
	Config_FUNDAMENTAL_INPUT_MODE Config_FundamentalCharacterForm = 0
	Config_FUNDAMENTAL_FULL_WIDTH Config_FundamentalCharacterForm = 1
	Config_FUNDAMENTAL_HALF_WIDTH Config_FundamentalCharacterForm = 2
)

var Config_FundamentalCharacterForm_name = map[int32]string{
	0: "FUNDAMENTAL_INPUT_MODE",
	1: "FUNDAMENTAL_FULL_WIDTH",
	2: "FUNDAMENTAL_HALF_WIDTH",
}
var Config_FundamentalCharacterForm_value = map[string]int32{
	"FUNDAMENTAL_INPUT_MODE": 0,
	"FUNDAMENTAL_FULL_WIDTH": 1,
	"FUNDAMENTAL_HALF_WIDTH": 2,
}

func (x Config_FundamentalCharacterForm) Enum() *Config_FundamentalCharacterForm {
	p := new(Config_FundamentalCharacterForm)
	*p = x
	return p
}
func (x Config_FundamentalCharacterForm) String() string {
	return proto.EnumName(Config_FundamentalCharacterForm_name, int32(x))
}
func (x *Config_FundamentalCharacterForm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_FundamentalCharacterForm_value, data, "Config_FundamentalCharacterForm")
	if err != nil {
		return err
	}
	*x = Config_FundamentalCharacterForm(value)
	return nil
}
func (Config_FundamentalCharacterForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 4}
}

// User history learning
type Config_HistoryLearningLevel int32

const (
	Config_DEFAULT_HISTORY Config_HistoryLearningLevel = 0
	Config_READ_ONLY       Config_HistoryLearningLevel = 1
	Config_NO_HISTORY      Config_HistoryLearningLevel = 2
)

var Config_HistoryLearningLevel_name = map[int32]string{
	0: "DEFAULT_HISTORY",
	1: "READ_ONLY",
	2: "NO_HISTORY",
}
var Config_HistoryLearningLevel_value = map[string]int32{
	"DEFAULT_HISTORY": 0,
	"READ_ONLY":       1,
	"NO_HISTORY":      2,
}

func (x Config_HistoryLearningLevel) Enum() *Config_HistoryLearningLevel {
	p := new(Config_HistoryLearningLevel)
	*p = x
	return p
}
func (x Config_HistoryLearningLevel) String() string {
	return proto.EnumName(Config_HistoryLearningLevel_name, int32(x))
}
func (x *Config_HistoryLearningLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_HistoryLearningLevel_value, data, "Config_HistoryLearningLevel")
	if err != nil {
		return err
	}
	*x = Config_HistoryLearningLevel(value)
	return nil
}
func (Config_HistoryLearningLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 5}
}

type Config_SelectionShortcut int32

const (
	Config_NO_SHORTCUT        Config_SelectionShortcut = 0
	Config_SHORTCUT_123456789 Config_SelectionShortcut = 1
	Config_SHORTCUT_ASDFGHJKL Config_SelectionShortcut = 2
)

var Config_SelectionShortcut_name = map[int32]string{
	0: "NO_SHORTCUT",
	1: "SHORTCUT_123456789",
	2: "SHORTCUT_ASDFGHJKL",
}
var Config_SelectionShortcut_value = map[string]int32{
	"NO_SHORTCUT":        0,
	"SHORTCUT_123456789": 1,
	"SHORTCUT_ASDFGHJKL": 2,
}

func (x Config_SelectionShortcut) Enum() *Config_SelectionShortcut {
	p := new(Config_SelectionShortcut)
	*p = x
	return p
}
func (x Config_SelectionShortcut) String() string {
	return proto.EnumName(Config_SelectionShortcut_name, int32(x))
}
func (x *Config_SelectionShortcut) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_SelectionShortcut_value, data, "Config_SelectionShortcut")
	if err != nil {
		return err
	}
	*x = Config_SelectionShortcut(value)
	return nil
}
func (Config_SelectionShortcut) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 6} }

// character form (Halfwidth/Fullwidth
type Config_CharacterForm int32

const (
	Config_HALF_WIDTH    Config_CharacterForm = 0
	Config_FULL_WIDTH    Config_CharacterForm = 1
	Config_LAST_FORM     Config_CharacterForm = 2
	Config_NO_CONVERSION Config_CharacterForm = 3
)

var Config_CharacterForm_name = map[int32]string{
	0: "HALF_WIDTH",
	1: "FULL_WIDTH",
	2: "LAST_FORM",
	3: "NO_CONVERSION",
}
var Config_CharacterForm_value = map[string]int32{
	"HALF_WIDTH":    0,
	"FULL_WIDTH":    1,
	"LAST_FORM":     2,
	"NO_CONVERSION": 3,
}

func (x Config_CharacterForm) Enum() *Config_CharacterForm {
	p := new(Config_CharacterForm)
	*p = x
	return p
}
func (x Config_CharacterForm) String() string {
	return proto.EnumName(Config_CharacterForm_name, int32(x))
}
func (x *Config_CharacterForm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_CharacterForm_value, data, "Config_CharacterForm")
	if err != nil {
		return err
	}
	*x = Config_CharacterForm(value)
	return nil
}
func (Config_CharacterForm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 7} }

// Shift key mode switch
type Config_ShiftKeyModeSwitch int32

const (
	Config_OFF                 Config_ShiftKeyModeSwitch = 0
	Config_ASCII_INPUT_MODE    Config_ShiftKeyModeSwitch = 1
	Config_KATAKANA_INPUT_MODE Config_ShiftKeyModeSwitch = 2
)

var Config_ShiftKeyModeSwitch_name = map[int32]string{
	0: "OFF",
	1: "ASCII_INPUT_MODE",
	2: "KATAKANA_INPUT_MODE",
}
var Config_ShiftKeyModeSwitch_value = map[string]int32{
	"OFF":                 0,
	"ASCII_INPUT_MODE":    1,
	"KATAKANA_INPUT_MODE": 2,
}

func (x Config_ShiftKeyModeSwitch) Enum() *Config_ShiftKeyModeSwitch {
	p := new(Config_ShiftKeyModeSwitch)
	*p = x
	return p
}
func (x Config_ShiftKeyModeSwitch) String() string {
	return proto.EnumName(Config_ShiftKeyModeSwitch_name, int32(x))
}
func (x *Config_ShiftKeyModeSwitch) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_ShiftKeyModeSwitch_value, data, "Config_ShiftKeyModeSwitch")
	if err != nil {
		return err
	}
	*x = Config_ShiftKeyModeSwitch(value)
	return nil
}
func (Config_ShiftKeyModeSwitch) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 8} }

type Config_NumpadCharacterForm int32

const (
	Config_NUMPAD_INPUT_MODE   Config_NumpadCharacterForm = 0
	Config_NUMPAD_FULL_WIDTH   Config_NumpadCharacterForm = 1
	Config_NUMPAD_HALF_WIDTH   Config_NumpadCharacterForm = 2
	Config_NUMPAD_DIRECT_INPUT Config_NumpadCharacterForm = 3
)

var Config_NumpadCharacterForm_name = map[int32]string{
	0: "NUMPAD_INPUT_MODE",
	1: "NUMPAD_FULL_WIDTH",
	2: "NUMPAD_HALF_WIDTH",
	3: "NUMPAD_DIRECT_INPUT",
}
var Config_NumpadCharacterForm_value = map[string]int32{
	"NUMPAD_INPUT_MODE":   0,
	"NUMPAD_FULL_WIDTH":   1,
	"NUMPAD_HALF_WIDTH":   2,
	"NUMPAD_DIRECT_INPUT": 3,
}

func (x Config_NumpadCharacterForm) Enum() *Config_NumpadCharacterForm {
	p := new(Config_NumpadCharacterForm)
	*p = x
	return p
}
func (x Config_NumpadCharacterForm) String() string {
	return proto.EnumName(Config_NumpadCharacterForm_name, int32(x))
}
func (x *Config_NumpadCharacterForm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_NumpadCharacterForm_value, data, "Config_NumpadCharacterForm")
	if err != nil {
		return err
	}
	*x = Config_NumpadCharacterForm(value)
	return nil
}
func (Config_NumpadCharacterForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 9}
}

type Config_AutoConversionKey int32

const (
	Config_AUTO_CONVERSION_OFF              Config_AutoConversionKey = 0
	Config_AUTO_CONVERSION_KUTEN            Config_AutoConversionKey = 1
	Config_AUTO_CONVERSION_TOUTEN           Config_AutoConversionKey = 2
	Config_AUTO_CONVERSION_QUESTION_MARK    Config_AutoConversionKey = 4
	Config_AUTO_CONVERSION_EXCLAMATION_MARK Config_AutoConversionKey = 8
)

var Config_AutoConversionKey_name = map[int32]string{
	0: "AUTO_CONVERSION_OFF",
	1: "AUTO_CONVERSION_KUTEN",
	2: "AUTO_CONVERSION_TOUTEN",
	4: "AUTO_CONVERSION_QUESTION_MARK",
	8: "AUTO_CONVERSION_EXCLAMATION_MARK",
}
var Config_AutoConversionKey_value = map[string]int32{
	"AUTO_CONVERSION_OFF":              0,
	"AUTO_CONVERSION_KUTEN":            1,
	"AUTO_CONVERSION_TOUTEN":           2,
	"AUTO_CONVERSION_QUESTION_MARK":    4,
	"AUTO_CONVERSION_EXCLAMATION_MARK": 8,
}

func (x Config_AutoConversionKey) Enum() *Config_AutoConversionKey {
	p := new(Config_AutoConversionKey)
	*p = x
	return p
}
func (x Config_AutoConversionKey) String() string {
	return proto.EnumName(Config_AutoConversionKey_name, int32(x))
}
func (x *Config_AutoConversionKey) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_AutoConversionKey_value, data, "Config_AutoConversionKey")
	if err != nil {
		return err
	}
	*x = Config_AutoConversionKey(value)
	return nil
}
func (Config_AutoConversionKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 10} }

// Mac only config items: yen_sign_character and use_japanese_layout.
type Config_YenSignCharacter int32

const (
	Config_YEN_SIGN  Config_YenSignCharacter = 0
	Config_BACKSLASH Config_YenSignCharacter = 1
)

var Config_YenSignCharacter_name = map[int32]string{
	0: "YEN_SIGN",
	1: "BACKSLASH",
}
var Config_YenSignCharacter_value = map[string]int32{
	"YEN_SIGN":  0,
	"BACKSLASH": 1,
}

func (x Config_YenSignCharacter) Enum() *Config_YenSignCharacter {
	p := new(Config_YenSignCharacter)
	*p = x
	return p
}
func (x Config_YenSignCharacter) String() string {
	return proto.EnumName(Config_YenSignCharacter_name, int32(x))
}
func (x *Config_YenSignCharacter) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Config_YenSignCharacter_value, data, "Config_YenSignCharacter")
	if err != nil {
		return err
	}
	*x = Config_YenSignCharacter(value)
	return nil
}
func (Config_YenSignCharacter) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 11} }

type GeneralConfig struct {
	// config version, corresponding to the suffix of config file
	ConfigVersion *uint32 `protobuf:"varint,1,opt,name=config_version,json=configVersion,def=0" json:"config_version,omitempty"`
	// The product version that wrote this config
	LastModifiedProductVersion *string `protobuf:"bytes,2,opt,name=last_modified_product_version,json=lastModifiedProductVersion,def=0.0.0.0" json:"last_modified_product_version,omitempty"`
	// last modified time in UTC second
	LastModifiedTime *uint64 `protobuf:"varint,3,opt,name=last_modified_time,json=lastModifiedTime,def=0" json:"last_modified_time,omitempty"`
	// These fileds are not used now
	// platform of machine that wrote this config
	Platform *string `protobuf:"bytes,4,opt,name=platform,def=" json:"platform,omitempty"`
	// UI locale of machine that wrote this config
	UiLocale *string `protobuf:"bytes,5,opt,name=ui_locale,json=uiLocale,def=" json:"ui_locale,omitempty"`
	// Whether to upload usage stats
	// This flag is used only for Android.
	UploadUsageStats *bool  `protobuf:"varint,6,opt,name=upload_usage_stats,json=uploadUsageStats,def=0" json:"upload_usage_stats,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GeneralConfig) Reset()                    { *m = GeneralConfig{} }
func (m *GeneralConfig) String() string            { return proto.CompactTextString(m) }
func (*GeneralConfig) ProtoMessage()               {}
func (*GeneralConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_GeneralConfig_ConfigVersion uint32 = 0
const Default_GeneralConfig_LastModifiedProductVersion string = "0.0.0.0"
const Default_GeneralConfig_LastModifiedTime uint64 = 0
const Default_GeneralConfig_UploadUsageStats bool = false

func (m *GeneralConfig) GetConfigVersion() uint32 {
	if m != nil && m.ConfigVersion != nil {
		return *m.ConfigVersion
	}
	return Default_GeneralConfig_ConfigVersion
}

func (m *GeneralConfig) GetLastModifiedProductVersion() string {
	if m != nil && m.LastModifiedProductVersion != nil {
		return *m.LastModifiedProductVersion
	}
	return Default_GeneralConfig_LastModifiedProductVersion
}

func (m *GeneralConfig) GetLastModifiedTime() uint64 {
	if m != nil && m.LastModifiedTime != nil {
		return *m.LastModifiedTime
	}
	return Default_GeneralConfig_LastModifiedTime
}

func (m *GeneralConfig) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *GeneralConfig) GetUiLocale() string {
	if m != nil && m.UiLocale != nil {
		return *m.UiLocale
	}
	return ""
}

func (m *GeneralConfig) GetUploadUsageStats() bool {
	if m != nil && m.UploadUsageStats != nil {
		return *m.UploadUsageStats
	}
	return Default_GeneralConfig_UploadUsageStats
}

type Config struct {
	// General config and logging/debugging:
	// We won't use 2-9 and 20-39 ids anymore for historical reasons.
	GeneralConfig *GeneralConfig `protobuf:"bytes,1,opt,name=general_config,json=generalConfig" json:"general_config,omitempty"`
	// set verbose level of logging library (FLAGS_v)
	VerboseLevel *int32 `protobuf:"varint,10,opt,name=verbose_level,json=verboseLevel,def=0" json:"verbose_level,omitempty"`
	// Incognito mode:
	// Disable all mutable operation if incognito_mode is true
	IncognitoMode *bool `protobuf:"varint,20,opt,name=incognito_mode,json=incognitoMode,def=0" json:"incognito_mode,omitempty"`
	// whether to show the set default dialog on startup
	CheckDefault *bool `protobuf:"varint,22,opt,name=check_default,json=checkDefault,def=1" json:"check_default,omitempty"`
	// Presentation mode:
	// disable all suggestion temporally.
	PresentationMode *bool `protobuf:"varint,23,opt,name=presentation_mode,json=presentationMode,def=0" json:"presentation_mode,omitempty"`
	// Roman/Kana
	PreeditMethod *Config_PreeditMethod `protobuf:"varint,40,opt,name=preedit_method,json=preeditMethod,enum=mozc.config.Config_PreeditMethod,def=0" json:"preedit_method,omitempty"`
	SessionKeymap *Config_SessionKeymap `protobuf:"varint,41,opt,name=session_keymap,json=sessionKeymap,enum=mozc.config.Config_SessionKeymap,def=-1" json:"session_keymap,omitempty"`
	// custom keymap
	// TODO(taku): replace it with repeated field
	CustomKeymapTable []byte `protobuf:"bytes,42,opt,name=custom_keymap_table,json=customKeymapTable" json:"custom_keymap_table,omitempty"`
	// custom roman table
	CustomRomanTable   []byte                           `protobuf:"bytes,43,opt,name=custom_roman_table,json=customRomanTable" json:"custom_roman_table,omitempty"`
	PunctuationMethod  *Config_PunctuationMethod        `protobuf:"varint,45,opt,name=punctuation_method,json=punctuationMethod,enum=mozc.config.Config_PunctuationMethod,def=0" json:"punctuation_method,omitempty"`
	SymbolMethod       *Config_SymbolMethod             `protobuf:"varint,46,opt,name=symbol_method,json=symbolMethod,enum=mozc.config.Config_SymbolMethod,def=0" json:"symbol_method,omitempty"`
	SpaceCharacterForm *Config_FundamentalCharacterForm `protobuf:"varint,47,opt,name=space_character_form,json=spaceCharacterForm,enum=mozc.config.Config_FundamentalCharacterForm,def=0" json:"space_character_form,omitempty"`
	// If this flag is true, Mozc toggles preedit method with some predefined
	// key events when IME is turned on.  Otherwise, Mozc ignores such kind of
	// key events so that their preferred can be preserved even when the toggle
	// key is pressed by accident.
	// As for Mozc, only Windows client supports such kind of toggle so this flag
	// is currently valid only on Windows.
	//
	// Background:
	//   Traditional Japanese IMEs have used "Roma-Ji" key in Japanese 106/109
	//   keyboard to toggle the preedit method between Roman and Kana style and
	//   this behavior was finally adopted into JIS X 4064:2002 as a basic
	//   functionality which is expected to support by a Japanese Input Method.
	//   However, people who are not aware of this functionality have been
	//   puzzled because the default key stroke is likely to be pressed
	//   by accident.
	UseKeyboardToChangePreeditMethod *bool                        `protobuf:"varint,48,opt,name=use_keyboard_to_change_preedit_method,json=useKeyboardToChangePreeditMethod,def=0" json:"use_keyboard_to_change_preedit_method,omitempty"`
	HistoryLearningLevel             *Config_HistoryLearningLevel `protobuf:"varint,50,opt,name=history_learning_level,json=historyLearningLevel,enum=mozc.config.Config_HistoryLearningLevel,def=0" json:"history_learning_level,omitempty"`
	SelectionShortcut                *Config_SelectionShortcut    `protobuf:"varint,52,opt,name=selection_shortcut,json=selectionShortcut,enum=mozc.config.Config_SelectionShortcut,def=1" json:"selection_shortcut,omitempty"`
	CharacterFormRules               []*Config_CharacterFormRule  `protobuf:"bytes,54,rep,name=character_form_rules,json=characterFormRules" json:"character_form_rules,omitempty"`
	// auto IME turn off feature
	UseAutoImeTurnOff *bool `protobuf:"varint,56,opt,name=use_auto_ime_turn_off,json=useAutoImeTurnOff,def=1" json:"use_auto_ime_turn_off,omitempty"`
	// Toggle to use cascanding window for debuging.
	UseCascadingWindow  *bool                       `protobuf:"varint,58,opt,name=use_cascading_window,json=useCascadingWindow,def=1" json:"use_cascading_window,omitempty"`
	ShiftKeyModeSwitch  *Config_ShiftKeyModeSwitch  `protobuf:"varint,59,opt,name=shift_key_mode_switch,json=shiftKeyModeSwitch,enum=mozc.config.Config_ShiftKeyModeSwitch,def=1" json:"shift_key_mode_switch,omitempty"`
	NumpadCharacterForm *Config_NumpadCharacterForm `protobuf:"varint,60,opt,name=numpad_character_form,json=numpadCharacterForm,enum=mozc.config.Config_NumpadCharacterForm,def=2" json:"numpad_character_form,omitempty"`
	UseAutoConversion   *bool                       `protobuf:"varint,61,opt,name=use_auto_conversion,json=useAutoConversion,def=0" json:"use_auto_conversion,omitempty"`
	// can't use AutoConversionKey as a type since
	// undefined enum type is not correctly handled.
	AutoConversionKey *uint32 `protobuf:"varint,62,opt,name=auto_conversion_key,json=autoConversionKey,def=13" json:"auto_conversion_key,omitempty"`
	// Mac-original JIS key layout has "yen-sign" key which generates
	// U+00A5 instead of U+005C and sometimes users get troubles with
	// them because they expect backslashes which are rendered as
	// yen-sign.  If this configuration is BACKSLASH, Mozc will
	// interpret U+005C even when the original key event is U+00A5.
	YenSignCharacter *Config_YenSignCharacter `protobuf:"varint,63,opt,name=yen_sign_character,json=yenSignCharacter,enum=mozc.config.Config_YenSignCharacter,def=0" json:"yen_sign_character,omitempty"`
	// Use Japanese keyboard layout even when the user uses other
	// keyboard layouts.  In Mac OSX people can use several keyboard
	// layouts such like French or Spanish but some people want to use
	// Japanese layout for Japanese.  See http://b/2917320
	UseJapaneseLayout *bool `protobuf:"varint,64,opt,name=use_japanese_layout,json=useJapaneseLayout,def=0" json:"use_japanese_layout,omitempty"`
	// Use kana modifier insensitive conversion.
	// e.g. かつこう -> 学校
	// Note that Request message has the same field.
	// - Request's one is controlled by the client. A user cannot control it.
	//   On the other hand Config's is under a user's control.
	// - Whether the feature is activated or not is decided by logical-AND
	//   of Request's and Config's.
	UseKanaModifierInsensitiveConversion *bool `protobuf:"varint,65,opt,name=use_kana_modifier_insensitive_conversion,json=useKanaModifierInsensitiveConversion,def=0" json:"use_kana_modifier_insensitive_conversion,omitempty"`
	// Use typing correction feature.
	// e.g. sunkai -> 深海
	UseTypingCorrection *bool `protobuf:"varint,66,opt,name=use_typing_correction,json=useTypingCorrection,def=0" json:"use_typing_correction,omitempty"`
	// ////////////////////////////////////////////////////////////
	//
	// Dictionary (80-99)
	//
	UseDateConversion        *bool `protobuf:"varint,80,opt,name=use_date_conversion,json=useDateConversion,def=1" json:"use_date_conversion,omitempty"`
	UseSingleKanjiConversion *bool `protobuf:"varint,81,opt,name=use_single_kanji_conversion,json=useSingleKanjiConversion,def=1" json:"use_single_kanji_conversion,omitempty"`
	UseSymbolConversion      *bool `protobuf:"varint,82,opt,name=use_symbol_conversion,json=useSymbolConversion,def=1" json:"use_symbol_conversion,omitempty"`
	UseNumberConversion      *bool `protobuf:"varint,83,opt,name=use_number_conversion,json=useNumberConversion,def=1" json:"use_number_conversion,omitempty"`
	UseEmoticonConversion    *bool `protobuf:"varint,84,opt,name=use_emoticon_conversion,json=useEmoticonConversion,def=1" json:"use_emoticon_conversion,omitempty"`
	UseCalculator            *bool `protobuf:"varint,85,opt,name=use_calculator,json=useCalculator,def=1" json:"use_calculator,omitempty"`
	UseT13NConversion        *bool `protobuf:"varint,86,opt,name=use_t13n_conversion,json=useT13nConversion,def=1" json:"use_t13n_conversion,omitempty"`
	UseZipCodeConversion     *bool `protobuf:"varint,87,opt,name=use_zip_code_conversion,json=useZipCodeConversion,def=1" json:"use_zip_code_conversion,omitempty"`
	UseSpellingCorrection    *bool `protobuf:"varint,88,opt,name=use_spelling_correction,json=useSpellingCorrection,def=1" json:"use_spelling_correction,omitempty"`
	// If use_emoji_conversion is true, the user can input emoji characters
	// by converting from a query string (e.g. "いぬ → 🐶" [U+1F436]).
	// Even if it is false, users might be able to input emoji characters
	// with other ways.
	// Note: Some characters can be either of text and emoji.  It would be ideal
	// to use the variation sequence to specify emoji presentation [U+FE0E],
	// although it is not implemented yet.
	// See: http://unicode.org/reports/tr51/#Presentation_Style
	UseEmojiConversion    *bool                         `protobuf:"varint,89,opt,name=use_emoji_conversion,json=useEmojiConversion,def=0" json:"use_emoji_conversion,omitempty"`
	InformationListConfig *Config_InformationListConfig `protobuf:"bytes,90,opt,name=information_list_config,json=informationListConfig" json:"information_list_config,omitempty"`
	// ////////////////////////////////////////////////////////////
	//
	// Suggest (100-119)
	//
	// Use history-based suggest feature.
	UseHistorySuggest *bool `protobuf:"varint,100,opt,name=use_history_suggest,json=useHistorySuggest,def=1" json:"use_history_suggest,omitempty"`
	// Use dictionary-based suggest feature.
	UseDictionarySuggest *bool `protobuf:"varint,101,opt,name=use_dictionary_suggest,json=useDictionarySuggest,def=1" json:"use_dictionary_suggest,omitempty"`
	// Use realtime conversion feature.
	UseRealtimeConversion *bool `protobuf:"varint,102,opt,name=use_realtime_conversion,json=useRealtimeConversion,def=1" json:"use_realtime_conversion,omitempty"`
	// Size of suggestions.
	SuggestionsSize *uint32 `protobuf:"varint,110,opt,name=suggestions_size,json=suggestionsSize,def=3" json:"suggestions_size,omitempty"`
	// ////////////////////////////////////////////////////////////
	//
	// Renderer (120-139)
	//
	// Use mode indicator feature.
	UseModeIndicator *bool `protobuf:"varint,120,opt,name=use_mode_indicator,json=useModeIndicator,def=1" json:"use_mode_indicator,omitempty"`
	// Allow the cloud handwriting.  The handwriting UI has to notice
	// user before activating the feature, and set this field to true
	// when the user permit.
	// NOTE: OSS version does not handle this field.
	AllowCloudHandwriting *bool  `protobuf:"varint,301,opt,name=allow_cloud_handwriting,json=allowCloudHandwriting,def=0" json:"allow_cloud_handwriting,omitempty"`
	XXX_unrecognized      []byte `json:"-"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_Config_VerboseLevel int32 = 0
const Default_Config_IncognitoMode bool = false
const Default_Config_CheckDefault bool = true
const Default_Config_PresentationMode bool = false
const Default_Config_PreeditMethod Config_PreeditMethod = Config_ROMAN
const Default_Config_SessionKeymap Config_SessionKeymap = Config_NONE
const Default_Config_PunctuationMethod Config_PunctuationMethod = Config_KUTEN_TOUTEN
const Default_Config_SymbolMethod Config_SymbolMethod = Config_CORNER_BRACKET_MIDDLE_DOT
const Default_Config_SpaceCharacterForm Config_FundamentalCharacterForm = Config_FUNDAMENTAL_INPUT_MODE
const Default_Config_UseKeyboardToChangePreeditMethod bool = false
const Default_Config_HistoryLearningLevel Config_HistoryLearningLevel = Config_DEFAULT_HISTORY
const Default_Config_SelectionShortcut Config_SelectionShortcut = Config_SHORTCUT_123456789
const Default_Config_UseAutoImeTurnOff bool = true
const Default_Config_UseCascadingWindow bool = true
const Default_Config_ShiftKeyModeSwitch Config_ShiftKeyModeSwitch = Config_ASCII_INPUT_MODE
const Default_Config_NumpadCharacterForm Config_NumpadCharacterForm = Config_NUMPAD_HALF_WIDTH
const Default_Config_UseAutoConversion bool = false
const Default_Config_AutoConversionKey uint32 = 13
const Default_Config_YenSignCharacter Config_YenSignCharacter = Config_YEN_SIGN
const Default_Config_UseJapaneseLayout bool = false
const Default_Config_UseKanaModifierInsensitiveConversion bool = false
const Default_Config_UseTypingCorrection bool = false
const Default_Config_UseDateConversion bool = true
const Default_Config_UseSingleKanjiConversion bool = true
const Default_Config_UseSymbolConversion bool = true
const Default_Config_UseNumberConversion bool = true
const Default_Config_UseEmoticonConversion bool = true
const Default_Config_UseCalculator bool = true
const Default_Config_UseT13NConversion bool = true
const Default_Config_UseZipCodeConversion bool = true
const Default_Config_UseSpellingCorrection bool = true
const Default_Config_UseEmojiConversion bool = false
const Default_Config_UseHistorySuggest bool = true
const Default_Config_UseDictionarySuggest bool = true
const Default_Config_UseRealtimeConversion bool = true
const Default_Config_SuggestionsSize uint32 = 3
const Default_Config_UseModeIndicator bool = true
const Default_Config_AllowCloudHandwriting bool = false

func (m *Config) GetGeneralConfig() *GeneralConfig {
	if m != nil {
		return m.GeneralConfig
	}
	return nil
}

func (m *Config) GetVerboseLevel() int32 {
	if m != nil && m.VerboseLevel != nil {
		return *m.VerboseLevel
	}
	return Default_Config_VerboseLevel
}

func (m *Config) GetIncognitoMode() bool {
	if m != nil && m.IncognitoMode != nil {
		return *m.IncognitoMode
	}
	return Default_Config_IncognitoMode
}

func (m *Config) GetCheckDefault() bool {
	if m != nil && m.CheckDefault != nil {
		return *m.CheckDefault
	}
	return Default_Config_CheckDefault
}

func (m *Config) GetPresentationMode() bool {
	if m != nil && m.PresentationMode != nil {
		return *m.PresentationMode
	}
	return Default_Config_PresentationMode
}

func (m *Config) GetPreeditMethod() Config_PreeditMethod {
	if m != nil && m.PreeditMethod != nil {
		return *m.PreeditMethod
	}
	return Default_Config_PreeditMethod
}

func (m *Config) GetSessionKeymap() Config_SessionKeymap {
	if m != nil && m.SessionKeymap != nil {
		return *m.SessionKeymap
	}
	return Default_Config_SessionKeymap
}

func (m *Config) GetCustomKeymapTable() []byte {
	if m != nil {
		return m.CustomKeymapTable
	}
	return nil
}

func (m *Config) GetCustomRomanTable() []byte {
	if m != nil {
		return m.CustomRomanTable
	}
	return nil
}

func (m *Config) GetPunctuationMethod() Config_PunctuationMethod {
	if m != nil && m.PunctuationMethod != nil {
		return *m.PunctuationMethod
	}
	return Default_Config_PunctuationMethod
}

func (m *Config) GetSymbolMethod() Config_SymbolMethod {
	if m != nil && m.SymbolMethod != nil {
		return *m.SymbolMethod
	}
	return Default_Config_SymbolMethod
}

func (m *Config) GetSpaceCharacterForm() Config_FundamentalCharacterForm {
	if m != nil && m.SpaceCharacterForm != nil {
		return *m.SpaceCharacterForm
	}
	return Default_Config_SpaceCharacterForm
}

func (m *Config) GetUseKeyboardToChangePreeditMethod() bool {
	if m != nil && m.UseKeyboardToChangePreeditMethod != nil {
		return *m.UseKeyboardToChangePreeditMethod
	}
	return Default_Config_UseKeyboardToChangePreeditMethod
}

func (m *Config) GetHistoryLearningLevel() Config_HistoryLearningLevel {
	if m != nil && m.HistoryLearningLevel != nil {
		return *m.HistoryLearningLevel
	}
	return Default_Config_HistoryLearningLevel
}

func (m *Config) GetSelectionShortcut() Config_SelectionShortcut {
	if m != nil && m.SelectionShortcut != nil {
		return *m.SelectionShortcut
	}
	return Default_Config_SelectionShortcut
}

func (m *Config) GetCharacterFormRules() []*Config_CharacterFormRule {
	if m != nil {
		return m.CharacterFormRules
	}
	return nil
}

func (m *Config) GetUseAutoImeTurnOff() bool {
	if m != nil && m.UseAutoImeTurnOff != nil {
		return *m.UseAutoImeTurnOff
	}
	return Default_Config_UseAutoImeTurnOff
}

func (m *Config) GetUseCascadingWindow() bool {
	if m != nil && m.UseCascadingWindow != nil {
		return *m.UseCascadingWindow
	}
	return Default_Config_UseCascadingWindow
}

func (m *Config) GetShiftKeyModeSwitch() Config_ShiftKeyModeSwitch {
	if m != nil && m.ShiftKeyModeSwitch != nil {
		return *m.ShiftKeyModeSwitch
	}
	return Default_Config_ShiftKeyModeSwitch
}

func (m *Config) GetNumpadCharacterForm() Config_NumpadCharacterForm {
	if m != nil && m.NumpadCharacterForm != nil {
		return *m.NumpadCharacterForm
	}
	return Default_Config_NumpadCharacterForm
}

func (m *Config) GetUseAutoConversion() bool {
	if m != nil && m.UseAutoConversion != nil {
		return *m.UseAutoConversion
	}
	return Default_Config_UseAutoConversion
}

func (m *Config) GetAutoConversionKey() uint32 {
	if m != nil && m.AutoConversionKey != nil {
		return *m.AutoConversionKey
	}
	return Default_Config_AutoConversionKey
}

func (m *Config) GetYenSignCharacter() Config_YenSignCharacter {
	if m != nil && m.YenSignCharacter != nil {
		return *m.YenSignCharacter
	}
	return Default_Config_YenSignCharacter
}

func (m *Config) GetUseJapaneseLayout() bool {
	if m != nil && m.UseJapaneseLayout != nil {
		return *m.UseJapaneseLayout
	}
	return Default_Config_UseJapaneseLayout
}

func (m *Config) GetUseKanaModifierInsensitiveConversion() bool {
	if m != nil && m.UseKanaModifierInsensitiveConversion != nil {
		return *m.UseKanaModifierInsensitiveConversion
	}
	return Default_Config_UseKanaModifierInsensitiveConversion
}

func (m *Config) GetUseTypingCorrection() bool {
	if m != nil && m.UseTypingCorrection != nil {
		return *m.UseTypingCorrection
	}
	return Default_Config_UseTypingCorrection
}

func (m *Config) GetUseDateConversion() bool {
	if m != nil && m.UseDateConversion != nil {
		return *m.UseDateConversion
	}
	return Default_Config_UseDateConversion
}

func (m *Config) GetUseSingleKanjiConversion() bool {
	if m != nil && m.UseSingleKanjiConversion != nil {
		return *m.UseSingleKanjiConversion
	}
	return Default_Config_UseSingleKanjiConversion
}

func (m *Config) GetUseSymbolConversion() bool {
	if m != nil && m.UseSymbolConversion != nil {
		return *m.UseSymbolConversion
	}
	return Default_Config_UseSymbolConversion
}

func (m *Config) GetUseNumberConversion() bool {
	if m != nil && m.UseNumberConversion != nil {
		return *m.UseNumberConversion
	}
	return Default_Config_UseNumberConversion
}

func (m *Config) GetUseEmoticonConversion() bool {
	if m != nil && m.UseEmoticonConversion != nil {
		return *m.UseEmoticonConversion
	}
	return Default_Config_UseEmoticonConversion
}

func (m *Config) GetUseCalculator() bool {
	if m != nil && m.UseCalculator != nil {
		return *m.UseCalculator
	}
	return Default_Config_UseCalculator
}

func (m *Config) GetUseT13NConversion() bool {
	if m != nil && m.UseT13NConversion != nil {
		return *m.UseT13NConversion
	}
	return Default_Config_UseT13NConversion
}

func (m *Config) GetUseZipCodeConversion() bool {
	if m != nil && m.UseZipCodeConversion != nil {
		return *m.UseZipCodeConversion
	}
	return Default_Config_UseZipCodeConversion
}

func (m *Config) GetUseSpellingCorrection() bool {
	if m != nil && m.UseSpellingCorrection != nil {
		return *m.UseSpellingCorrection
	}
	return Default_Config_UseSpellingCorrection
}

func (m *Config) GetUseEmojiConversion() bool {
	if m != nil && m.UseEmojiConversion != nil {
		return *m.UseEmojiConversion
	}
	return Default_Config_UseEmojiConversion
}

func (m *Config) GetInformationListConfig() *Config_InformationListConfig {
	if m != nil {
		return m.InformationListConfig
	}
	return nil
}

func (m *Config) GetUseHistorySuggest() bool {
	if m != nil && m.UseHistorySuggest != nil {
		return *m.UseHistorySuggest
	}
	return Default_Config_UseHistorySuggest
}

func (m *Config) GetUseDictionarySuggest() bool {
	if m != nil && m.UseDictionarySuggest != nil {
		return *m.UseDictionarySuggest
	}
	return Default_Config_UseDictionarySuggest
}

func (m *Config) GetUseRealtimeConversion() bool {
	if m != nil && m.UseRealtimeConversion != nil {
		return *m.UseRealtimeConversion
	}
	return Default_Config_UseRealtimeConversion
}

func (m *Config) GetSuggestionsSize() uint32 {
	if m != nil && m.SuggestionsSize != nil {
		return *m.SuggestionsSize
	}
	return Default_Config_SuggestionsSize
}

func (m *Config) GetUseModeIndicator() bool {
	if m != nil && m.UseModeIndicator != nil {
		return *m.UseModeIndicator
	}
	return Default_Config_UseModeIndicator
}

func (m *Config) GetAllowCloudHandwriting() bool {
	if m != nil && m.AllowCloudHandwriting != nil {
		return *m.AllowCloudHandwriting
	}
	return Default_Config_AllowCloudHandwriting
}

type Config_CharacterFormRule struct {
	Group                   *string               `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	PreeditCharacterForm    *Config_CharacterForm `protobuf:"varint,2,opt,name=preedit_character_form,json=preeditCharacterForm,enum=mozc.config.Config_CharacterForm,def=1" json:"preedit_character_form,omitempty"`
	ConversionCharacterForm *Config_CharacterForm `protobuf:"varint,3,opt,name=conversion_character_form,json=conversionCharacterForm,enum=mozc.config.Config_CharacterForm,def=1" json:"conversion_character_form,omitempty"`
	XXX_unrecognized        []byte                `json:"-"`
}

func (m *Config_CharacterFormRule) Reset()                    { *m = Config_CharacterFormRule{} }
func (m *Config_CharacterFormRule) String() string            { return proto.CompactTextString(m) }
func (*Config_CharacterFormRule) ProtoMessage()               {}
func (*Config_CharacterFormRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

const Default_Config_CharacterFormRule_PreeditCharacterForm Config_CharacterForm = Config_FULL_WIDTH
const Default_Config_CharacterFormRule_ConversionCharacterForm Config_CharacterForm = Config_FULL_WIDTH

func (m *Config_CharacterFormRule) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *Config_CharacterFormRule) GetPreeditCharacterForm() Config_CharacterForm {
	if m != nil && m.PreeditCharacterForm != nil {
		return *m.PreeditCharacterForm
	}
	return Default_Config_CharacterFormRule_PreeditCharacterForm
}

func (m *Config_CharacterFormRule) GetConversionCharacterForm() Config_CharacterForm {
	if m != nil && m.ConversionCharacterForm != nil {
		return *m.ConversionCharacterForm
	}
	return Default_Config_CharacterFormRule_ConversionCharacterForm
}

type Config_InformationListConfig struct {
	UseLocalUsageDictionary *bool  `protobuf:"varint,1,opt,name=use_local_usage_dictionary,json=useLocalUsageDictionary,def=1" json:"use_local_usage_dictionary,omitempty"`
	XXX_unrecognized        []byte `json:"-"`
}

func (m *Config_InformationListConfig) Reset()                    { *m = Config_InformationListConfig{} }
func (m *Config_InformationListConfig) String() string            { return proto.CompactTextString(m) }
func (*Config_InformationListConfig) ProtoMessage()               {}
func (*Config_InformationListConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

const Default_Config_InformationListConfig_UseLocalUsageDictionary bool = true

func (m *Config_InformationListConfig) GetUseLocalUsageDictionary() bool {
	if m != nil && m.UseLocalUsageDictionary != nil {
		return *m.UseLocalUsageDictionary
	}
	return Default_Config_InformationListConfig_UseLocalUsageDictionary
}

func init() {
	proto.RegisterType((*GeneralConfig)(nil), "mozc.config.GeneralConfig")
	proto.RegisterType((*Config)(nil), "mozc.config.Config")
	proto.RegisterType((*Config_CharacterFormRule)(nil), "mozc.config.Config.CharacterFormRule")
	proto.RegisterType((*Config_InformationListConfig)(nil), "mozc.config.Config.InformationListConfig")
	proto.RegisterEnum("mozc.config.Config_PreeditMethod", Config_PreeditMethod_name, Config_PreeditMethod_value)
	proto.RegisterEnum("mozc.config.Config_SessionKeymap", Config_SessionKeymap_name, Config_SessionKeymap_value)
	proto.RegisterEnum("mozc.config.Config_PunctuationMethod", Config_PunctuationMethod_name, Config_PunctuationMethod_value)
	proto.RegisterEnum("mozc.config.Config_SymbolMethod", Config_SymbolMethod_name, Config_SymbolMethod_value)
	proto.RegisterEnum("mozc.config.Config_FundamentalCharacterForm", Config_FundamentalCharacterForm_name, Config_FundamentalCharacterForm_value)
	proto.RegisterEnum("mozc.config.Config_HistoryLearningLevel", Config_HistoryLearningLevel_name, Config_HistoryLearningLevel_value)
	proto.RegisterEnum("mozc.config.Config_SelectionShortcut", Config_SelectionShortcut_name, Config_SelectionShortcut_value)
	proto.RegisterEnum("mozc.config.Config_CharacterForm", Config_CharacterForm_name, Config_CharacterForm_value)
	proto.RegisterEnum("mozc.config.Config_ShiftKeyModeSwitch", Config_ShiftKeyModeSwitch_name, Config_ShiftKeyModeSwitch_value)
	proto.RegisterEnum("mozc.config.Config_NumpadCharacterForm", Config_NumpadCharacterForm_name, Config_NumpadCharacterForm_value)
	proto.RegisterEnum("mozc.config.Config_AutoConversionKey", Config_AutoConversionKey_name, Config_AutoConversionKey_value)
	proto.RegisterEnum("mozc.config.Config_YenSignCharacter", Config_YenSignCharacter_name, Config_YenSignCharacter_value)
}

func init() { proto.RegisterFile("mozc/config/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdb, 0x76, 0xdb, 0xc6,
	0xd5, 0x16, 0xa9, 0x13, 0xb5, 0x25, 0x2a, 0xe0, 0xe8, 0x84, 0xe8, 0xff, 0xbd, 0x96, 0xc2, 0x3a,
	0x29, 0xdd, 0xb8, 0x94, 0x2d, 0x39, 0x8e, 0xc3, 0xa4, 0x69, 0x21, 0x92, 0xb2, 0x28, 0x1e, 0x20,
	0x03, 0xa0, 0x1d, 0xbb, 0xed, 0x42, 0x21, 0x70, 0x48, 0x8e, 0x05, 0x62, 0xb8, 0x70, 0x90, 0x2b,
	0x5f, 0xf5, 0x71, 0x7a, 0x91, 0x3c, 0x40, 0xdf, 0xa7, 0x6d, 0xfa, 0x0a, 0xbd, 0x6a, 0xd7, 0x0c,
	0x00, 0x71, 0x00, 0x51, 0x37, 0x95, 0x2e, 0x40, 0xee, 0xfd, 0x7d, 0x7b, 0x66, 0x7f, 0xb3, 0x67,
	0x66, 0x83, 0x20, 0x4f, 0xe8, 0x47, 0xfb, 0xd0, 0xa6, 0xee, 0x90, 0x8c, 0xe2, 0x47, 0x75, 0xea,
	0xd1, 0x80, 0xa2, 0x75, 0xe6, 0xa9, 0x46, 0xa6, 0xf2, 0x5f, 0xf3, 0x50, 0x7c, 0x89, 0x5d, 0xec,
	0x59, 0x4e, 0x9d, 0x5b, 0x50, 0x05, 0x36, 0x23, 0x9f, 0x79, 0x8d, 0x3d, 0x9f, 0x50, 0x57, 0xce,
	0x1d, 0xe4, 0x2a, 0xc5, 0x5a, 0xee, 0x89, 0x56, 0x8c, 0x1c, 0xaf, 0x23, 0x3b, 0x3a, 0x87, 0x07,
	0x8e, 0xe5, 0x07, 0xe6, 0x84, 0x0e, 0xc8, 0x90, 0xe0, 0x81, 0x39, 0xf5, 0xe8, 0x20, 0xb4, 0x83,
	0x5b, 0x62, 0xfe, 0x20, 0x57, 0x59, 0xab, 0xad, 0x3e, 0xa9, 0xf2, 0x7f, 0x6d, 0x9f, 0xa1, 0xbb,
	0x31, 0xf8, 0x22, 0xc2, 0x26, 0xb1, 0x0e, 0x01, 0xa5, 0x63, 0x05, 0x64, 0x82, 0xe5, 0xc5, 0x83,
	0x5c, 0x65, 0x89, 0x8d, 0x2c, 0x89, 0x54, 0x83, 0x4c, 0x30, 0xfa, 0x7f, 0x28, 0x4c, 0x1d, 0x2b,
	0x18, 0x52, 0x6f, 0x22, 0x2f, 0xf1, 0x71, 0x16, 0xb4, 0x5b, 0x0b, 0x7a, 0x00, 0x6b, 0x21, 0x31,
	0x1d, 0x6a, 0x5b, 0x0e, 0x96, 0x97, 0x13, 0x77, 0x48, 0x3a, 0xdc, 0x82, 0x8e, 0x01, 0x85, 0x53,
	0x87, 0x5a, 0x03, 0x33, 0xf4, 0xad, 0x11, 0x36, 0xfd, 0xc0, 0x0a, 0x7c, 0x79, 0xe5, 0x20, 0x57,
	0x29, 0xd4, 0x96, 0x87, 0x96, 0xe3, 0x63, 0x4d, 0x8a, 0x00, 0x7d, 0xe6, 0xd7, 0x99, 0xbb, 0xfc,
	0xb7, 0x5f, 0xc0, 0x4a, 0xac, 0x91, 0x02, 0x9b, 0xa3, 0x48, 0x34, 0x33, 0x92, 0x84, 0x6b, 0xb4,
	0x7e, 0xb4, 0x5f, 0x15, 0xb4, 0xad, 0xa6, 0x74, 0xd5, 0x8a, 0xa3, 0x94, 0xcc, 0x5f, 0x40, 0xf1,
	0x1a, 0x7b, 0x97, 0xd4, 0xc7, 0xa6, 0x83, 0xaf, 0xb1, 0x23, 0xc3, 0x41, 0xae, 0xb2, 0xcc, 0x72,
	0xdd, 0x88, 0xed, 0x1d, 0x66, 0x46, 0x8f, 0x61, 0x93, 0xb8, 0x36, 0x1d, 0xb9, 0x24, 0xa0, 0x4c,
	0x1d, 0x2c, 0x6f, 0x8b, 0xd3, 0x2c, 0xde, 0x3a, 0xbb, 0x74, 0x80, 0xd1, 0x23, 0x28, 0xda, 0x63,
	0x6c, 0x5f, 0x99, 0x03, 0x3c, 0xb4, 0x42, 0x27, 0x90, 0x77, 0x39, 0x78, 0x29, 0xf0, 0x42, 0xac,
	0x6d, 0x70, 0x57, 0x23, 0xf2, 0xa0, 0x23, 0x28, 0x4d, 0x3d, 0xec, 0x63, 0x37, 0xb0, 0x02, 0x42,
	0xdd, 0x28, 0xf6, 0x5e, 0x4a, 0x02, 0xd1, 0xcf, 0xc3, 0xab, 0xb0, 0x39, 0xf5, 0x30, 0x1e, 0x90,
	0xc0, 0x9c, 0xe0, 0x60, 0x4c, 0x07, 0x72, 0xe5, 0x20, 0x57, 0xd9, 0x3c, 0xfa, 0x2c, 0x95, 0x77,
	0x94, 0x61, 0xf5, 0x22, 0x42, 0x76, 0x39, 0xb0, 0xb6, 0xac, 0xa9, 0x5d, 0xa5, 0xa7, 0x15, 0xa7,
	0xa2, 0x15, 0xf5, 0x60, 0xd3, 0xc7, 0x3e, 0xab, 0x00, 0xf3, 0x0a, 0xdf, 0x4c, 0xac, 0xa9, 0xfc,
	0xe8, 0xfe, 0x80, 0x7a, 0x84, 0x6c, 0x73, 0x60, 0x6d, 0xa9, 0xa7, 0xf6, 0x9a, 0x5a, 0xd1, 0x17,
	0x8d, 0xa8, 0x0a, 0x5b, 0x76, 0xe8, 0x07, 0x74, 0x12, 0x87, 0x33, 0x03, 0xeb, 0xd2, 0xc1, 0xf2,
	0xaf, 0x0e, 0x72, 0x95, 0x0d, 0xad, 0x14, 0xb9, 0x22, 0xa8, 0xc1, 0x1c, 0xe8, 0x31, 0xa0, 0x18,
	0xef, 0xd1, 0x89, 0xe5, 0xc6, 0xf0, 0x2f, 0x39, 0x5c, 0x8a, 0x3c, 0x1a, 0x73, 0x44, 0xe8, 0x4b,
	0x40, 0xd3, 0xd0, 0xb5, 0x83, 0x30, 0x56, 0x2c, 0x92, 0xe0, 0xd7, 0x7c, 0xc6, 0x9f, 0xcf, 0x95,
	0x60, 0x86, 0x8e, 0x65, 0xd8, 0x68, 0xf7, 0x8d, 0x66, 0xcf, 0x34, 0x54, 0xf6, 0xd0, 0x4a, 0xd3,
	0x2c, 0x00, 0xfd, 0x09, 0x8a, 0xfe, 0xcd, 0xe4, 0x92, 0x3a, 0x49, 0xf8, 0x2a, 0x0f, 0x7f, 0x30,
	0x57, 0x10, 0x0e, 0x8c, 0x23, 0x7f, 0x5a, 0x57, 0xb5, 0x5e, 0x53, 0x33, 0x4f, 0x34, 0xa5, 0xde,
	0x6e, 0x1a, 0x66, 0xb7, 0xd5, 0x68, 0x74, 0x9a, 0x66, 0x43, 0x35, 0xb4, 0x0d, 0x5f, 0x00, 0xa2,
	0x6b, 0xd8, 0xf6, 0xa7, 0x96, 0x8d, 0x4d, 0x7b, 0x6c, 0x79, 0x96, 0x1d, 0x60, 0xcf, 0xe4, 0xbb,
	0xe8, 0x90, 0x0f, 0xf4, 0x78, 0xde, 0x40, 0xa7, 0xa1, 0x3b, 0xb0, 0x26, 0xac, 0x14, 0x9c, 0x7a,
	0x42, 0x3a, 0xa5, 0xde, 0xa4, 0xb6, 0x7b, 0xda, 0xef, 0x35, 0x94, 0x6e, 0xb3, 0x67, 0x28, 0x1d,
	0xb3, 0xd5, 0xbb, 0xe8, 0x1b, 0x66, 0x57, 0x6d, 0x34, 0x35, 0xc4, 0x47, 0x48, 0x61, 0xd1, 0x6b,
	0xf8, 0x3c, 0xf4, 0x31, 0x5b, 0x98, 0x4b, 0x6a, 0x79, 0x03, 0x33, 0xa0, 0x6c, 0x06, 0xee, 0x08,
	0x9b, 0x99, 0x9a, 0x7a, 0x22, 0x16, 0xe1, 0x41, 0xe8, 0xe3, 0x76, 0x4c, 0x31, 0x68, 0x9d, 0x13,
	0x52, 0x95, 0x85, 0x28, 0xec, 0x8e, 0x89, 0x1f, 0x50, 0xef, 0xc6, 0x74, 0xb0, 0xe5, 0xb9, 0xc4,
	0x1d, 0xc5, 0x5b, 0xea, 0x88, 0x67, 0x54, 0x99, 0x97, 0xd1, 0x59, 0xc4, 0xe8, 0xc4, 0x04, 0xbe,
	0xd7, 0x6a, 0x9f, 0x34, 0x9a, 0xa7, 0x4a, 0xbf, 0x63, 0x98, 0x67, 0x2d, 0xdd, 0x50, 0xb5, 0xb7,
	0xda, 0xf6, 0x78, 0x0e, 0x0c, 0x8d, 0x01, 0xf9, 0xd8, 0xc1, 0x36, 0x2f, 0x02, 0x7f, 0x4c, 0xbd,
	0xc0, 0x0e, 0x03, 0xf9, 0xd9, 0xfd, 0x65, 0xa0, 0x27, 0x68, 0x3d, 0x06, 0xd7, 0x90, 0x7e, 0xa6,
	0x6a, 0x46, 0xbd, 0x6f, 0x98, 0x4f, 0x8f, 0x8e, 0x9f, 0x7d, 0xf5, 0xfc, 0xeb, 0x17, 0xdf, 0x68,
	0x25, 0x3f, 0x0b, 0x43, 0x6f, 0x60, 0x3b, 0xbd, 0x48, 0xa6, 0x17, 0x3a, 0xd8, 0x97, 0x9f, 0x1f,
	0x2c, 0x56, 0xd6, 0xe7, 0x8f, 0x95, 0xd2, 0x5c, 0x0b, 0x1d, 0xac, 0x21, 0x3b, 0x6b, 0xf2, 0xd1,
	0x73, 0xd8, 0x61, 0x6b, 0x61, 0x85, 0x01, 0x35, 0xc9, 0x04, 0x9b, 0x41, 0xe8, 0xb9, 0x26, 0x1d,
	0x0e, 0xe5, 0x17, 0xc2, 0x79, 0x51, 0x0a, 0x7d, 0xac, 0x84, 0x01, 0x6d, 0x4d, 0xb0, 0x11, 0x7a,
	0xae, 0x3a, 0x1c, 0xa2, 0xe7, 0xb0, 0xcd, 0x78, 0xb6, 0xe5, 0xdb, 0xd6, 0x80, 0x09, 0xfd, 0x81,
	0xb8, 0x03, 0xfa, 0x41, 0xae, 0x09, 0x34, 0x14, 0xfa, 0xb8, 0x9e, 0x00, 0xde, 0x70, 0x3f, 0xba,
	0x82, 0x1d, 0x7f, 0x4c, 0x86, 0x01, 0x5b, 0x7d, 0x7e, 0xd2, 0x98, 0xfe, 0x07, 0x12, 0xd8, 0x63,
	0xf9, 0x5b, 0xae, 0xda, 0x17, 0x73, 0x55, 0x63, 0x84, 0x36, 0xbe, 0x61, 0x27, 0x8f, 0xce, 0xd1,
	0x35, 0x49, 0xd1, 0xeb, 0xad, 0x56, 0xba, 0xd0, 0xee, 0xa0, 0x90, 0x0b, 0x3b, 0x6e, 0x38, 0x99,
	0x5a, 0x83, 0x6c, 0x85, 0x7f, 0xc7, 0x07, 0xfb, 0xe5, 0xbc, 0xc1, 0x7a, 0x9c, 0x90, 0x2e, 0xee,
	0x52, 0xaf, 0xdf, 0xbd, 0x50, 0x1a, 0xe6, 0x99, 0xd2, 0x39, 0x35, 0xdf, 0xb4, 0x1a, 0xc6, 0x99,
	0xb6, 0xe5, 0xde, 0xc5, 0xa1, 0xaf, 0x60, 0xeb, 0x56, 0x4c, 0x9b, 0xba, 0xc9, 0xed, 0xf7, 0x1b,
	0xb1, 0x8c, 0x13, 0x2d, 0xeb, 0xb7, 0x7e, 0x74, 0x04, 0x5b, 0x19, 0x0a, 0x53, 0x47, 0xfe, 0x9e,
	0xdf, 0xb6, 0xf9, 0xa7, 0xc7, 0x5a, 0xc9, 0x4a, 0x11, 0xda, 0xf8, 0x06, 0xfd, 0x01, 0xd0, 0x0d,
	0x76, 0x4d, 0x9f, 0x8c, 0xdc, 0x59, 0x72, 0xf2, 0x6f, 0x79, 0x5e, 0x0f, 0xe7, 0xe5, 0xf5, 0x16,
	0xbb, 0x3a, 0x19, 0xb9, 0xb7, 0x13, 0xae, 0x15, 0xde, 0x36, 0x7b, 0xa6, 0xde, 0x7a, 0xd9, 0xd3,
	0xa4, 0x9b, 0x8c, 0x2f, 0x49, 0xe4, 0xbd, 0x35, 0xb5, 0x5c, 0xcc, 0x2e, 0x26, 0xeb, 0x86, 0x86,
	0x81, 0xfc, 0xbb, 0x6c, 0x22, 0xe7, 0x31, 0xa0, 0xc3, 0xfd, 0xe8, 0x8f, 0x50, 0xe1, 0x1b, 0xdb,
	0x72, 0xad, 0xe4, 0xfe, 0xf6, 0x4c, 0xe2, 0xfa, 0xd8, 0xf5, 0x49, 0x40, 0xae, 0xb1, 0x28, 0x8a,
	0x22, 0xc6, 0x7a, 0xc8, 0xf6, 0xb6, 0xe5, 0x5a, 0xf1, 0xc5, 0xee, 0xb5, 0x66, 0x1c, 0x41, 0xa7,
	0x6f, 0xa2, 0x5a, 0x0d, 0x6e, 0xa6, 0xac, 0xe0, 0x6c, 0xea, 0x79, 0xd1, 0x2e, 0x91, 0x4f, 0xc4,
	0x58, 0x6c, 0xe6, 0x06, 0x87, 0xd4, 0x6f, 0x11, 0xe8, 0x59, 0x94, 0xd0, 0xc0, 0x0a, 0x52, 0x93,
	0xb8, 0xc8, 0x14, 0x79, 0xc3, 0x0a, 0xc4, 0x01, 0xeb, 0xf0, 0x7f, 0x8c, 0xe5, 0x13, 0x77, 0xe4,
	0xf0, 0xb4, 0xde, 0x13, 0x91, 0xfd, 0x4a, 0x60, 0xcb, 0xa1, 0x8f, 0x75, 0x8e, 0x6b, 0x33, 0x98,
	0x10, 0xe4, 0x45, 0x34, 0xeb, 0xf8, 0x2c, 0x17, 0xe8, 0x9a, 0x40, 0x67, 0xb3, 0x8b, 0x0e, 0xf1,
	0xbb, 0x4c, 0x37, 0x9c, 0x5c, 0x62, 0x4f, 0x64, 0xea, 0x19, 0x66, 0x8f, 0x23, 0x04, 0xe6, 0x77,
	0xb0, 0xc7, 0x98, 0x78, 0x42, 0x03, 0x62, 0x53, 0x57, 0xe4, 0x1a, 0x02, 0x97, 0x85, 0x6f, 0xc6,
	0x18, 0x81, 0xfd, 0x25, 0x6c, 0x46, 0x7b, 0xdb, 0xb1, 0x43, 0xc7, 0x0a, 0xa8, 0x27, 0xf7, 0x05,
	0x52, 0x91, 0xef, 0xea, 0xc4, 0x95, 0x28, 0x1b, 0x3c, 0x3d, 0x4e, 0x0d, 0xf3, 0x3a, 0xa3, 0xac,
	0xf1, 0xf4, 0x58, 0x1c, 0xe2, 0xdb, 0x68, 0x82, 0x1f, 0xc9, 0xd4, 0xb4, 0xd9, 0x21, 0x20, 0x30,
	0xdf, 0x08, 0x4c, 0x76, 0xc6, 0xbc, 0x23, 0xd3, 0x3a, 0x1d, 0xe0, 0xbb, 0xd9, 0xf9, 0x53, 0xec,
	0x38, 0x99, 0x4a, 0xf8, 0x21, 0x93, 0x9d, 0x1e, 0x63, 0x84, 0x52, 0xf8, 0x3a, 0x3a, 0xb9, 0xf0,
	0x84, 0xa6, 0x57, 0xf3, 0xad, 0x58, 0x44, 0x28, 0x52, 0x26, 0xb5, 0x90, 0x16, 0xec, 0x11, 0x97,
	0x1d, 0x1f, 0xd1, 0xa5, 0xef, 0x10, 0x3f, 0x48, 0x9a, 0xbe, 0x77, 0xbc, 0xe9, 0x7b, 0x34, 0x6f,
	0xdf, 0xb5, 0x66, 0x94, 0x0e, 0xf1, 0x83, 0xb8, 0x07, 0xdc, 0x21, 0xf3, 0xcc, 0x89, 0x98, 0xc9,
	0x2d, 0xe6, 0x87, 0xa3, 0x11, 0xf6, 0x03, 0x79, 0x90, 0x11, 0x33, 0xbe, 0xb3, 0xf4, 0xc8, 0x8d,
	0x6a, 0xb0, 0xcb, 0x8b, 0x9b, 0xf0, 0x04, 0x2d, 0x81, 0x88, 0x33, 0x5a, 0x36, 0x6e, 0x21, 0x09,
	0x37, 0xd6, 0xd2, 0xc3, 0x96, 0xc3, 0x1a, 0x6d, 0x51, 0x90, 0x61, 0x46, 0x4b, 0x2d, 0xc6, 0x08,
	0x92, 0x3c, 0x06, 0x29, 0x1e, 0x8a, 0x50, 0xd7, 0x37, 0x7d, 0xf2, 0x11, 0xcb, 0x6e, 0xf4, 0x92,
	0x70, 0xac, 0x7d, 0x22, 0xb8, 0x74, 0xf2, 0x11, 0xa3, 0x23, 0x60, 0xb2, 0x46, 0xa7, 0x3e, 0x71,
	0x07, 0xc4, 0xe6, 0xb5, 0xf5, 0x67, 0x61, 0x18, 0x29, 0xf4, 0x31, 0x3b, 0xbf, 0x5b, 0x89, 0x17,
	0x7d, 0x0f, 0x7b, 0x96, 0xe3, 0xd0, 0x0f, 0xa6, 0xed, 0xd0, 0x70, 0x60, 0x8e, 0x2d, 0x77, 0xf0,
	0xc1, 0x23, 0x01, 0x71, 0x47, 0xf2, 0x4f, 0x79, 0x71, 0xc5, 0x76, 0x38, 0xac, 0xce, 0x50, 0x67,
	0x33, 0xd0, 0xfe, 0xbf, 0x73, 0x50, 0xba, 0x73, 0x13, 0xa2, 0x6d, 0x58, 0x1e, 0x79, 0x34, 0x9c,
	0xf2, 0x6e, 0x7d, 0x4d, 0x8b, 0xbe, 0x20, 0x1b, 0x76, 0x93, 0x06, 0x24, 0x73, 0x5f, 0xe4, 0xef,
	0xef, 0x45, 0xd3, 0x37, 0x05, 0x9c, 0xf6, 0x3b, 0x9d, 0xf8, 0x8a, 0xd8, 0x8e, 0x83, 0xa5, 0xef,
	0x08, 0x02, 0x9f, 0x0a, 0xe7, 0x7c, 0x66, 0x9c, 0xc5, 0xff, 0x65, 0x9c, 0xbd, 0x59, 0xbc, 0x14,
	0x68, 0x7f, 0x08, 0x3b, 0x73, 0xab, 0x0f, 0x29, 0xb0, 0xcf, 0x16, 0x82, 0xbf, 0x15, 0xc5, 0x2f,
	0x3e, 0xb3, 0xe2, 0xe1, 0x9a, 0x24, 0x0b, 0xc2, 0x8a, 0x83, 0xbf, 0x2a, 0xf1, 0xd7, 0x9f, 0x59,
	0xf9, 0x9c, 0x2f, 0x15, 0xf2, 0xd2, 0xe2, 0xf9, 0x52, 0x01, 0xa4, 0xf5, 0xf2, 0x43, 0x28, 0xa6,
	0x1b, 0xb1, 0x35, 0x88, 0x9a, 0x7c, 0x69, 0x01, 0x15, 0x60, 0xa9, 0xad, 0xf4, 0x14, 0x29, 0x57,
	0x7e, 0x0f, 0xc5, 0x54, 0xdf, 0x8e, 0x4a, 0xc0, 0x3b, 0x77, 0xe9, 0x3f, 0xc9, 0x5f, 0x0e, 0x01,
	0xac, 0xd4, 0xfb, 0xba, 0xa1, 0x76, 0x23, 0xa6, 0x62, 0xa8, 0x6d, 0x29, 0xc7, 0xc2, 0x75, 0xf5,
	0x56, 0xb7, 0x29, 0xe5, 0xd1, 0x3a, 0xac, 0xb6, 0x55, 0x43, 0x6d, 0x6a, 0x2d, 0x69, 0x91, 0xa1,
	0xbb, 0xea, 0x49, 0xab, 0xd3, 0x94, 0x96, 0xd0, 0x06, 0x14, 0xea, 0x67, 0x9a, 0xda, 0x6d, 0xaa,
	0xba, 0xb4, 0x5c, 0xfe, 0x3d, 0x94, 0xee, 0x74, 0xdc, 0x48, 0x82, 0x54, 0xcf, 0x2d, 0x2d, 0x30,
	0x4b, 0x5d, 0xed, 0x76, 0x15, 0xf3, 0xa2, 0xa9, 0xb5, 0xd4, 0x86, 0x94, 0x9b, 0x61, 0x62, 0x4b,
	0x7e, 0x86, 0x89, 0x59, 0x8b, 0xe5, 0xbf, 0xe4, 0x60, 0x43, 0x6c, 0xb8, 0xd1, 0x03, 0xb8, 0xbf,
	0xe5, 0x96, 0x16, 0x90, 0x0c, 0xdb, 0xfa, 0xab, 0xbe, 0xa2, 0x35, 0x6f, 0xdd, 0x7a, 0x47, 0xd1,
	0xcf, 0xa4, 0x1c, 0xf3, 0x64, 0x88, 0x91, 0x27, 0xcf, 0x42, 0x66, 0x38, 0x42, 0xc8, 0xc5, 0xb2,
	0x0b, 0xf2, 0x7d, 0x9d, 0x38, 0xda, 0x87, 0x7b, 0x7a, 0x71, 0x69, 0x21, 0xeb, 0x9b, 0x15, 0x91,
	0x94, 0xcb, 0xfa, 0x66, 0xbd, 0x8e, 0x94, 0x2f, 0x9f, 0xc3, 0xf6, 0xbc, 0x3e, 0x19, 0x6d, 0x41,
	0xb6, 0x53, 0x96, 0x16, 0x50, 0x11, 0xd6, 0xb4, 0xa6, 0xd2, 0x30, 0xd5, 0x5e, 0xe7, 0xad, 0x94,
	0x43, 0x9b, 0x00, 0x3d, 0xf5, 0xd6, 0x9d, 0x2f, 0x1b, 0x50, 0xba, 0xd3, 0x06, 0xa3, 0x4f, 0x60,
	0xbd, 0xa7, 0x9a, 0x49, 0x2f, 0x2c, 0x2d, 0xa0, 0x5d, 0x98, 0xd3, 0x19, 0x4b, 0xb9, 0x94, 0x5d,
	0xd1, 0x1b, 0xa7, 0x2f, 0xcf, 0xce, 0xdb, 0x1d, 0x29, 0x5f, 0x7e, 0x05, 0xc5, 0xb4, 0x0c, 0x9b,
	0x00, 0x42, 0x0a, 0x0b, 0xec, 0x7b, 0x2a, 0xdd, 0x22, 0xac, 0x75, 0x14, 0xdd, 0x30, 0x4f, 0x55,
	0xad, 0x2b, 0xe5, 0x51, 0x09, 0x8a, 0x3d, 0xd5, 0xac, 0xab, 0xbd, 0xd7, 0x4d, 0x4d, 0x6f, 0xa9,
	0x6c, 0x9d, 0x3b, 0x80, 0xee, 0x76, 0x9e, 0x68, 0x15, 0x16, 0xd5, 0xd3, 0x53, 0x69, 0x01, 0x6d,
	0xc3, 0x9d, 0x26, 0x54, 0xca, 0xa1, 0x3d, 0xd8, 0x6a, 0x2b, 0x86, 0xc2, 0x6a, 0x5e, 0x74, 0xe4,
	0xcb, 0x3e, 0x6c, 0xcd, 0x69, 0x2d, 0xd1, 0x0e, 0x24, 0xcd, 0x65, 0x6a, 0xa1, 0x66, 0xe6, 0xd4,
	0xa4, 0x67, 0x66, 0x71, 0x79, 0xd8, 0xa0, 0xb1, 0xb9, 0xd1, 0xd2, 0x9a, 0x75, 0x23, 0x8a, 0x25,
	0x2d, 0x96, 0x7f, 0xcc, 0x41, 0x49, 0xb9, 0xd3, 0x3b, 0xee, 0xc1, 0x96, 0xd2, 0x37, 0xc4, 0x6c,
	0xcd, 0x28, 0xa5, 0x4f, 0x61, 0x27, 0xeb, 0xe0, 0xbb, 0x21, 0xaa, 0x8e, 0xac, 0x2b, 0xde, 0x10,
	0x79, 0xf4, 0x19, 0x3c, 0xc8, 0xfa, 0x5e, 0xf5, 0x9b, 0xba, 0xc1, 0x3e, 0x74, 0x15, 0xad, 0x2d,
	0x2d, 0xa1, 0x87, 0x70, 0x90, 0x85, 0x34, 0x7f, 0xa8, 0x77, 0x94, 0xae, 0x32, 0x43, 0x15, 0xca,
	0x87, 0x20, 0x65, 0xdb, 0x54, 0xb6, 0xb1, 0x93, 0x46, 0x35, 0xaa, 0xad, 0x13, 0xa5, 0xde, 0x8e,
	0x37, 0x10, 0x3f, 0x85, 0xe0, 0x7c, 0xa9, 0xb0, 0x2e, 0x6d, 0x9c, 0x2f, 0x15, 0x76, 0xa4, 0xdd,
	0xf3, 0x95, 0xc2, 0x8f, 0x79, 0xe9, 0xa7, 0xfc, 0xf9, 0x4a, 0xe1, 0xef, 0xab, 0xd2, 0x3f, 0x56,
	0xcf, 0x57, 0x0a, 0xff, 0x5c, 0x95, 0x7e, 0x66, 0xcf, 0x9f, 0x57, 0xa5, 0x7f, 0xad, 0x9e, 0x8c,
	0xa1, 0x4a, 0xbd, 0x51, 0x74, 0xc0, 0x5a, 0xee, 0xc0, 0xa3, 0x64, 0x50, 0x25, 0xee, 0x34, 0x0c,
	0xa2, 0x57, 0xce, 0x6a, 0xd2, 0xf2, 0x46, 0x3f, 0x91, 0x5d, 0x86, 0xc3, 0x93, 0xf5, 0x0b, 0xf6,
	0x29, 0x3a, 0x39, 0xdf, 0x3d, 0x1a, 0x91, 0x60, 0x1c, 0x5e, 0x56, 0x6d, 0x3a, 0x39, 0x0c, 0xe8,
	0xe4, 0xe6, 0xca, 0x22, 0x9e, 0x75, 0x38, 0xf1, 0xaf, 0xae, 0x7c, 0xec, 0x5d, 0x1f, 0x0a, 0x3f,
	0xb5, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xee, 0x6f, 0x9e, 0x8a, 0x78, 0x13, 0x00, 0x00,
}
