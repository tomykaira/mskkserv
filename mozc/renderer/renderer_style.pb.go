// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/renderer/renderer_style.proto

/*
Package renderer is a generated protocol buffer package.

It is generated from these files:
	mozc/renderer/renderer_style.proto

It has these top-level messages:
	RendererStyle
*/
package renderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RendererStyle struct {
	// Window border size (pixel)
	WindowBorder *int32 `protobuf:"varint,1,opt,name=window_border,json=windowBorder" json:"window_border,omitempty"`
	// Footer height (pixel)
	FooterHeight *int32 `protobuf:"varint,2,opt,name=footer_height,json=footerHeight" json:"footer_height,omitempty"`
	// Row rect padding  (pixel)
	RowRectPadding *int32 `protobuf:"varint,3,opt,name=row_rect_padding,json=rowRectPadding" json:"row_rect_padding,omitempty"`
	// Window border color
	BorderColor *RendererStyle_RGBAColor `protobuf:"bytes,4,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
	// We want to ensure that the candidate window is at least wide
	// enough to render column_minimum_width_string as a candidate.
	ColumnMinimumWidthString *string `protobuf:"bytes,5,opt,name=column_minimum_width_string,json=columnMinimumWidthString" json:"column_minimum_width_string,omitempty"`
	// Candidate view text styles
	TextStyles []*RendererStyle_TextStyle `protobuf:"bytes,6,rep,name=text_styles,json=textStyles" json:"text_styles,omitempty"`
	// Footer style
	FooterBorderColors []*RendererStyle_RGBAColor `protobuf:"bytes,7,rep,name=footer_border_colors,json=footerBorderColors" json:"footer_border_colors,omitempty"`
	// Footer label style
	FooterStyle *RendererStyle_TextStyle `protobuf:"bytes,8,opt,name=footer_style,json=footerStyle" json:"footer_style,omitempty"`
	// Footer sub label style
	// Sub label is used to show the build number (CHANNEL_DEV only)
	FooterSubLabelStyle *RendererStyle_TextStyle `protobuf:"bytes,9,opt,name=footer_sub_label_style,json=footerSubLabelStyle" json:"footer_sub_label_style,omitempty"`
	// Focused background color
	FocusedBackgroundColor *RendererStyle_RGBAColor `protobuf:"bytes,10,opt,name=focused_background_color,json=focusedBackgroundColor" json:"focused_background_color,omitempty"`
	// Focused border color
	FocusedBorderColor *RendererStyle_RGBAColor `protobuf:"bytes,11,opt,name=focused_border_color,json=focusedBorderColor" json:"focused_border_color,omitempty"`
	// Scrollbar background color
	ScrollbarBackgroundColor *RendererStyle_RGBAColor `protobuf:"bytes,12,opt,name=scrollbar_background_color,json=scrollbarBackgroundColor" json:"scrollbar_background_color,omitempty"`
	// Scrollbar indicator color
	ScrollbarIndicatorColor *RendererStyle_RGBAColor `protobuf:"bytes,13,opt,name=scrollbar_indicator_color,json=scrollbarIndicatorColor" json:"scrollbar_indicator_color,omitempty"`
	// Scrollbar width (pixel)
	ScrollbarWidth *int32 `protobuf:"varint,14,opt,name=scrollbar_width,json=scrollbarWidth" json:"scrollbar_width,omitempty"`
	// Footer background is gradation color from top to bottom
	FooterTopColor    *RendererStyle_RGBAColor `protobuf:"bytes,15,opt,name=footer_top_color,json=footerTopColor" json:"footer_top_color,omitempty"`
	FooterBottomColor *RendererStyle_RGBAColor `protobuf:"bytes,16,opt,name=footer_bottom_color,json=footerBottomColor" json:"footer_bottom_color,omitempty"`
	// Logo file name
	LogoFileName *string `protobuf:"bytes,17,opt,name=logo_file_name,json=logoFileName" json:"logo_file_name,omitempty"`
	// Infolist Style
	InfolistStyle    *RendererStyle_InfolistStyle `protobuf:"bytes,18,opt,name=infolist_style,json=infolistStyle" json:"infolist_style,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *RendererStyle) Reset()                    { *m = RendererStyle{} }
func (m *RendererStyle) String() string            { return proto.CompactTextString(m) }
func (*RendererStyle) ProtoMessage()               {}
func (*RendererStyle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RendererStyle) GetWindowBorder() int32 {
	if m != nil && m.WindowBorder != nil {
		return *m.WindowBorder
	}
	return 0
}

func (m *RendererStyle) GetFooterHeight() int32 {
	if m != nil && m.FooterHeight != nil {
		return *m.FooterHeight
	}
	return 0
}

func (m *RendererStyle) GetRowRectPadding() int32 {
	if m != nil && m.RowRectPadding != nil {
		return *m.RowRectPadding
	}
	return 0
}

func (m *RendererStyle) GetBorderColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.BorderColor
	}
	return nil
}

func (m *RendererStyle) GetColumnMinimumWidthString() string {
	if m != nil && m.ColumnMinimumWidthString != nil {
		return *m.ColumnMinimumWidthString
	}
	return ""
}

func (m *RendererStyle) GetTextStyles() []*RendererStyle_TextStyle {
	if m != nil {
		return m.TextStyles
	}
	return nil
}

func (m *RendererStyle) GetFooterBorderColors() []*RendererStyle_RGBAColor {
	if m != nil {
		return m.FooterBorderColors
	}
	return nil
}

func (m *RendererStyle) GetFooterStyle() *RendererStyle_TextStyle {
	if m != nil {
		return m.FooterStyle
	}
	return nil
}

func (m *RendererStyle) GetFooterSubLabelStyle() *RendererStyle_TextStyle {
	if m != nil {
		return m.FooterSubLabelStyle
	}
	return nil
}

func (m *RendererStyle) GetFocusedBackgroundColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.FocusedBackgroundColor
	}
	return nil
}

func (m *RendererStyle) GetFocusedBorderColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.FocusedBorderColor
	}
	return nil
}

func (m *RendererStyle) GetScrollbarBackgroundColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.ScrollbarBackgroundColor
	}
	return nil
}

func (m *RendererStyle) GetScrollbarIndicatorColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.ScrollbarIndicatorColor
	}
	return nil
}

func (m *RendererStyle) GetScrollbarWidth() int32 {
	if m != nil && m.ScrollbarWidth != nil {
		return *m.ScrollbarWidth
	}
	return 0
}

func (m *RendererStyle) GetFooterTopColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.FooterTopColor
	}
	return nil
}

func (m *RendererStyle) GetFooterBottomColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.FooterBottomColor
	}
	return nil
}

func (m *RendererStyle) GetLogoFileName() string {
	if m != nil && m.LogoFileName != nil {
		return *m.LogoFileName
	}
	return ""
}

func (m *RendererStyle) GetInfolistStyle() *RendererStyle_InfolistStyle {
	if m != nil {
		return m.InfolistStyle
	}
	return nil
}

type RendererStyle_RGBAColor struct {
	// RGB color range : [0 - 255]
	R *float64 `protobuf:"fixed64,1,req,name=r,def=0" json:"r,omitempty"`
	G *float64 `protobuf:"fixed64,2,req,name=g,def=0" json:"g,omitempty"`
	B *float64 `protobuf:"fixed64,3,req,name=b,def=0" json:"b,omitempty"`
	// Alpha value range : [0 - 1.0]
	A                *float64 `protobuf:"fixed64,4,opt,name=a,def=1" json:"a,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RendererStyle_RGBAColor) Reset()                    { *m = RendererStyle_RGBAColor{} }
func (m *RendererStyle_RGBAColor) String() string            { return proto.CompactTextString(m) }
func (*RendererStyle_RGBAColor) ProtoMessage()               {}
func (*RendererStyle_RGBAColor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

const Default_RendererStyle_RGBAColor_R float64 = 0
const Default_RendererStyle_RGBAColor_G float64 = 0
const Default_RendererStyle_RGBAColor_B float64 = 0
const Default_RendererStyle_RGBAColor_A float64 = 1

func (m *RendererStyle_RGBAColor) GetR() float64 {
	if m != nil && m.R != nil {
		return *m.R
	}
	return Default_RendererStyle_RGBAColor_R
}

func (m *RendererStyle_RGBAColor) GetG() float64 {
	if m != nil && m.G != nil {
		return *m.G
	}
	return Default_RendererStyle_RGBAColor_G
}

func (m *RendererStyle_RGBAColor) GetB() float64 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return Default_RendererStyle_RGBAColor_B
}

func (m *RendererStyle_RGBAColor) GetA() float64 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return Default_RendererStyle_RGBAColor_A
}

type RendererStyle_TextStyle struct {
	FontSize        *float64                 `protobuf:"fixed64,1,opt,name=font_size,json=fontSize" json:"font_size,omitempty"`
	ForegroundColor *RendererStyle_RGBAColor `protobuf:"bytes,2,opt,name=foreground_color,json=foregroundColor" json:"foreground_color,omitempty"`
	BackgroundColor *RendererStyle_RGBAColor `protobuf:"bytes,3,opt,name=background_color,json=backgroundColor" json:"background_color,omitempty"`
	// Left padding size (pixel)
	LeftPadding *int32 `protobuf:"varint,4,opt,name=left_padding,json=leftPadding,def=0" json:"left_padding,omitempty"`
	// Right padding size (pixel)
	RightPadding     *int32  `protobuf:"varint,5,opt,name=right_padding,json=rightPadding,def=0" json:"right_padding,omitempty"`
	FontName         *string `protobuf:"bytes,6,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RendererStyle_TextStyle) Reset()                    { *m = RendererStyle_TextStyle{} }
func (m *RendererStyle_TextStyle) String() string            { return proto.CompactTextString(m) }
func (*RendererStyle_TextStyle) ProtoMessage()               {}
func (*RendererStyle_TextStyle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

const Default_RendererStyle_TextStyle_LeftPadding int32 = 0
const Default_RendererStyle_TextStyle_RightPadding int32 = 0

func (m *RendererStyle_TextStyle) GetFontSize() float64 {
	if m != nil && m.FontSize != nil {
		return *m.FontSize
	}
	return 0
}

func (m *RendererStyle_TextStyle) GetForegroundColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.ForegroundColor
	}
	return nil
}

func (m *RendererStyle_TextStyle) GetBackgroundColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.BackgroundColor
	}
	return nil
}

func (m *RendererStyle_TextStyle) GetLeftPadding() int32 {
	if m != nil && m.LeftPadding != nil {
		return *m.LeftPadding
	}
	return Default_RendererStyle_TextStyle_LeftPadding
}

func (m *RendererStyle_TextStyle) GetRightPadding() int32 {
	if m != nil && m.RightPadding != nil {
		return *m.RightPadding
	}
	return Default_RendererStyle_TextStyle_RightPadding
}

func (m *RendererStyle_TextStyle) GetFontName() string {
	if m != nil && m.FontName != nil {
		return *m.FontName
	}
	return ""
}

type RendererStyle_InfolistStyle struct {
	CaptionString          *string                  `protobuf:"bytes,1,opt,name=caption_string,json=captionString" json:"caption_string,omitempty"`
	CaptionHeight          *int32                   `protobuf:"varint,2,opt,name=caption_height,json=captionHeight" json:"caption_height,omitempty"`
	CaptionPadding         *int32                   `protobuf:"varint,3,opt,name=caption_padding,json=captionPadding" json:"caption_padding,omitempty"`
	WindowBorder           *int32                   `protobuf:"varint,4,opt,name=window_border,json=windowBorder" json:"window_border,omitempty"`
	RowRectPadding         *int32                   `protobuf:"varint,5,opt,name=row_rect_padding,json=rowRectPadding" json:"row_rect_padding,omitempty"`
	WindowWidth            *int32                   `protobuf:"varint,6,opt,name=window_width,json=windowWidth" json:"window_width,omitempty"`
	CaptionStyle           *RendererStyle_TextStyle `protobuf:"bytes,7,opt,name=caption_style,json=captionStyle" json:"caption_style,omitempty"`
	TitleStyle             *RendererStyle_TextStyle `protobuf:"bytes,8,opt,name=title_style,json=titleStyle" json:"title_style,omitempty"`
	DescriptionStyle       *RendererStyle_TextStyle `protobuf:"bytes,9,opt,name=description_style,json=descriptionStyle" json:"description_style,omitempty"`
	BorderColor            *RendererStyle_RGBAColor `protobuf:"bytes,10,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
	CaptionBackgroundColor *RendererStyle_RGBAColor `protobuf:"bytes,11,opt,name=caption_background_color,json=captionBackgroundColor" json:"caption_background_color,omitempty"`
	FocusedBackgroundColor *RendererStyle_RGBAColor `protobuf:"bytes,12,opt,name=focused_background_color,json=focusedBackgroundColor" json:"focused_background_color,omitempty"`
	FocusedBorderColor     *RendererStyle_RGBAColor `protobuf:"bytes,13,opt,name=focused_border_color,json=focusedBorderColor" json:"focused_border_color,omitempty"`
	XXX_unrecognized       []byte                   `json:"-"`
}

func (m *RendererStyle_InfolistStyle) Reset()                    { *m = RendererStyle_InfolistStyle{} }
func (m *RendererStyle_InfolistStyle) String() string            { return proto.CompactTextString(m) }
func (*RendererStyle_InfolistStyle) ProtoMessage()               {}
func (*RendererStyle_InfolistStyle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *RendererStyle_InfolistStyle) GetCaptionString() string {
	if m != nil && m.CaptionString != nil {
		return *m.CaptionString
	}
	return ""
}

func (m *RendererStyle_InfolistStyle) GetCaptionHeight() int32 {
	if m != nil && m.CaptionHeight != nil {
		return *m.CaptionHeight
	}
	return 0
}

func (m *RendererStyle_InfolistStyle) GetCaptionPadding() int32 {
	if m != nil && m.CaptionPadding != nil {
		return *m.CaptionPadding
	}
	return 0
}

func (m *RendererStyle_InfolistStyle) GetWindowBorder() int32 {
	if m != nil && m.WindowBorder != nil {
		return *m.WindowBorder
	}
	return 0
}

func (m *RendererStyle_InfolistStyle) GetRowRectPadding() int32 {
	if m != nil && m.RowRectPadding != nil {
		return *m.RowRectPadding
	}
	return 0
}

func (m *RendererStyle_InfolistStyle) GetWindowWidth() int32 {
	if m != nil && m.WindowWidth != nil {
		return *m.WindowWidth
	}
	return 0
}

func (m *RendererStyle_InfolistStyle) GetCaptionStyle() *RendererStyle_TextStyle {
	if m != nil {
		return m.CaptionStyle
	}
	return nil
}

func (m *RendererStyle_InfolistStyle) GetTitleStyle() *RendererStyle_TextStyle {
	if m != nil {
		return m.TitleStyle
	}
	return nil
}

func (m *RendererStyle_InfolistStyle) GetDescriptionStyle() *RendererStyle_TextStyle {
	if m != nil {
		return m.DescriptionStyle
	}
	return nil
}

func (m *RendererStyle_InfolistStyle) GetBorderColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.BorderColor
	}
	return nil
}

func (m *RendererStyle_InfolistStyle) GetCaptionBackgroundColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.CaptionBackgroundColor
	}
	return nil
}

func (m *RendererStyle_InfolistStyle) GetFocusedBackgroundColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.FocusedBackgroundColor
	}
	return nil
}

func (m *RendererStyle_InfolistStyle) GetFocusedBorderColor() *RendererStyle_RGBAColor {
	if m != nil {
		return m.FocusedBorderColor
	}
	return nil
}

func init() {
	proto.RegisterType((*RendererStyle)(nil), "mozc.renderer.RendererStyle")
	proto.RegisterType((*RendererStyle_RGBAColor)(nil), "mozc.renderer.RendererStyle.RGBAColor")
	proto.RegisterType((*RendererStyle_TextStyle)(nil), "mozc.renderer.RendererStyle.TextStyle")
	proto.RegisterType((*RendererStyle_InfolistStyle)(nil), "mozc.renderer.RendererStyle.InfolistStyle")
}

func init() { proto.RegisterFile("mozc/renderer/renderer_style.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdb, 0x6e, 0xe3, 0x44,
	0x18, 0x96, 0x93, 0x4d, 0x76, 0xf3, 0xc7, 0x4e, 0x52, 0xef, 0xaa, 0x0c, 0xd9, 0x9b, 0xb0, 0x2c,
	0xdb, 0x08, 0x44, 0x02, 0x5c, 0x56, 0xe2, 0x82, 0x20, 0x51, 0x2a, 0x4e, 0xad, 0x53, 0x01, 0x82,
	0x0b, 0xd7, 0x87, 0x49, 0x32, 0x8a, 0xed, 0x89, 0xc6, 0x13, 0xd2, 0xf6, 0x01, 0x78, 0x27, 0xde,
	0x81, 0x87, 0x42, 0x73, 0xb2, 0x73, 0xa8, 0x4a, 0x5d, 0xc4, 0x9d, 0xfd, 0xf9, 0x9b, 0xef, 0x3f,
	0xcc, 0x7f, 0x30, 0xbc, 0x49, 0xe9, 0x5d, 0x34, 0x66, 0x38, 0x8b, 0x31, 0xc3, 0xac, 0x78, 0xf0,
	0x73, 0x7e, 0x9b, 0xe0, 0xd1, 0x8a, 0x51, 0x4e, 0x5d, 0x47, 0x70, 0x46, 0xe6, 0xd3, 0x9b, 0x3f,
	0x5f, 0x81, 0xe3, 0xe9, 0x97, 0xa9, 0xa0, 0xb9, 0x1f, 0x82, 0xb3, 0x21, 0x59, 0x4c, 0x37, 0x7e,
	0x48, 0x59, 0x8c, 0x19, 0xb2, 0x06, 0xd6, 0xb0, 0xe1, 0xd9, 0x0a, 0x9c, 0x48, 0x4c, 0x90, 0x66,
	0x94, 0x72, 0xcc, 0xfc, 0x05, 0x26, 0xf3, 0x05, 0x47, 0x35, 0x45, 0x52, 0xe0, 0xb7, 0x12, 0x73,
	0x87, 0xd0, 0x63, 0x74, 0xe3, 0x33, 0x1c, 0x71, 0x7f, 0x15, 0xc4, 0x31, 0xc9, 0xe6, 0xa8, 0x2e,
	0x79, 0x1d, 0x46, 0x37, 0x1e, 0x8e, 0xf8, 0x85, 0x42, 0xdd, 0x73, 0xb0, 0x95, 0x31, 0x3f, 0xa2,
	0x09, 0x65, 0xe8, 0xd9, 0xc0, 0x1a, 0xb6, 0xbf, 0x78, 0x37, 0xda, 0xf1, 0x75, 0xb4, 0xe3, 0xe7,
	0xc8, 0x3b, 0x9b, 0x7c, 0xf5, 0xb5, 0x60, 0x7b, 0x6d, 0x75, 0x56, 0xbe, 0xb8, 0x5f, 0xc2, 0xeb,
	0x88, 0x26, 0xeb, 0x34, 0xf3, 0x53, 0x92, 0x91, 0x74, 0x9d, 0xfa, 0x1b, 0x12, 0xf3, 0x85, 0x9f,
	0x73, 0x26, 0xec, 0x37, 0x06, 0xd6, 0xb0, 0xe5, 0x21, 0x45, 0xf9, 0x41, 0x31, 0x7e, 0x11, 0x84,
	0xa9, 0xfc, 0xee, 0x9e, 0x41, 0x9b, 0xe3, 0x1b, 0xae, 0x52, 0x96, 0xa3, 0xe6, 0xa0, 0xfe, 0xaf,
	0x8e, 0x5c, 0xe1, 0x1b, 0x2e, 0x9f, 0x3c, 0xe0, 0xe6, 0x31, 0x77, 0x7f, 0x85, 0x57, 0x3a, 0x43,
	0xdb, 0x91, 0xe5, 0xe8, 0xf9, 0x23, 0x14, 0xcb, 0xd0, 0x5c, 0xa5, 0x31, 0x29, 0x03, 0xcc, 0x45,
	0xb2, 0xb4, 0xb2, 0x74, 0x12, 0xbd, 0x78, 0x44, 0xb2, 0x4a, 0x1f, 0xdb, 0xea, 0xac, 0xba, 0xeb,
	0xdf, 0xe1, 0xd8, 0x48, 0xad, 0x43, 0x3f, 0x09, 0x42, 0x9c, 0x68, 0xd1, 0x56, 0x25, 0xd1, 0x97,
	0x5a, 0x74, 0x1d, 0x7e, 0x2f, 0x34, 0x94, 0xf8, 0x35, 0xa0, 0x19, 0x8d, 0xd6, 0x39, 0x8e, 0xfd,
	0x30, 0x88, 0x96, 0x73, 0x46, 0xd7, 0x59, 0xac, 0x2f, 0x18, 0x2a, 0x5d, 0xf0, 0xb1, 0xd6, 0x99,
	0x14, 0x32, 0xea, 0xae, 0x65, 0x8e, 0xb5, 0x85, 0xed, 0xf2, 0x69, 0x57, 0x52, 0x77, 0x8d, 0xfa,
	0x56, 0x15, 0xc5, 0xd0, 0xcf, 0x23, 0x46, 0x93, 0x24, 0x0c, 0xd8, 0xa1, 0xf7, 0x76, 0x25, 0x7d,
	0x54, 0x28, 0xed, 0xfb, 0x1f, 0xc2, 0xfb, 0xa5, 0x15, 0x92, 0xc5, 0x24, 0x0a, 0x38, 0x35, 0x41,
	0x38, 0x95, 0x8c, 0xbc, 0x57, 0x08, 0x9d, 0x1b, 0x1d, 0x65, 0xe3, 0x04, 0xba, 0xa5, 0x0d, 0xd9,
	0x0a, 0xa8, 0xa3, 0x7a, 0xb0, 0x80, 0x65, 0xfd, 0xbb, 0x17, 0xd0, 0xd3, 0xb5, 0xc0, 0xe9, 0x4a,
	0xfb, 0xd0, 0xad, 0xe4, 0x43, 0x47, 0x9d, 0xbf, 0xa2, 0x2b, 0x65, 0xfa, 0x67, 0x78, 0x59, 0xb4,
	0x00, 0xe7, 0x34, 0xd5, 0xa2, 0xbd, 0x4a, 0xa2, 0x47, 0xa6, 0x03, 0x84, 0x82, 0xd2, 0x7d, 0x0b,
	0x9d, 0x84, 0xce, 0xa9, 0x3f, 0x23, 0x09, 0xf6, 0xb3, 0x20, 0xc5, 0xe8, 0x48, 0x76, 0xb5, 0x2d,
	0xd0, 0x6f, 0x48, 0x82, 0x7f, 0x0c, 0x52, 0xec, 0x5e, 0x42, 0x87, 0x64, 0x33, 0x9a, 0x90, 0x5c,
	0x77, 0x33, 0x72, 0xa5, 0xe1, 0x8f, 0x1f, 0x34, 0x7c, 0xae, 0x8f, 0xa8, 0xba, 0x76, 0xc8, 0xf6,
	0x6b, 0xff, 0x27, 0x68, 0x15, 0x8e, 0xb9, 0x5d, 0xb0, 0xc4, 0x6c, 0xac, 0x0d, 0xad, 0x53, 0xeb,
	0x33, 0xcf, 0x92, 0xc0, 0x1c, 0xd5, 0x0a, 0x60, 0x2e, 0x80, 0x10, 0xd5, 0x0b, 0x20, 0x14, 0x40,
	0x20, 0x67, 0x9b, 0x75, 0x6a, 0x7d, 0xee, 0x59, 0x41, 0xff, 0xaf, 0x1a, 0xb4, 0x8a, 0x2e, 0x72,
	0x5f, 0x43, 0x6b, 0x46, 0x33, 0xee, 0xe7, 0xe4, 0x0e, 0xcb, 0xa9, 0x6b, 0x79, 0x2f, 0x04, 0x30,
	0x25, 0x77, 0x22, 0x9c, 0xde, 0x8c, 0x32, 0xbc, 0x53, 0x87, 0xb5, 0x4a, 0x99, 0xec, 0x96, 0xe7,
	0x55, 0x04, 0x97, 0xd0, 0x3b, 0x28, 0xed, 0x7a, 0x35, 0xc9, 0x70, 0xaf, 0xa2, 0xdf, 0x82, 0x9d,
	0xe0, 0x59, 0x39, 0xee, 0x45, 0xb0, 0x0d, 0x11, 0x7d, 0x5b, 0xc0, 0x66, 0xdc, 0xbf, 0x03, 0x87,
	0x89, 0x0d, 0x51, 0xd0, 0x1a, 0x86, 0x66, 0x4b, 0xdc, 0xf0, 0x4c, 0x42, 0xe4, 0x1d, 0x37, 0xe5,
	0x1d, 0xcb, 0x84, 0x88, 0xfb, 0xed, 0xff, 0xdd, 0x04, 0x67, 0xe7, 0xb6, 0xdc, 0x8f, 0xa0, 0x13,
	0x05, 0x2b, 0x4e, 0x68, 0x66, 0xa6, 0xbd, 0x25, 0xcf, 0x38, 0x1a, 0xd5, 0x23, 0x7e, 0x8b, 0xb6,
	0xb3, 0xbc, 0x0c, 0x4d, 0x6f, 0xaf, 0x13, 0xe8, 0x1a, 0xda, 0xde, 0xf2, 0xd2, 0xb0, 0xf1, 0xf2,
	0x60, 0x61, 0x3e, 0xbb, 0x67, 0x61, 0xde, 0xb7, 0x0b, 0x1b, 0xf7, 0xee, 0xc2, 0x0f, 0x40, 0x9f,
	0xd4, 0xdd, 0xda, 0x94, 0xac, 0xb6, 0xc2, 0x54, 0xab, 0x7e, 0x07, 0x4e, 0x19, 0xa8, 0xa8, 0xec,
	0xe7, 0x95, 0xa6, 0xb5, 0x5d, 0xe4, 0x43, 0x64, 0x4d, 0x6c, 0x3c, 0xc2, 0x13, 0xfc, 0xa4, 0x6d,
	0x02, 0xf2, 0xa8, 0x12, 0x9a, 0xc2, 0x51, 0x8c, 0xf3, 0x88, 0x91, 0x6d, 0xcf, 0xaa, 0xed, 0x91,
	0xde, 0x96, 0x80, 0x12, 0xdd, 0xff, 0x33, 0x80, 0xa7, 0xff, 0x19, 0x5c, 0x03, 0x32, 0x59, 0x3b,
	0x28, 0xfb, 0x6a, 0x1b, 0xe3, 0x58, 0xeb, 0xec, 0xcf, 0xf3, 0x87, 0x36, 0x9e, 0xfd, 0xbf, 0x6e,
	0x3c, 0xe7, 0xbf, 0x6e, 0xbc, 0xc9, 0xa7, 0xbf, 0x7d, 0x32, 0x27, 0x7c, 0xb1, 0x0e, 0x47, 0x11,
	0x4d, 0xc7, 0x9c, 0xa6, 0xb7, 0xcb, 0x80, 0xb0, 0x60, 0x9c, 0xe6, 0xcb, 0x65, 0x8e, 0xd9, 0x1f,
	0xe3, 0x9d, 0x7f, 0xcb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x72, 0x07, 0xb3, 0x12, 0x6b, 0x0a,
	0x00, 0x00,
}
