// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/proxy.proto

/*
Package mozc is a generated protocol buffer package.

It is generated from these files:
	mozc/proxy.proto

It has these top-level messages:
	SendKeyEventRequest
	SendKeyEventResponse
	SendCommandRequest
	SendCommandResponse
*/
package mozc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import commands2 "github.com/tomykaira/mskkserv/mozc/commands"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendKeyEventRequest struct {
	KeyEvent *commands2.KeyEvent `protobuf:"bytes,1,opt,name=key_event,json=keyEvent" json:"key_event,omitempty"`
	Context  *commands2.Context  `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *SendKeyEventRequest) Reset()                    { *m = SendKeyEventRequest{} }
func (m *SendKeyEventRequest) String() string            { return proto.CompactTextString(m) }
func (*SendKeyEventRequest) ProtoMessage()               {}
func (*SendKeyEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendKeyEventRequest) GetKeyEvent() *commands2.KeyEvent {
	if m != nil {
		return m.KeyEvent
	}
	return nil
}

func (m *SendKeyEventRequest) GetContext() *commands2.Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type SendKeyEventResponse struct {
	Output *commands2.Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *SendKeyEventResponse) Reset()                    { *m = SendKeyEventResponse{} }
func (m *SendKeyEventResponse) String() string            { return proto.CompactTextString(m) }
func (*SendKeyEventResponse) ProtoMessage()               {}
func (*SendKeyEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendKeyEventResponse) GetOutput() *commands2.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type SendCommandRequest struct {
	Command *commands2.SessionCommand `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Context *commands2.Context        `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *SendCommandRequest) Reset()                    { *m = SendCommandRequest{} }
func (m *SendCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*SendCommandRequest) ProtoMessage()               {}
func (*SendCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendCommandRequest) GetCommand() *commands2.SessionCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SendCommandRequest) GetContext() *commands2.Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type SendCommandResponse struct {
	Output *commands2.Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *SendCommandResponse) Reset()                    { *m = SendCommandResponse{} }
func (m *SendCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*SendCommandResponse) ProtoMessage()               {}
func (*SendCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SendCommandResponse) GetOutput() *commands2.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*SendKeyEventRequest)(nil), "mozc.SendKeyEventRequest")
	proto.RegisterType((*SendKeyEventResponse)(nil), "mozc.SendKeyEventResponse")
	proto.RegisterType((*SendCommandRequest)(nil), "mozc.SendCommandRequest")
	proto.RegisterType((*SendCommandResponse)(nil), "mozc.SendCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Proxy service

type ProxyClient interface {
	SendKeyEvent(ctx context.Context, in *SendKeyEventRequest, opts ...grpc.CallOption) (*SendKeyEventResponse, error)
	SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error)
}

type proxyClient struct {
	cc *grpc.ClientConn
}

func NewProxyClient(cc *grpc.ClientConn) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) SendKeyEvent(ctx context.Context, in *SendKeyEventRequest, opts ...grpc.CallOption) (*SendKeyEventResponse, error) {
	out := new(SendKeyEventResponse)
	err := grpc.Invoke(ctx, "/mozc.Proxy/SendKeyEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error) {
	out := new(SendCommandResponse)
	err := grpc.Invoke(ctx, "/mozc.Proxy/SendCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Proxy service

type ProxyServer interface {
	SendKeyEvent(context.Context, *SendKeyEventRequest) (*SendKeyEventResponse, error)
	SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error)
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_SendKeyEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKeyEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SendKeyEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mozc.Proxy/SendKeyEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SendKeyEvent(ctx, req.(*SendKeyEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mozc.Proxy/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).SendCommand(ctx, req.(*SendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mozc.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendKeyEvent",
			Handler:    _Proxy_SendKeyEvent_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _Proxy_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mozc/proxy.proto",
}

func init() { proto.RegisterFile("mozc/proxy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x4f, 0xb3, 0x40,
	0x10, 0xfd, 0xf8, 0xa2, 0x55, 0xa7, 0x1e, 0xea, 0xe8, 0x81, 0x12, 0x0f, 0x86, 0x78, 0x68, 0x62,
	0x02, 0x09, 0xfe, 0x00, 0x8d, 0xd5, 0x78, 0xf0, 0xa0, 0xa1, 0x37, 0x2f, 0x86, 0xd2, 0x89, 0x12,
	0xc2, 0x0e, 0xb2, 0x4b, 0x53, 0xfc, 0x21, 0xfe, 0x5e, 0xb3, 0xc0, 0x42, 0x9b, 0x70, 0xe9, 0x6d,
	0xf3, 0xde, 0x9b, 0xf7, 0x5e, 0x66, 0x16, 0x26, 0x19, 0xff, 0xc4, 0x7e, 0x5e, 0xf0, 0xa6, 0xf2,
	0xf2, 0x82, 0x15, 0xe3, 0x81, 0x46, 0x9c, 0xcb, 0x1a, 0x8f, 0x39, 0xcb, 0x22, 0xb1, 0x92, 0xdd,
	0xa3, 0xd1, 0xb8, 0x12, 0xce, 0x17, 0x24, 0x56, 0x2f, 0x54, 0x3d, 0xad, 0x49, 0xa8, 0x90, 0xbe,
	0x4b, 0x92, 0x0a, 0x7d, 0x38, 0x49, 0xa9, 0xfa, 0x20, 0x8d, 0xd9, 0xd6, 0x95, 0x35, 0x1b, 0x07,
	0xe8, 0x75, 0xa3, 0x9d, 0xfa, 0x38, 0x6d, 0x5f, 0x78, 0x03, 0x47, 0x31, 0x0b, 0x45, 0x1b, 0x65,
	0xff, 0xaf, 0xe5, 0x67, 0xbd, 0x7c, 0xde, 0x10, 0xa1, 0x51, 0xb8, 0xf7, 0x70, 0xb1, 0x1b, 0x2a,
	0x73, 0x16, 0x92, 0x70, 0x06, 0x23, 0x2e, 0x55, 0x5e, 0x9a, 0xc8, 0x49, 0xef, 0xf1, 0x5a, 0xe3,
	0x61, 0xcb, 0xbb, 0x25, 0xa0, 0x76, 0x98, 0x37, 0xb4, 0x69, 0x1d, 0xe8, 0x12, 0x35, 0xd2, 0x1a,
	0xd8, 0xbd, 0xc1, 0x82, 0xa4, 0x4c, 0x58, 0x98, 0x09, 0x23, 0xdc, 0xaf, 0xf8, 0x5d, 0xb3, 0xad,
	0x2e, 0x76, 0xdf, 0xde, 0xc1, 0xaf, 0x05, 0x87, 0x6f, 0xfa, 0x44, 0xf8, 0x0c, 0xa7, 0xdb, 0x3b,
	0xc0, 0xa9, 0xa7, 0xef, 0xe4, 0x0d, 0x1c, 0xc3, 0x71, 0x86, 0xa8, 0x26, 0xda, 0xfd, 0x87, 0x8f,
	0x30, 0xde, 0xea, 0x84, 0x76, 0x2f, 0xde, 0xdd, 0x8e, 0x33, 0x1d, 0x60, 0x8c, 0xcb, 0xc3, 0xf5,
	0xbb, 0xfb, 0x99, 0xa8, 0xaf, 0x72, 0xa9, 0xab, 0xfb, 0x8a, 0xb3, 0x2a, 0x8d, 0x92, 0x22, 0xf2,
	0x33, 0x99, 0xa6, 0x92, 0x8a, 0xb5, 0xaf, 0x67, 0x97, 0xa3, 0xfa, 0xd3, 0xdc, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x22, 0x78, 0x51, 0xe0, 0x6c, 0x02, 0x00, 0x00,
}
