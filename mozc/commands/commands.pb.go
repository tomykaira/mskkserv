// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/commands/commands.proto

package commands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mozc_config "github.com/tomykaira/mskkserv/mozc/config"
import mozc_user_dictionary "github.com/tomykaira/mskkserv/mozc/user_dictionary"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This enum is used by SessionCommand::input_mode with
// CHANGE_INPUT_MODE and Output::mode.
type CompositionMode int32

const (
	CompositionMode_DIRECT              CompositionMode = 0
	CompositionMode_HIRAGANA            CompositionMode = 1
	CompositionMode_FULL_KATAKANA       CompositionMode = 2
	CompositionMode_HALF_ASCII          CompositionMode = 3
	CompositionMode_FULL_ASCII          CompositionMode = 4
	CompositionMode_HALF_KATAKANA       CompositionMode = 5
	CompositionMode_NUM_OF_COMPOSITIONS CompositionMode = 6
)

var CompositionMode_name = map[int32]string{
	0: "DIRECT",
	1: "HIRAGANA",
	2: "FULL_KATAKANA",
	3: "HALF_ASCII",
	4: "FULL_ASCII",
	5: "HALF_KATAKANA",
	6: "NUM_OF_COMPOSITIONS",
}
var CompositionMode_value = map[string]int32{
	"DIRECT":              0,
	"HIRAGANA":            1,
	"FULL_KATAKANA":       2,
	"HALF_ASCII":          3,
	"FULL_ASCII":          4,
	"HALF_KATAKANA":       5,
	"NUM_OF_COMPOSITIONS": 6,
}

func (x CompositionMode) Enum() *CompositionMode {
	p := new(CompositionMode)
	*p = x
	return p
}
func (x CompositionMode) String() string {
	return proto.EnumName(CompositionMode_name, int32(x))
}
func (x *CompositionMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompositionMode_value, data, "CompositionMode")
	if err != nil {
		return err
	}
	*x = CompositionMode(value)
	return nil
}
func (CompositionMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type KeyEvent_SpecialKey int32

const (
	KeyEvent_NO_SPECIALKEY KeyEvent_SpecialKey = 0
	KeyEvent_DIGIT         KeyEvent_SpecialKey = 1
	// On Windows, SpecialKey::On and SpecialKey::OFF are obsolete. Use
	// TURN_ON_IME session command should be used instead. See b/10216365.
	// On other platforms, especially on Mac, please note that
	// client/client.cc still relies on SpecialKey::On for session playback.
	// We need to fix b/10250883 first.
	// TODO(team): Unsupport SpecialKey::On and SpecialKey::OFF.
	KeyEvent_ON        KeyEvent_SpecialKey = 2
	KeyEvent_OFF       KeyEvent_SpecialKey = 3
	KeyEvent_SPACE     KeyEvent_SpecialKey = 4
	KeyEvent_ENTER     KeyEvent_SpecialKey = 5
	KeyEvent_LEFT      KeyEvent_SpecialKey = 6
	KeyEvent_RIGHT     KeyEvent_SpecialKey = 7
	KeyEvent_UP        KeyEvent_SpecialKey = 8
	KeyEvent_DOWN      KeyEvent_SpecialKey = 9
	KeyEvent_ESCAPE    KeyEvent_SpecialKey = 10
	KeyEvent_DEL       KeyEvent_SpecialKey = 11
	KeyEvent_BACKSPACE KeyEvent_SpecialKey = 12
	KeyEvent_HENKAN    KeyEvent_SpecialKey = 13
	KeyEvent_MUHENKAN  KeyEvent_SpecialKey = 14
	KeyEvent_KANA      KeyEvent_SpecialKey = 15
	// TODO(toshiyuki): It is better to rename this to HIRAGANA
	// In Windows, we have Katakana and it may confusing.
	KeyEvent_HOME       KeyEvent_SpecialKey = 16
	KeyEvent_END        KeyEvent_SpecialKey = 17
	KeyEvent_TAB        KeyEvent_SpecialKey = 18
	KeyEvent_F1         KeyEvent_SpecialKey = 19
	KeyEvent_F2         KeyEvent_SpecialKey = 20
	KeyEvent_F3         KeyEvent_SpecialKey = 21
	KeyEvent_F4         KeyEvent_SpecialKey = 22
	KeyEvent_F5         KeyEvent_SpecialKey = 23
	KeyEvent_F6         KeyEvent_SpecialKey = 24
	KeyEvent_F7         KeyEvent_SpecialKey = 25
	KeyEvent_F8         KeyEvent_SpecialKey = 26
	KeyEvent_F9         KeyEvent_SpecialKey = 27
	KeyEvent_F10        KeyEvent_SpecialKey = 28
	KeyEvent_F11        KeyEvent_SpecialKey = 29
	KeyEvent_F12        KeyEvent_SpecialKey = 30
	KeyEvent_PAGE_UP    KeyEvent_SpecialKey = 31
	KeyEvent_PAGE_DOWN  KeyEvent_SpecialKey = 32
	KeyEvent_INSERT     KeyEvent_SpecialKey = 33
	KeyEvent_F13        KeyEvent_SpecialKey = 34
	KeyEvent_F14        KeyEvent_SpecialKey = 35
	KeyEvent_F15        KeyEvent_SpecialKey = 36
	KeyEvent_F16        KeyEvent_SpecialKey = 37
	KeyEvent_F17        KeyEvent_SpecialKey = 38
	KeyEvent_F18        KeyEvent_SpecialKey = 39
	KeyEvent_F19        KeyEvent_SpecialKey = 40
	KeyEvent_F20        KeyEvent_SpecialKey = 41
	KeyEvent_F21        KeyEvent_SpecialKey = 42
	KeyEvent_F22        KeyEvent_SpecialKey = 43
	KeyEvent_F23        KeyEvent_SpecialKey = 44
	KeyEvent_F24        KeyEvent_SpecialKey = 45
	KeyEvent_EISU       KeyEvent_SpecialKey = 46
	KeyEvent_NUMPAD0    KeyEvent_SpecialKey = 47
	KeyEvent_NUMPAD1    KeyEvent_SpecialKey = 48
	KeyEvent_NUMPAD2    KeyEvent_SpecialKey = 49
	KeyEvent_NUMPAD3    KeyEvent_SpecialKey = 50
	KeyEvent_NUMPAD4    KeyEvent_SpecialKey = 51
	KeyEvent_NUMPAD5    KeyEvent_SpecialKey = 52
	KeyEvent_NUMPAD6    KeyEvent_SpecialKey = 53
	KeyEvent_NUMPAD7    KeyEvent_SpecialKey = 54
	KeyEvent_NUMPAD8    KeyEvent_SpecialKey = 55
	KeyEvent_NUMPAD9    KeyEvent_SpecialKey = 56
	KeyEvent_MULTIPLY   KeyEvent_SpecialKey = 57
	KeyEvent_ADD        KeyEvent_SpecialKey = 58
	KeyEvent_SEPARATOR  KeyEvent_SpecialKey = 59
	KeyEvent_SUBTRACT   KeyEvent_SpecialKey = 60
	KeyEvent_DECIMAL    KeyEvent_SpecialKey = 61
	KeyEvent_DIVIDE     KeyEvent_SpecialKey = 62
	KeyEvent_EQUALS     KeyEvent_SpecialKey = 63
	KeyEvent_TEXT_INPUT KeyEvent_SpecialKey = 64
	KeyEvent_HANKAKU    KeyEvent_SpecialKey = 65
	KeyEvent_KANJI      KeyEvent_SpecialKey = 66
	KeyEvent_KATAKANA   KeyEvent_SpecialKey = 67
	KeyEvent_CAPS_LOCK  KeyEvent_SpecialKey = 68
	// Unsupported keys (e.g. PrtSc, Pause) fall back to UNDEFINED_KEY.
	KeyEvent_UNDEFINED_KEY   KeyEvent_SpecialKey = 69
	KeyEvent_COMMA           KeyEvent_SpecialKey = 70
	KeyEvent_CLEAR           KeyEvent_SpecialKey = 71
	KeyEvent_VIRTUAL_LEFT    KeyEvent_SpecialKey = 72
	KeyEvent_VIRTUAL_RIGHT   KeyEvent_SpecialKey = 73
	KeyEvent_VIRTUAL_ENTER   KeyEvent_SpecialKey = 74
	KeyEvent_VIRTUAL_UP      KeyEvent_SpecialKey = 75
	KeyEvent_VIRTUAL_DOWN    KeyEvent_SpecialKey = 76
	KeyEvent_NUM_SPECIALKEYS KeyEvent_SpecialKey = 77
)

var KeyEvent_SpecialKey_name = map[int32]string{
	0:  "NO_SPECIALKEY",
	1:  "DIGIT",
	2:  "ON",
	3:  "OFF",
	4:  "SPACE",
	5:  "ENTER",
	6:  "LEFT",
	7:  "RIGHT",
	8:  "UP",
	9:  "DOWN",
	10: "ESCAPE",
	11: "DEL",
	12: "BACKSPACE",
	13: "HENKAN",
	14: "MUHENKAN",
	15: "KANA",
	16: "HOME",
	17: "END",
	18: "TAB",
	19: "F1",
	20: "F2",
	21: "F3",
	22: "F4",
	23: "F5",
	24: "F6",
	25: "F7",
	26: "F8",
	27: "F9",
	28: "F10",
	29: "F11",
	30: "F12",
	31: "PAGE_UP",
	32: "PAGE_DOWN",
	33: "INSERT",
	34: "F13",
	35: "F14",
	36: "F15",
	37: "F16",
	38: "F17",
	39: "F18",
	40: "F19",
	41: "F20",
	42: "F21",
	43: "F22",
	44: "F23",
	45: "F24",
	46: "EISU",
	47: "NUMPAD0",
	48: "NUMPAD1",
	49: "NUMPAD2",
	50: "NUMPAD3",
	51: "NUMPAD4",
	52: "NUMPAD5",
	53: "NUMPAD6",
	54: "NUMPAD7",
	55: "NUMPAD8",
	56: "NUMPAD9",
	57: "MULTIPLY",
	58: "ADD",
	59: "SEPARATOR",
	60: "SUBTRACT",
	61: "DECIMAL",
	62: "DIVIDE",
	63: "EQUALS",
	64: "TEXT_INPUT",
	65: "HANKAKU",
	66: "KANJI",
	67: "KATAKANA",
	68: "CAPS_LOCK",
	69: "UNDEFINED_KEY",
	70: "COMMA",
	71: "CLEAR",
	72: "VIRTUAL_LEFT",
	73: "VIRTUAL_RIGHT",
	74: "VIRTUAL_ENTER",
	75: "VIRTUAL_UP",
	76: "VIRTUAL_DOWN",
	77: "NUM_SPECIALKEYS",
}
var KeyEvent_SpecialKey_value = map[string]int32{
	"NO_SPECIALKEY":   0,
	"DIGIT":           1,
	"ON":              2,
	"OFF":             3,
	"SPACE":           4,
	"ENTER":           5,
	"LEFT":            6,
	"RIGHT":           7,
	"UP":              8,
	"DOWN":            9,
	"ESCAPE":          10,
	"DEL":             11,
	"BACKSPACE":       12,
	"HENKAN":          13,
	"MUHENKAN":        14,
	"KANA":            15,
	"HOME":            16,
	"END":             17,
	"TAB":             18,
	"F1":              19,
	"F2":              20,
	"F3":              21,
	"F4":              22,
	"F5":              23,
	"F6":              24,
	"F7":              25,
	"F8":              26,
	"F9":              27,
	"F10":             28,
	"F11":             29,
	"F12":             30,
	"PAGE_UP":         31,
	"PAGE_DOWN":       32,
	"INSERT":          33,
	"F13":             34,
	"F14":             35,
	"F15":             36,
	"F16":             37,
	"F17":             38,
	"F18":             39,
	"F19":             40,
	"F20":             41,
	"F21":             42,
	"F22":             43,
	"F23":             44,
	"F24":             45,
	"EISU":            46,
	"NUMPAD0":         47,
	"NUMPAD1":         48,
	"NUMPAD2":         49,
	"NUMPAD3":         50,
	"NUMPAD4":         51,
	"NUMPAD5":         52,
	"NUMPAD6":         53,
	"NUMPAD7":         54,
	"NUMPAD8":         55,
	"NUMPAD9":         56,
	"MULTIPLY":        57,
	"ADD":             58,
	"SEPARATOR":       59,
	"SUBTRACT":        60,
	"DECIMAL":         61,
	"DIVIDE":          62,
	"EQUALS":          63,
	"TEXT_INPUT":      64,
	"HANKAKU":         65,
	"KANJI":           66,
	"KATAKANA":        67,
	"CAPS_LOCK":       68,
	"UNDEFINED_KEY":   69,
	"COMMA":           70,
	"CLEAR":           71,
	"VIRTUAL_LEFT":    72,
	"VIRTUAL_RIGHT":   73,
	"VIRTUAL_ENTER":   74,
	"VIRTUAL_UP":      75,
	"VIRTUAL_DOWN":    76,
	"NUM_SPECIALKEYS": 77,
}

func (x KeyEvent_SpecialKey) Enum() *KeyEvent_SpecialKey {
	p := new(KeyEvent_SpecialKey)
	*p = x
	return p
}
func (x KeyEvent_SpecialKey) String() string {
	return proto.EnumName(KeyEvent_SpecialKey_name, int32(x))
}
func (x *KeyEvent_SpecialKey) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KeyEvent_SpecialKey_value, data, "KeyEvent_SpecialKey")
	if err != nil {
		return err
	}
	*x = KeyEvent_SpecialKey(value)
	return nil
}
func (KeyEvent_SpecialKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type KeyEvent_ModifierKey int32

const (
	KeyEvent_CTRL        KeyEvent_ModifierKey = 1
	KeyEvent_ALT         KeyEvent_ModifierKey = 2
	KeyEvent_SHIFT       KeyEvent_ModifierKey = 4
	KeyEvent_KEY_DOWN    KeyEvent_ModifierKey = 8
	KeyEvent_KEY_UP      KeyEvent_ModifierKey = 16
	KeyEvent_LEFT_CTRL   KeyEvent_ModifierKey = 32
	KeyEvent_LEFT_ALT    KeyEvent_ModifierKey = 64
	KeyEvent_LEFT_SHIFT  KeyEvent_ModifierKey = 128
	KeyEvent_RIGHT_CTRL  KeyEvent_ModifierKey = 256
	KeyEvent_RIGHT_ALT   KeyEvent_ModifierKey = 512
	KeyEvent_RIGHT_SHIFT KeyEvent_ModifierKey = 1024
	KeyEvent_CAPS        KeyEvent_ModifierKey = 2048
)

var KeyEvent_ModifierKey_name = map[int32]string{
	1:    "CTRL",
	2:    "ALT",
	4:    "SHIFT",
	8:    "KEY_DOWN",
	16:   "KEY_UP",
	32:   "LEFT_CTRL",
	64:   "LEFT_ALT",
	128:  "LEFT_SHIFT",
	256:  "RIGHT_CTRL",
	512:  "RIGHT_ALT",
	1024: "RIGHT_SHIFT",
	2048: "CAPS",
}
var KeyEvent_ModifierKey_value = map[string]int32{
	"CTRL":        1,
	"ALT":         2,
	"SHIFT":       4,
	"KEY_DOWN":    8,
	"KEY_UP":      16,
	"LEFT_CTRL":   32,
	"LEFT_ALT":    64,
	"LEFT_SHIFT":  128,
	"RIGHT_CTRL":  256,
	"RIGHT_ALT":   512,
	"RIGHT_SHIFT": 1024,
	"CAPS":        2048,
}

func (x KeyEvent_ModifierKey) Enum() *KeyEvent_ModifierKey {
	p := new(KeyEvent_ModifierKey)
	*p = x
	return p
}
func (x KeyEvent_ModifierKey) String() string {
	return proto.EnumName(KeyEvent_ModifierKey_name, int32(x))
}
func (x *KeyEvent_ModifierKey) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KeyEvent_ModifierKey_value, data, "KeyEvent_ModifierKey")
	if err != nil {
		return err
	}
	*x = KeyEvent_ModifierKey(value)
	return nil
}
func (KeyEvent_ModifierKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

type KeyEvent_InputStyle int32

const (
	// Follow the current input mode (default).
	KeyEvent_FOLLOW_MODE KeyEvent_InputStyle = 0
	// Do not transliterate key_string and use it as-is.
	KeyEvent_AS_IS KeyEvent_InputStyle = 1
	// Immediately output key_string on the precomposition mode.
	// Same with AS_IS on the preedit mode.
	KeyEvent_DIRECT_INPUT KeyEvent_InputStyle = 2
)

var KeyEvent_InputStyle_name = map[int32]string{
	0: "FOLLOW_MODE",
	1: "AS_IS",
	2: "DIRECT_INPUT",
}
var KeyEvent_InputStyle_value = map[string]int32{
	"FOLLOW_MODE":  0,
	"AS_IS":        1,
	"DIRECT_INPUT": 2,
}

func (x KeyEvent_InputStyle) Enum() *KeyEvent_InputStyle {
	p := new(KeyEvent_InputStyle)
	*p = x
	return p
}
func (x KeyEvent_InputStyle) String() string {
	return proto.EnumName(KeyEvent_InputStyle_name, int32(x))
}
func (x *KeyEvent_InputStyle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KeyEvent_InputStyle_value, data, "KeyEvent_InputStyle")
	if err != nil {
		return err
	}
	*x = KeyEvent_InputStyle(value)
	return nil
}
func (KeyEvent_InputStyle) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

type GenericStorageEntry_StorageType int32

const (
	GenericStorageEntry_SYMBOL_HISTORY   GenericStorageEntry_StorageType = 0
	GenericStorageEntry_EMOTICON_HISTORY GenericStorageEntry_StorageType = 1
	GenericStorageEntry_EMOJI_HISTORY    GenericStorageEntry_StorageType = 2
)

var GenericStorageEntry_StorageType_name = map[int32]string{
	0: "SYMBOL_HISTORY",
	1: "EMOTICON_HISTORY",
	2: "EMOJI_HISTORY",
}
var GenericStorageEntry_StorageType_value = map[string]int32{
	"SYMBOL_HISTORY":   0,
	"EMOTICON_HISTORY": 1,
	"EMOJI_HISTORY":    2,
}

func (x GenericStorageEntry_StorageType) Enum() *GenericStorageEntry_StorageType {
	p := new(GenericStorageEntry_StorageType)
	*p = x
	return p
}
func (x GenericStorageEntry_StorageType) String() string {
	return proto.EnumName(GenericStorageEntry_StorageType_name, int32(x))
}
func (x *GenericStorageEntry_StorageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GenericStorageEntry_StorageType_value, data, "GenericStorageEntry_StorageType")
	if err != nil {
		return err
	}
	*x = GenericStorageEntry_StorageType(value)
	return nil
}
func (GenericStorageEntry_StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

type SessionCommand_CommandType int32

const (
	// Revert the session, this is usually similar to type ESC several times.
	SessionCommand_REVERT SessionCommand_CommandType = 1
	// Commit the session, this is usually similar to type Enter.
	// SUBMIT session command is accepted in any status.
	// Pre-condition:
	// - Any states of IME are acceptable.
	// Post-condition:
	// - Preedit text becomes empty.
	SessionCommand_SUBMIT SessionCommand_CommandType = 2
	// Select the specified candidate word by id.  This command is
	// usually used with mouse clicking.
	SessionCommand_SELECT_CANDIDATE SessionCommand_CommandType = 3
	// Set the focus to the candidate by id.  This is usually used
	// with mouse dragging.  The difference from SELECT_CANDIDATE is
	// that HIGHLIGHT_CANDIDATE does not close the candidate window
	// while SELECT_CANDIDATE closes the candidate window.
	SessionCommand_HIGHLIGHT_CANDIDATE SessionCommand_CommandType = 4
	// Specify the input mode.  This command should be used with
	// composition_mode.
	SessionCommand_SWITCH_INPUT_MODE SessionCommand_CommandType = 5
	// Return the current status such as composition mode, preedit method, etc.
	SessionCommand_GET_STATUS SessionCommand_CommandType = 6
	// This command is typically used for mobile IME's partial conversion,
	// but currently it is on the way. This description is for current spec.
	//
	// This command requires that candidates exist.
	//
	// If there is a focused candidate (Conversion or Prediction state),
	// the candidate matched with the given id in the first segment is
	// submitted, even though the selected segment is not the first segment
	// (Important thing is whether focused candidate exists
	// or not. Focused index itself is ignored).
	// This behavior should be updated because current cursor position and
	// position of focused segment affects nothing.
	// We should fix this non-intuitive behavior. Intuitive behavior might be
	// submitting segments from first one to focused one (inclusive).
	//
	// If no focused candidate (Suggestion, including ZeroQuery suggestion),
	// first (and only) segment's candiadte of which id is equal to id field of
	// Input message is submitted.
	// This behavior should be fixed because current cursor position affects
	// nothing. In future, the characters after the cursor should be kept
	// as preedit.
	//
	// This command's pre- and post- conditions are differenct from
	// SUBMIT command's. Following conditions will be kept after updating
	// the behavior.
	// Pre-condition:
	// - There should be candidate.
	// Post-condition:
	// - No guarantee on preedit text.
	// TODO(yamaguchi): Update corresponding implementation please.
	SessionCommand_SUBMIT_CANDIDATE SessionCommand_CommandType = 7
	// Perform reverse conversion.
	SessionCommand_CONVERT_REVERSE SessionCommand_CommandType = 8
	// Perform Undo.
	SessionCommand_UNDO SessionCommand_CommandType = 9
	// Reset convert history and revert current composition.
	// This is usually used by moving cursor with mouse clicking.
	SessionCommand_RESET_CONTEXT SessionCommand_CommandType = 10
	// Change cursor position in preedit.
	SessionCommand_MOVE_CURSOR SessionCommand_CommandType = 11
	// Specify the input field type.
	SessionCommand_SWITCH_INPUT_FIELD_TYPE SessionCommand_CommandType = 12
	// Client side event information for collecting usage statistics
	SessionCommand_USAGE_STATS_EVENT SessionCommand_CommandType = 13
	// This command is used in only Android.
	// Works UNDO or rewind HIRAGANA characters based on the state.
	SessionCommand_UNDO_OR_REWIND SessionCommand_CommandType = 14
	// Expand suggestion candidates.
	// Usual suggestion algorithm is not "rich" but "fast" because suggestion
	// is executed every key event (On the other hand predicition is "rich"
	// because prediction is executed only when a user types TAB key).
	// This command expands suggestion candidate but IME state is
	// kept as is (Note : PredictAndConvert key command does almost the same
	// thing but it changes IME state to prediction).
	SessionCommand_EXPAND_SUGGESTION SessionCommand_CommandType = 15
	// Obsolete command. Used only in old IBus client.
	SessionCommand_OBSOLETE_SEND_CARET_LOCATION SessionCommand_CommandType = 16
	// Obsolete command. Don't simply remove this command for NUM_OF_COMMANDS.
	// TODO(team): Replace this command by useful one.
	SessionCommand_OBSOLETE_SEND_LANGUAGE_BAR_COMMAND SessionCommand_CommandType = 17
	// Obsolete command. Don't simply remove this command for NUM_OF_COMMANDS.
	// TODO(team): Replace this command by useful one.
	SessionCommand_OBSOLETE_GET_ASYNC_RESULT SessionCommand_CommandType = 18
	// Commit the raw text of the composed string.
	SessionCommand_COMMIT_RAW_TEXT SessionCommand_CommandType = 19
	// Call ConvertPrevPage session command to show the previous page of
	// candidates.
	SessionCommand_CONVERT_PREV_PAGE SessionCommand_CommandType = 20
	// Call ConvertNextPage session command to show the next page of
	// candidates.
	SessionCommand_CONVERT_NEXT_PAGE SessionCommand_CommandType = 21
	// Make sure IME is turned on. Optionally you can also provide new input
	// mode in |composition_mode| (but you must not set DIRECT to it).
	// |composition_mode| is honored even when IME is already turned on.
	SessionCommand_TURN_ON_IME SessionCommand_CommandType = 22
	// Make sure IME is turned off. Optionally you can also provide new input
	// mode in |composition_mode| (but you must not set DIRECT to it). If IME
	// |composition_mode| is honored even when IME is already turned off.
	SessionCommand_TURN_OFF_IME SessionCommand_CommandType = 23
	// Number of commands.
	// When new command is added, the command should use below number
	// and NUM_OF_COMMANDS should be incremented.
	SessionCommand_NUM_OF_COMMANDS SessionCommand_CommandType = 24
)

var SessionCommand_CommandType_name = map[int32]string{
	1:  "REVERT",
	2:  "SUBMIT",
	3:  "SELECT_CANDIDATE",
	4:  "HIGHLIGHT_CANDIDATE",
	5:  "SWITCH_INPUT_MODE",
	6:  "GET_STATUS",
	7:  "SUBMIT_CANDIDATE",
	8:  "CONVERT_REVERSE",
	9:  "UNDO",
	10: "RESET_CONTEXT",
	11: "MOVE_CURSOR",
	12: "SWITCH_INPUT_FIELD_TYPE",
	13: "USAGE_STATS_EVENT",
	14: "UNDO_OR_REWIND",
	15: "EXPAND_SUGGESTION",
	16: "OBSOLETE_SEND_CARET_LOCATION",
	17: "OBSOLETE_SEND_LANGUAGE_BAR_COMMAND",
	18: "OBSOLETE_GET_ASYNC_RESULT",
	19: "COMMIT_RAW_TEXT",
	20: "CONVERT_PREV_PAGE",
	21: "CONVERT_NEXT_PAGE",
	22: "TURN_ON_IME",
	23: "TURN_OFF_IME",
	24: "NUM_OF_COMMANDS",
}
var SessionCommand_CommandType_value = map[string]int32{
	"REVERT":                             1,
	"SUBMIT":                             2,
	"SELECT_CANDIDATE":                   3,
	"HIGHLIGHT_CANDIDATE":                4,
	"SWITCH_INPUT_MODE":                  5,
	"GET_STATUS":                         6,
	"SUBMIT_CANDIDATE":                   7,
	"CONVERT_REVERSE":                    8,
	"UNDO":                               9,
	"RESET_CONTEXT":                      10,
	"MOVE_CURSOR":                        11,
	"SWITCH_INPUT_FIELD_TYPE":            12,
	"USAGE_STATS_EVENT":                  13,
	"UNDO_OR_REWIND":                     14,
	"EXPAND_SUGGESTION":                  15,
	"OBSOLETE_SEND_CARET_LOCATION":       16,
	"OBSOLETE_SEND_LANGUAGE_BAR_COMMAND": 17,
	"OBSOLETE_GET_ASYNC_RESULT":          18,
	"COMMIT_RAW_TEXT":                    19,
	"CONVERT_PREV_PAGE":                  20,
	"CONVERT_NEXT_PAGE":                  21,
	"TURN_ON_IME":                        22,
	"TURN_OFF_IME":                       23,
	"NUM_OF_COMMANDS":                    24,
}

func (x SessionCommand_CommandType) Enum() *SessionCommand_CommandType {
	p := new(SessionCommand_CommandType)
	*p = x
	return p
}
func (x SessionCommand_CommandType) String() string {
	return proto.EnumName(SessionCommand_CommandType_name, int32(x))
}
func (x *SessionCommand_CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionCommand_CommandType_value, data, "SessionCommand_CommandType")
	if err != nil {
		return err
	}
	*x = SessionCommand_CommandType(value)
	return nil
}
func (SessionCommand_CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0}
}

// Client side event for collecting usage statistics
type SessionCommand_UsageStatsEvent int32

const (
	SessionCommand_INFOLIST_WINDOW_SHOW                                  SessionCommand_UsageStatsEvent = 1
	SessionCommand_INFOLIST_WINDOW_HIDE                                  SessionCommand_UsageStatsEvent = 2
	SessionCommand_HANDWRITING_OPEN_EVENT                                SessionCommand_UsageStatsEvent = 3
	SessionCommand_HANDWRITING_COMMIT_EVENT                              SessionCommand_UsageStatsEvent = 4
	SessionCommand_CHARACTER_PALETTE_OPEN_EVENT                          SessionCommand_UsageStatsEvent = 5
	SessionCommand_CHARACTER_PALETTE_COMMIT_EVENT                        SessionCommand_UsageStatsEvent = 6
	SessionCommand_SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE                    SessionCommand_UsageStatsEvent = 7
	SessionCommand_SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT                     SessionCommand_UsageStatsEvent = 8
	SessionCommand_SUBMITTED_CANDIDATE_ROW_0                             SessionCommand_UsageStatsEvent = 9
	SessionCommand_SUBMITTED_CANDIDATE_ROW_1                             SessionCommand_UsageStatsEvent = 10
	SessionCommand_SUBMITTED_CANDIDATE_ROW_2                             SessionCommand_UsageStatsEvent = 11
	SessionCommand_SUBMITTED_CANDIDATE_ROW_3                             SessionCommand_UsageStatsEvent = 12
	SessionCommand_SUBMITTED_CANDIDATE_ROW_4                             SessionCommand_UsageStatsEvent = 13
	SessionCommand_SUBMITTED_CANDIDATE_ROW_5                             SessionCommand_UsageStatsEvent = 14
	SessionCommand_SUBMITTED_CANDIDATE_ROW_6                             SessionCommand_UsageStatsEvent = 15
	SessionCommand_SUBMITTED_CANDIDATE_ROW_7                             SessionCommand_UsageStatsEvent = 16
	SessionCommand_SUBMITTED_CANDIDATE_ROW_8                             SessionCommand_UsageStatsEvent = 17
	SessionCommand_SUBMITTED_CANDIDATE_ROW_9                             SessionCommand_UsageStatsEvent = 18
	SessionCommand_SUBMITTED_CANDIDATE_ROW_GE10                          SessionCommand_UsageStatsEvent = 19
	SessionCommand_KEYBOARD_FOLD_EVENT                                   SessionCommand_UsageStatsEvent = 20
	SessionCommand_KEYBOARD_EXPAND_EVENT                                 SessionCommand_UsageStatsEvent = 21
	SessionCommand_MUSHROOM_SELECTION_DIALOG_OPEN_EVENT                  SessionCommand_UsageStatsEvent = 22
	SessionCommand_SOFTWARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE                SessionCommand_UsageStatsEvent = 23
	SessionCommand_SOFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT                 SessionCommand_UsageStatsEvent = 24
	SessionCommand_SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_LANDSCAPE SessionCommand_UsageStatsEvent = 25
	SessionCommand_SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_PORTRAIT  SessionCommand_UsageStatsEvent = 26
	SessionCommand_SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAPE            SessionCommand_UsageStatsEvent = 27
	SessionCommand_SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_PORTRAIT             SessionCommand_UsageStatsEvent = 28
)

var SessionCommand_UsageStatsEvent_name = map[int32]string{
	1:  "INFOLIST_WINDOW_SHOW",
	2:  "INFOLIST_WINDOW_HIDE",
	3:  "HANDWRITING_OPEN_EVENT",
	4:  "HANDWRITING_COMMIT_EVENT",
	5:  "CHARACTER_PALETTE_OPEN_EVENT",
	6:  "CHARACTER_PALETTE_COMMIT_EVENT",
	7:  "SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE",
	8:  "SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT",
	9:  "SUBMITTED_CANDIDATE_ROW_0",
	10: "SUBMITTED_CANDIDATE_ROW_1",
	11: "SUBMITTED_CANDIDATE_ROW_2",
	12: "SUBMITTED_CANDIDATE_ROW_3",
	13: "SUBMITTED_CANDIDATE_ROW_4",
	14: "SUBMITTED_CANDIDATE_ROW_5",
	15: "SUBMITTED_CANDIDATE_ROW_6",
	16: "SUBMITTED_CANDIDATE_ROW_7",
	17: "SUBMITTED_CANDIDATE_ROW_8",
	18: "SUBMITTED_CANDIDATE_ROW_9",
	19: "SUBMITTED_CANDIDATE_ROW_GE10",
	20: "KEYBOARD_FOLD_EVENT",
	21: "KEYBOARD_EXPAND_EVENT",
	22: "MUSHROOM_SELECTION_DIALOG_OPEN_EVENT",
	23: "SOFTWARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE",
	24: "SOFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT",
	25: "SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_LANDSCAPE",
	26: "SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_PORTRAIT",
	27: "SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAPE",
	28: "SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_PORTRAIT",
}
var SessionCommand_UsageStatsEvent_value = map[string]int32{
	"INFOLIST_WINDOW_SHOW":                                  1,
	"INFOLIST_WINDOW_HIDE":                                  2,
	"HANDWRITING_OPEN_EVENT":                                3,
	"HANDWRITING_COMMIT_EVENT":                              4,
	"CHARACTER_PALETTE_OPEN_EVENT":                          5,
	"CHARACTER_PALETTE_COMMIT_EVENT":                        6,
	"SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE":                    7,
	"SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT":                     8,
	"SUBMITTED_CANDIDATE_ROW_0":                             9,
	"SUBMITTED_CANDIDATE_ROW_1":                             10,
	"SUBMITTED_CANDIDATE_ROW_2":                             11,
	"SUBMITTED_CANDIDATE_ROW_3":                             12,
	"SUBMITTED_CANDIDATE_ROW_4":                             13,
	"SUBMITTED_CANDIDATE_ROW_5":                             14,
	"SUBMITTED_CANDIDATE_ROW_6":                             15,
	"SUBMITTED_CANDIDATE_ROW_7":                             16,
	"SUBMITTED_CANDIDATE_ROW_8":                             17,
	"SUBMITTED_CANDIDATE_ROW_9":                             18,
	"SUBMITTED_CANDIDATE_ROW_GE10":                          19,
	"KEYBOARD_FOLD_EVENT":                                   20,
	"KEYBOARD_EXPAND_EVENT":                                 21,
	"MUSHROOM_SELECTION_DIALOG_OPEN_EVENT":                  22,
	"SOFTWARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE":                23,
	"SOFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT":                 24,
	"SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_LANDSCAPE": 25,
	"SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_PORTRAIT":  26,
	"SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAPE":            27,
	"SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_PORTRAIT":             28,
}

func (x SessionCommand_UsageStatsEvent) Enum() *SessionCommand_UsageStatsEvent {
	p := new(SessionCommand_UsageStatsEvent)
	*p = x
	return p
}
func (x SessionCommand_UsageStatsEvent) String() string {
	return proto.EnumName(SessionCommand_UsageStatsEvent_name, int32(x))
}
func (x *SessionCommand_UsageStatsEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionCommand_UsageStatsEvent_value, data, "SessionCommand_UsageStatsEvent")
	if err != nil {
		return err
	}
	*x = SessionCommand_UsageStatsEvent(value)
	return nil
}
func (SessionCommand_UsageStatsEvent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 1}
}

// Input field type.
// The types are based on the input types defined in HTML5.
// http://dev.w3.org/html5/spec/Overview.html#attr-input-type
// Other types are to be added later.
type Context_InputFieldType int32

const (
	// No restrictions nor special functions. The IME operates as usual.
	Context_NORMAL Context_InputFieldType = 1
	// Password field. Text is hidden after input.
	// For Android,
	// In order to make the last character visible to the user,
	// the IME must not hold more than 2 characters in preedit.
	Context_PASSWORD Context_InputFieldType = 2
	// Telephone number
	Context_TEL Context_InputFieldType = 3
	// Number
	Context_NUMBER Context_InputFieldType = 4
)

var Context_InputFieldType_name = map[int32]string{
	1: "NORMAL",
	2: "PASSWORD",
	3: "TEL",
	4: "NUMBER",
}
var Context_InputFieldType_value = map[string]int32{
	"NORMAL":   1,
	"PASSWORD": 2,
	"TEL":      3,
	"NUMBER":   4,
}

func (x Context_InputFieldType) Enum() *Context_InputFieldType {
	p := new(Context_InputFieldType)
	*p = x
	return p
}
func (x Context_InputFieldType) String() string {
	return proto.EnumName(Context_InputFieldType_name, int32(x))
}
func (x *Context_InputFieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Context_InputFieldType_value, data, "Context_InputFieldType")
	if err != nil {
		return err
	}
	*x = Context_InputFieldType(value)
	return nil
}
func (Context_InputFieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

// Bit fields to notify what the client can do.
type Capability_TextDeletionCapabilityType int32

const (
	Capability_NO_TEXT_DELETION_CAPABILITY Capability_TextDeletionCapabilityType = 0
	// Can delete preceding text which is adjacent to preedit.
	Capability_DELETE_PRECEDING_TEXT Capability_TextDeletionCapabilityType = 1
)

var Capability_TextDeletionCapabilityType_name = map[int32]string{
	0: "NO_TEXT_DELETION_CAPABILITY",
	1: "DELETE_PRECEDING_TEXT",
}
var Capability_TextDeletionCapabilityType_value = map[string]int32{
	"NO_TEXT_DELETION_CAPABILITY": 0,
	"DELETE_PRECEDING_TEXT":       1,
}

func (x Capability_TextDeletionCapabilityType) Enum() *Capability_TextDeletionCapabilityType {
	p := new(Capability_TextDeletionCapabilityType)
	*p = x
	return p
}
func (x Capability_TextDeletionCapabilityType) String() string {
	return proto.EnumName(Capability_TextDeletionCapabilityType_name, int32(x))
}
func (x *Capability_TextDeletionCapabilityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Capability_TextDeletionCapabilityType_value, data, "Capability_TextDeletionCapabilityType")
	if err != nil {
		return err
	}
	*x = Capability_TextDeletionCapabilityType(value)
	return nil
}
func (Capability_TextDeletionCapabilityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{4, 0}
}

type Request_SpecialRomanjiTable int32

const (
	// Do not use special table.
	// Romanji table is selected based on Config.
	Request_DEFAULT_TABLE Request_SpecialRomanjiTable = 0
	// Use special table for 12keys (to hiragana).
	Request_TWELVE_KEYS_TO_HIRAGANA Request_SpecialRomanjiTable = 10
	// Use special table for 12keys (to half-width ascii).
	Request_TWELVE_KEYS_TO_HALFWIDTHASCII Request_SpecialRomanjiTable = 11
	// Use special table for flick (to hiragana).
	Request_FLICK_TO_HIRAGANA Request_SpecialRomanjiTable = 13
	// Use special table for flick (to half-width ascii).
	Request_FLICK_TO_HALFWIDTHASCII Request_SpecialRomanjiTable = 14
	// Use special table for both toggle and flick (to hiragana).
	Request_TOGGLE_FLICK_TO_HIRAGANA Request_SpecialRomanjiTable = 16
	// Use special table for both toggle and flick (to half-width ascii).
	Request_TOGGLE_FLICK_TO_HALFWIDTHASCII Request_SpecialRomanjiTable = 17
	// Use special table for Qwerty (for Mobile) (to hiragana).
	Request_QWERTY_MOBILE_TO_HIRAGANA Request_SpecialRomanjiTable = 20
	// Use special table for Qwerty (for Mobile) (to half-width ascii).
	Request_QWERTY_MOBILE_TO_HALFWIDTHASCII Request_SpecialRomanjiTable = 22
	// Use special table for Godan (to hiragana).
	Request_GODAN_TO_HIRAGANA Request_SpecialRomanjiTable = 30
	// Use special table for Godan (to half-width ascii).
	Request_GODAN_TO_HALFWIDTHASCII Request_SpecialRomanjiTable = 31
	// Use special table for Notouch (to hiragana).
	Request_NOTOUCH_TO_HIRAGANA Request_SpecialRomanjiTable = 40
	// Use special table for Notouch (to half-width ascii).
	Request_NOTOUCH_TO_HALFWIDTHASCII Request_SpecialRomanjiTable = 41
	// Obsolete items.
	Request_OBSOLETE_TWELVE_KEYS_TO_NUMBER            Request_SpecialRomanjiTable = 12
	Request_OBSOLETE_FLICK_TO_NUMBER                  Request_SpecialRomanjiTable = 15
	Request_OBSOLETE_GODAN_TO_NUMBER                  Request_SpecialRomanjiTable = 32
	Request_OBSOLETE_QWERTY_MOBILE_TO_HIRAGANA_NUMBER Request_SpecialRomanjiTable = 21
	Request_OBSOLETE_TOGGLE_FLICK_TO_NUMBER           Request_SpecialRomanjiTable = 18
)

var Request_SpecialRomanjiTable_name = map[int32]string{
	0:  "DEFAULT_TABLE",
	10: "TWELVE_KEYS_TO_HIRAGANA",
	11: "TWELVE_KEYS_TO_HALFWIDTHASCII",
	13: "FLICK_TO_HIRAGANA",
	14: "FLICK_TO_HALFWIDTHASCII",
	16: "TOGGLE_FLICK_TO_HIRAGANA",
	17: "TOGGLE_FLICK_TO_HALFWIDTHASCII",
	20: "QWERTY_MOBILE_TO_HIRAGANA",
	22: "QWERTY_MOBILE_TO_HALFWIDTHASCII",
	30: "GODAN_TO_HIRAGANA",
	31: "GODAN_TO_HALFWIDTHASCII",
	40: "NOTOUCH_TO_HIRAGANA",
	41: "NOTOUCH_TO_HALFWIDTHASCII",
	12: "OBSOLETE_TWELVE_KEYS_TO_NUMBER",
	15: "OBSOLETE_FLICK_TO_NUMBER",
	32: "OBSOLETE_GODAN_TO_NUMBER",
	21: "OBSOLETE_QWERTY_MOBILE_TO_HIRAGANA_NUMBER",
	18: "OBSOLETE_TOGGLE_FLICK_TO_NUMBER",
}
var Request_SpecialRomanjiTable_value = map[string]int32{
	"DEFAULT_TABLE":                             0,
	"TWELVE_KEYS_TO_HIRAGANA":                   10,
	"TWELVE_KEYS_TO_HALFWIDTHASCII":             11,
	"FLICK_TO_HIRAGANA":                         13,
	"FLICK_TO_HALFWIDTHASCII":                   14,
	"TOGGLE_FLICK_TO_HIRAGANA":                  16,
	"TOGGLE_FLICK_TO_HALFWIDTHASCII":            17,
	"QWERTY_MOBILE_TO_HIRAGANA":                 20,
	"QWERTY_MOBILE_TO_HALFWIDTHASCII":           22,
	"GODAN_TO_HIRAGANA":                         30,
	"GODAN_TO_HALFWIDTHASCII":                   31,
	"NOTOUCH_TO_HIRAGANA":                       40,
	"NOTOUCH_TO_HALFWIDTHASCII":                 41,
	"OBSOLETE_TWELVE_KEYS_TO_NUMBER":            12,
	"OBSOLETE_FLICK_TO_NUMBER":                  15,
	"OBSOLETE_GODAN_TO_NUMBER":                  32,
	"OBSOLETE_QWERTY_MOBILE_TO_HIRAGANA_NUMBER": 21,
	"OBSOLETE_TOGGLE_FLICK_TO_NUMBER":           18,
}

func (x Request_SpecialRomanjiTable) Enum() *Request_SpecialRomanjiTable {
	p := new(Request_SpecialRomanjiTable)
	*p = x
	return p
}
func (x Request_SpecialRomanjiTable) String() string {
	return proto.EnumName(Request_SpecialRomanjiTable_name, int32(x))
}
func (x *Request_SpecialRomanjiTable) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_SpecialRomanjiTable_value, data, "Request_SpecialRomanjiTable")
	if err != nil {
		return err
	}
	*x = Request_SpecialRomanjiTable(value)
	return nil
}
func (Request_SpecialRomanjiTable) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{5, 0}
}

type Request_SpaceOnAlphanumeric int32

const (
	// The first input is treated as a space, double input is treated
	// as a conversion.  If a character is input after the first
	// input, the composition will remain.  For example, "ab<space>dc"
	// becomes "ab dc" as a single composition.
	Request_SPACE_OR_CONVERT_KEEPING_COMPOSITION Request_SpaceOnAlphanumeric = 0
	// The first input is treated as a space, double input is treated
	// as a conversion.  If a character is input after the first
	// input, the previous composition will be committed.  For
	// example, "ab<space>dc" results "ab " as a committed string and
	// "dc" as a composition.
	Request_SPACE_OR_CONVERT_COMMITING_COMPOSITION Request_SpaceOnAlphanumeric = 1
	// Commit the composition and a space.
	Request_COMMIT Request_SpaceOnAlphanumeric = 2
)

var Request_SpaceOnAlphanumeric_name = map[int32]string{
	0: "SPACE_OR_CONVERT_KEEPING_COMPOSITION",
	1: "SPACE_OR_CONVERT_COMMITING_COMPOSITION",
	2: "COMMIT",
}
var Request_SpaceOnAlphanumeric_value = map[string]int32{
	"SPACE_OR_CONVERT_KEEPING_COMPOSITION":   0,
	"SPACE_OR_CONVERT_COMMITING_COMPOSITION": 1,
	"COMMIT":                                 2,
}

func (x Request_SpaceOnAlphanumeric) Enum() *Request_SpaceOnAlphanumeric {
	p := new(Request_SpaceOnAlphanumeric)
	*p = x
	return p
}
func (x Request_SpaceOnAlphanumeric) String() string {
	return proto.EnumName(Request_SpaceOnAlphanumeric_name, int32(x))
}
func (x *Request_SpaceOnAlphanumeric) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_SpaceOnAlphanumeric_value, data, "Request_SpaceOnAlphanumeric")
	if err != nil {
		return err
	}
	*x = Request_SpaceOnAlphanumeric(value)
	return nil
}
func (Request_SpaceOnAlphanumeric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{5, 1}
}

// Nowadays, four kinds of emoji characters are used in Japan.
// - Unicode: Unicode based emoji (since Unicode 6.0).
// - Docomo: Docomo's carrier emoji.
// - Softbank: Softbank's carrier emoji.
// - Kddi: Kddi's carrier emoji.
// Note that especially latter three kinds are used on Mobile phones.
// So, it is necessary to control what kinds of emoji can be used or not
// based on client's (or connected application's) information.
// For example, on Android;
// - Unicode emoji characters are available only on Android 4.1 or later
//   only.
// - JP mobile carriers' emoji characters depend on the devices. Also,
//   we need to check the text field's attribute for them.
// The following bit set tells the emoji availability to EmojiRewriter.
type Request_EmojiCarrierType int32

const (
	Request_UNICODE_EMOJI  Request_EmojiCarrierType = 1
	Request_DOCOMO_EMOJI   Request_EmojiCarrierType = 2
	Request_SOFTBANK_EMOJI Request_EmojiCarrierType = 4
	Request_KDDI_EMOJI     Request_EmojiCarrierType = 8
)

var Request_EmojiCarrierType_name = map[int32]string{
	1: "UNICODE_EMOJI",
	2: "DOCOMO_EMOJI",
	4: "SOFTBANK_EMOJI",
	8: "KDDI_EMOJI",
}
var Request_EmojiCarrierType_value = map[string]int32{
	"UNICODE_EMOJI":  1,
	"DOCOMO_EMOJI":   2,
	"SOFTBANK_EMOJI": 4,
	"KDDI_EMOJI":     8,
}

func (x Request_EmojiCarrierType) Enum() *Request_EmojiCarrierType {
	p := new(Request_EmojiCarrierType)
	*p = x
	return p
}
func (x Request_EmojiCarrierType) String() string {
	return proto.EnumName(Request_EmojiCarrierType_name, int32(x))
}
func (x *Request_EmojiCarrierType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_EmojiCarrierType_value, data, "Request_EmojiCarrierType")
	if err != nil {
		return err
	}
	*x = Request_EmojiCarrierType(value)
	return nil
}
func (Request_EmojiCarrierType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5, 2} }

// For emoji rewriter, it is necessary to control when the rewriter runs
// based on the clients. The following bit set is sync'ed to
// RewriterInterface::CapabilityType (see rewriter_interface.h, too),
// so that clients can fill the value.
type Request_RewriterCapability int32

const (
	Request_NOT_AVAILABLE Request_RewriterCapability = 0
	Request_CONVERSION    Request_RewriterCapability = 1
	Request_PREDICTION    Request_RewriterCapability = 2
	Request_SUGGESTION    Request_RewriterCapability = 4
	Request_ALL           Request_RewriterCapability = 7
)

var Request_RewriterCapability_name = map[int32]string{
	0: "NOT_AVAILABLE",
	1: "CONVERSION",
	2: "PREDICTION",
	4: "SUGGESTION",
	7: "ALL",
}
var Request_RewriterCapability_value = map[string]int32{
	"NOT_AVAILABLE": 0,
	"CONVERSION":    1,
	"PREDICTION":    2,
	"SUGGESTION":    4,
	"ALL":           7,
}

func (x Request_RewriterCapability) Enum() *Request_RewriterCapability {
	p := new(Request_RewriterCapability)
	*p = x
	return p
}
func (x Request_RewriterCapability) String() string {
	return proto.EnumName(Request_RewriterCapability_name, int32(x))
}
func (x *Request_RewriterCapability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_RewriterCapability_value, data, "Request_RewriterCapability")
	if err != nil {
		return err
	}
	*x = Request_RewriterCapability(value)
	return nil
}
func (Request_RewriterCapability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{5, 3}
}

// Controls the behavior when a user types the left/right key at the edge
// of the preedit string (in more precise, the left key at the beginning
// of the preedit string, or the right key at the end).
type Request_CrossingEdgeBehavior int32

const (
	// This is the default behavior. The cursor movement at the edge
	// will make nothing, i.e., keeping the current cursor position (at the
	// edge), consume the key event.
	Request_DO_NOTHING Request_CrossingEdgeBehavior = 0
	// This is the behavior, especially designed for alphabet keyboards on
	// mobile devices. Assuming the following text:
	//   XXXXabcde|YYYYY
	// where XXXX is preceding text, abcde is composing text, YYYYY is
	// following text and '|' is the caret, when a user sends "RIGHT"
	// cursor key, we'd like to commit the abcde and move the caret to right.
	// So the user will get:
	//   XXXXabcdeY|YYYY
	// Here, what we need is commiting the "abcde" with the appropriate
	// caret position. (Note that we need to handle the left cursor key, too).
	// Also, we should *NOT* consume the key, so that the key event will be
	// handled appropriately by the target application.
	Request_COMMIT_WITHOUT_CONSUMING Request_CrossingEdgeBehavior = 1
)

var Request_CrossingEdgeBehavior_name = map[int32]string{
	0: "DO_NOTHING",
	1: "COMMIT_WITHOUT_CONSUMING",
}
var Request_CrossingEdgeBehavior_value = map[string]int32{
	"DO_NOTHING":               0,
	"COMMIT_WITHOUT_CONSUMING": 1,
}

func (x Request_CrossingEdgeBehavior) Enum() *Request_CrossingEdgeBehavior {
	p := new(Request_CrossingEdgeBehavior)
	*p = x
	return p
}
func (x Request_CrossingEdgeBehavior) String() string {
	return proto.EnumName(Request_CrossingEdgeBehavior_name, int32(x))
}
func (x *Request_CrossingEdgeBehavior) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_CrossingEdgeBehavior_value, data, "Request_CrossingEdgeBehavior")
	if err != nil {
		return err
	}
	*x = Request_CrossingEdgeBehavior(value)
	return nil
}
func (Request_CrossingEdgeBehavior) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{5, 4}
}

// Controls the behavior of language aware input.  Language aware input
// guesses the actual language regardless the input mode.  For example,
// if user type "てｓｔ" it will be treated as "test".
type Request_LanguageAwareInputBehavior int32

const (
	// Performs the default behavior considering the platform and channel.
	Request_DEFAULT_LANGUAGE_AWARE_BEHAVIOR Request_LanguageAwareInputBehavior = 0
	// Does not perform this functionarity.
	Request_NO_LANGUAGE_AWARE_INPUT Request_LanguageAwareInputBehavior = 1
	// Adds a language aware candidate to the suggestion.
	Request_LANGUAGE_AWARE_SUGGESTION Request_LanguageAwareInputBehavior = 2
)

var Request_LanguageAwareInputBehavior_name = map[int32]string{
	0: "DEFAULT_LANGUAGE_AWARE_BEHAVIOR",
	1: "NO_LANGUAGE_AWARE_INPUT",
	2: "LANGUAGE_AWARE_SUGGESTION",
}
var Request_LanguageAwareInputBehavior_value = map[string]int32{
	"DEFAULT_LANGUAGE_AWARE_BEHAVIOR": 0,
	"NO_LANGUAGE_AWARE_INPUT":         1,
	"LANGUAGE_AWARE_SUGGESTION":       2,
}

func (x Request_LanguageAwareInputBehavior) Enum() *Request_LanguageAwareInputBehavior {
	p := new(Request_LanguageAwareInputBehavior)
	*p = x
	return p
}
func (x Request_LanguageAwareInputBehavior) String() string {
	return proto.EnumName(Request_LanguageAwareInputBehavior_name, int32(x))
}
func (x *Request_LanguageAwareInputBehavior) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_LanguageAwareInputBehavior_value, data, "Request_LanguageAwareInputBehavior")
	if err != nil {
		return err
	}
	*x = Request_LanguageAwareInputBehavior(value)
	return nil
}
func (Request_LanguageAwareInputBehavior) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{5, 5}
}

type Input_CommandType int32

const (
	Input_NONE           Input_CommandType = 0
	Input_CREATE_SESSION Input_CommandType = 1
	Input_DELETE_SESSION Input_CommandType = 2
	Input_SEND_KEY       Input_CommandType = 3
	// Check only if the key event will be consumed.  This command is
	// for TSF on Windows.  You do not need to use this command, if it
	// is not necessary.
	Input_TEST_SEND_KEY Input_CommandType = 4
	// Evaluate the command specified by SessionCommand.  The output
	// format should be the same with an output of a SEND_KEY command.
	Input_SEND_COMMAND Input_CommandType = 5
	// Config accessors.
	// There are three configurations.
	// Stored config, Imposed config, One-shot config.
	// Stored config : Set by SET_CONFIG command.
	// Its lifetime is permanent (stored into a storage).
	// GET_CONFIG returns stored config.
	// Imposed config : Set by SET_IMPOSED_CONFIG. Its lifetime is the
	// same as the process (*not* stored into a storage as opposed to Stored
	// config).
	// Imposed config is prioritized over Stored config.
	// Only the values explicitly set are effective and override ones in Stored
	// config. In typical usage, most fields are not set.
	// GET_CONFIG's result is *not* affected by imposed config
	// (stored config returns).
	// One-shot config : Set by each key events.
	// It is effective while the key event is processed.
	// This is prioritized over Imposed config.
	// Like as Imposed config, some fields can be omitted.
	// TODO(matsuzakit): Rename (GET|SET)_CONFIG to (GET|SET)_STORED_CONFIG
	Input_GET_CONFIG         Input_CommandType = 6
	Input_SET_CONFIG         Input_CommandType = 7
	Input_SET_IMPOSED_CONFIG Input_CommandType = 22
	// Set client's request
	Input_SET_REQUEST Input_CommandType = 17
	// sync dictionary/history data to local file
	Input_SYNC_DATA Input_CommandType = 8
	// shutdowon server safely
	Input_SHUTDOWN Input_CommandType = 9
	// reload mutable data (like config, user-dic, history)
	Input_RELOAD Input_CommandType = 10
	// clear user history data
	Input_CLEAR_USER_HISTORY Input_CommandType = 11
	// clear user prediction data
	Input_CLEAR_USER_PREDICTION Input_CommandType = 12
	// clear unused prediction
	Input_CLEAR_UNUSED_USER_PREDICTION Input_CommandType = 16
	// clean up sessions
	// shutdwon if session is empty and
	// mozc_server is launched with timeout mode
	Input_CLEANUP Input_CommandType = 13
	// no operation
	// can be used for pinging the server
	Input_NO_OPERATION Input_CommandType = 14
	// Sync feature is deprecated since 1.13 dev.
	// TODO(mozc-team): Remove following variables.
	Input_OBSOLETE_START_CLOUD_SYNC      Input_CommandType = 18
	Input_OBSOLETE_GET_CLOUD_SYNC_STATUS Input_CommandType = 23
	Input_OBSOLETE_ADD_AUTH_CODE         Input_CommandType = 24
	Input_INSERT_TO_STORAGE              Input_CommandType = 20
	Input_READ_ALL_FROM_STORAGE          Input_CommandType = 21
	Input_CLEAR_STORAGE                  Input_CommandType = 25
	// Send a command for user dictionary session.
	Input_SEND_USER_DICTIONARY_COMMAND Input_CommandType = 26
	Input_SEND_ENGINE_RELOAD_REQUEST   Input_CommandType = 27
	// Number of commands.
	// When new command is added, the command should use below number
	// and NUM_OF_COMMANDS should be incremented.
	//
	// Note: This enum lack the value for 15 and 19 and it may cause a crash.
	//       Please reuse these value if you can.
	//       15 have never been used before, and 19 was used to clear synced
	//       data on dev channel.
	Input_NUM_OF_COMMANDS Input_CommandType = 28
)

var Input_CommandType_name = map[int32]string{
	0:  "NONE",
	1:  "CREATE_SESSION",
	2:  "DELETE_SESSION",
	3:  "SEND_KEY",
	4:  "TEST_SEND_KEY",
	5:  "SEND_COMMAND",
	6:  "GET_CONFIG",
	7:  "SET_CONFIG",
	22: "SET_IMPOSED_CONFIG",
	17: "SET_REQUEST",
	8:  "SYNC_DATA",
	9:  "SHUTDOWN",
	10: "RELOAD",
	11: "CLEAR_USER_HISTORY",
	12: "CLEAR_USER_PREDICTION",
	16: "CLEAR_UNUSED_USER_PREDICTION",
	13: "CLEANUP",
	14: "NO_OPERATION",
	18: "OBSOLETE_START_CLOUD_SYNC",
	23: "OBSOLETE_GET_CLOUD_SYNC_STATUS",
	24: "OBSOLETE_ADD_AUTH_CODE",
	20: "INSERT_TO_STORAGE",
	21: "READ_ALL_FROM_STORAGE",
	25: "CLEAR_STORAGE",
	26: "SEND_USER_DICTIONARY_COMMAND",
	27: "SEND_ENGINE_RELOAD_REQUEST",
	28: "NUM_OF_COMMANDS",
}
var Input_CommandType_value = map[string]int32{
	"NONE":                           0,
	"CREATE_SESSION":                 1,
	"DELETE_SESSION":                 2,
	"SEND_KEY":                       3,
	"TEST_SEND_KEY":                  4,
	"SEND_COMMAND":                   5,
	"GET_CONFIG":                     6,
	"SET_CONFIG":                     7,
	"SET_IMPOSED_CONFIG":             22,
	"SET_REQUEST":                    17,
	"SYNC_DATA":                      8,
	"SHUTDOWN":                       9,
	"RELOAD":                         10,
	"CLEAR_USER_HISTORY":             11,
	"CLEAR_USER_PREDICTION":          12,
	"CLEAR_UNUSED_USER_PREDICTION":   16,
	"CLEANUP":                        13,
	"NO_OPERATION":                   14,
	"OBSOLETE_START_CLOUD_SYNC":      18,
	"OBSOLETE_GET_CLOUD_SYNC_STATUS": 23,
	"OBSOLETE_ADD_AUTH_CODE":         24,
	"INSERT_TO_STORAGE":              20,
	"READ_ALL_FROM_STORAGE":          21,
	"CLEAR_STORAGE":                  25,
	"SEND_USER_DICTIONARY_COMMAND":   26,
	"SEND_ENGINE_RELOAD_REQUEST":     27,
	"NUM_OF_COMMANDS":                28,
}

func (x Input_CommandType) Enum() *Input_CommandType {
	p := new(Input_CommandType)
	*p = x
	return p
}
func (x Input_CommandType) String() string {
	return proto.EnumName(Input_CommandType_name, int32(x))
}
func (x *Input_CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Input_CommandType_value, data, "Input_CommandType")
	if err != nil {
		return err
	}
	*x = Input_CommandType(value)
	return nil
}
func (Input_CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 0} }

type Input_TouchAction int32

const (
	Input_TOUCH_DOWN Input_TouchAction = 1
	Input_TOUCH_MOVE Input_TouchAction = 2
	Input_TOUCH_UP   Input_TouchAction = 3
)

var Input_TouchAction_name = map[int32]string{
	1: "TOUCH_DOWN",
	2: "TOUCH_MOVE",
	3: "TOUCH_UP",
}
var Input_TouchAction_value = map[string]int32{
	"TOUCH_DOWN": 1,
	"TOUCH_MOVE": 2,
	"TOUCH_UP":   3,
}

func (x Input_TouchAction) Enum() *Input_TouchAction {
	p := new(Input_TouchAction)
	*p = x
	return p
}
func (x Input_TouchAction) String() string {
	return proto.EnumName(Input_TouchAction_name, int32(x))
}
func (x *Input_TouchAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Input_TouchAction_value, data, "Input_TouchAction")
	if err != nil {
		return err
	}
	*x = Input_TouchAction(value)
	return nil
}
func (Input_TouchAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 1} }

type Result_ResultType int32

const (
	Result_NONE   Result_ResultType = 0
	Result_STRING Result_ResultType = 1
)

var Result_ResultType_name = map[int32]string{
	0: "NONE",
	1: "STRING",
}
var Result_ResultType_value = map[string]int32{
	"NONE":   0,
	"STRING": 1,
}

func (x Result_ResultType) Enum() *Result_ResultType {
	p := new(Result_ResultType)
	*p = x
	return p
}
func (x Result_ResultType) String() string {
	return proto.EnumName(Result_ResultType_name, int32(x))
}
func (x *Result_ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Result_ResultType_value, data, "Result_ResultType")
	if err != nil {
		return err
	}
	*x = Result_ResultType(value)
	return nil
}
func (Result_ResultType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 0} }

type Preedit_Segment_Annotation int32

const (
	Preedit_Segment_NONE      Preedit_Segment_Annotation = 0
	Preedit_Segment_UNDERLINE Preedit_Segment_Annotation = 1
	Preedit_Segment_HIGHLIGHT Preedit_Segment_Annotation = 2
)

var Preedit_Segment_Annotation_name = map[int32]string{
	0: "NONE",
	1: "UNDERLINE",
	2: "HIGHLIGHT",
}
var Preedit_Segment_Annotation_value = map[string]int32{
	"NONE":      0,
	"UNDERLINE": 1,
	"HIGHLIGHT": 2,
}

func (x Preedit_Segment_Annotation) Enum() *Preedit_Segment_Annotation {
	p := new(Preedit_Segment_Annotation)
	*p = x
	return p
}
func (x Preedit_Segment_Annotation) String() string {
	return proto.EnumName(Preedit_Segment_Annotation_name, int32(x))
}
func (x *Preedit_Segment_Annotation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Preedit_Segment_Annotation_value, data, "Preedit_Segment_Annotation")
	if err != nil {
		return err
	}
	*x = Preedit_Segment_Annotation(value)
	return nil
}
func (Preedit_Segment_Annotation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{9, 0, 0}
}

// PreeditMethod: this is the default input mode of the session.
// If the user's config is "kana-input", it returns KANA.  Only
// CreateSession response will have this field.
type Output_PreeditMethod int32

const (
	Output_ASCII Output_PreeditMethod = 0
	Output_KANA  Output_PreeditMethod = 1
)

var Output_PreeditMethod_name = map[int32]string{
	0: "ASCII",
	1: "KANA",
}
var Output_PreeditMethod_value = map[string]int32{
	"ASCII": 0,
	"KANA":  1,
}

func (x Output_PreeditMethod) Enum() *Output_PreeditMethod {
	p := new(Output_PreeditMethod)
	*p = x
	return p
}
func (x Output_PreeditMethod) String() string {
	return proto.EnumName(Output_PreeditMethod_name, int32(x))
}
func (x *Output_PreeditMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Output_PreeditMethod_value, data, "Output_PreeditMethod")
	if err != nil {
		return err
	}
	*x = Output_PreeditMethod(value)
	return nil
}
func (Output_PreeditMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 0} }

// ErrorCode:
// if SessionHandler::EvalCommand() returns false,
// return output with error_code = SESSION_FAILURE;
type Output_ErrorCode int32

const (
	Output_SESSION_SUCCESS Output_ErrorCode = 0
	Output_SESSION_FAILURE Output_ErrorCode = 1
)

var Output_ErrorCode_name = map[int32]string{
	0: "SESSION_SUCCESS",
	1: "SESSION_FAILURE",
}
var Output_ErrorCode_value = map[string]int32{
	"SESSION_SUCCESS": 0,
	"SESSION_FAILURE": 1,
}

func (x Output_ErrorCode) Enum() *Output_ErrorCode {
	p := new(Output_ErrorCode)
	*p = x
	return p
}
func (x Output_ErrorCode) String() string {
	return proto.EnumName(Output_ErrorCode_name, int32(x))
}
func (x *Output_ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Output_ErrorCode_value, data, "Output_ErrorCode")
	if err != nil {
		return err
	}
	*x = Output_ErrorCode(value)
	return nil
}
func (Output_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 1} }

// if launch_tool_mode is set, MozcTool is supposed to be launched
// by client.
type Output_ToolMode int32

const (
	Output_NO_TOOL              Output_ToolMode = 0
	Output_CONFIG_DIALOG        Output_ToolMode = 1
	Output_DICTIONARY_TOOL      Output_ToolMode = 2
	Output_WORD_REGISTER_DIALOG Output_ToolMode = 3
)

var Output_ToolMode_name = map[int32]string{
	0: "NO_TOOL",
	1: "CONFIG_DIALOG",
	2: "DICTIONARY_TOOL",
	3: "WORD_REGISTER_DIALOG",
}
var Output_ToolMode_value = map[string]int32{
	"NO_TOOL":              0,
	"CONFIG_DIALOG":        1,
	"DICTIONARY_TOOL":      2,
	"WORD_REGISTER_DIALOG": 3,
}

func (x Output_ToolMode) Enum() *Output_ToolMode {
	p := new(Output_ToolMode)
	*p = x
	return p
}
func (x Output_ToolMode) String() string {
	return proto.EnumName(Output_ToolMode_name, int32(x))
}
func (x *Output_ToolMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Output_ToolMode_value, data, "Output_ToolMode")
	if err != nil {
		return err
	}
	*x = Output_ToolMode(value)
	return nil
}
func (Output_ToolMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 2} }

type KeyEvent struct {
	// Printable key in UCS4.  If key_code is empty, key_string is used
	// as a raw input.
	KeyCode      *uint32                `protobuf:"varint,1,opt,name=key_code,json=keyCode" json:"key_code,omitempty"`
	Modifiers    *uint32                `protobuf:"varint,2,opt,name=modifiers" json:"modifiers,omitempty"`
	SpecialKey   *KeyEvent_SpecialKey   `protobuf:"varint,3,opt,name=special_key,json=specialKey,enum=commands.KeyEvent_SpecialKey" json:"special_key,omitempty"`
	ModifierKeys []KeyEvent_ModifierKey `protobuf:"varint,4,rep,name=modifier_keys,json=modifierKeys,enum=commands.KeyEvent_ModifierKey" json:"modifier_keys,omitempty"`
	// String used for preedit.  Kana characters and strings typed from
	// a software keyboard are supposed to be stored here.  If key_code
	// is also set, key_code is treated as the raw input and key_string is
	// treated as the composition input.  For example, to set Kana value,
	// when key_string is "ち", key_code should be 'a' (97).  If key_code
	// is empty, key_string is also treated as the raw input.
	KeyString  *string              `protobuf:"bytes,5,opt,name=key_string,json=keyString" json:"key_string,omitempty"`
	InputStyle *KeyEvent_InputStyle `protobuf:"varint,6,opt,name=input_style,json=inputStyle,enum=commands.KeyEvent_InputStyle,def=0" json:"input_style,omitempty"`
	// Input mode
	// For histrical reasons, this field expects a temporary conversion
	// mode rather than comeback input mode.
	Mode *CompositionMode `protobuf:"varint,7,opt,name=mode,enum=commands.CompositionMode" json:"mode,omitempty"`
	// Probable key events
	// Even if you can fill this field,
	// don't omit Input.key_code and so on
	// because preedit string is composed based on them.
	ProbableKeyEvent []*KeyEvent_ProbableKeyEvent `protobuf:"bytes,8,rep,name=probable_key_event,json=probableKeyEvent" json:"probable_key_event,omitempty"`
	// IME on/off mode
	// You can use this field to change the IME on/off mode indirectly without
	// sending SpecialKey:ON or SpecialKey:OFF events.
	// If the internal ImeContext::State is DIRECT and this field is true, the
	// converter will change the state to PRECONPOSITION and then handles this key
	// event.
	// If the internal ImeContext::State is not DIRECT and this field is false,
	// the converter will change the state to DIRECT and then handles this key
	// event.
	// Implementation note: We need both |mode| and |activated| to support
	// indirect IME off, where |mode| should contain the next mode. If this field
	// is not set, the server will act as if indirect on/off was not supported.
	Activated        *bool  `protobuf:"varint,9,opt,name=activated" json:"activated,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KeyEvent) Reset()                    { *m = KeyEvent{} }
func (m *KeyEvent) String() string            { return proto.CompactTextString(m) }
func (*KeyEvent) ProtoMessage()               {}
func (*KeyEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_KeyEvent_InputStyle KeyEvent_InputStyle = KeyEvent_FOLLOW_MODE

func (m *KeyEvent) GetKeyCode() uint32 {
	if m != nil && m.KeyCode != nil {
		return *m.KeyCode
	}
	return 0
}

func (m *KeyEvent) GetModifiers() uint32 {
	if m != nil && m.Modifiers != nil {
		return *m.Modifiers
	}
	return 0
}

func (m *KeyEvent) GetSpecialKey() KeyEvent_SpecialKey {
	if m != nil && m.SpecialKey != nil {
		return *m.SpecialKey
	}
	return KeyEvent_NO_SPECIALKEY
}

func (m *KeyEvent) GetModifierKeys() []KeyEvent_ModifierKey {
	if m != nil {
		return m.ModifierKeys
	}
	return nil
}

func (m *KeyEvent) GetKeyString() string {
	if m != nil && m.KeyString != nil {
		return *m.KeyString
	}
	return ""
}

func (m *KeyEvent) GetInputStyle() KeyEvent_InputStyle {
	if m != nil && m.InputStyle != nil {
		return *m.InputStyle
	}
	return Default_KeyEvent_InputStyle
}

func (m *KeyEvent) GetMode() CompositionMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return CompositionMode_DIRECT
}

func (m *KeyEvent) GetProbableKeyEvent() []*KeyEvent_ProbableKeyEvent {
	if m != nil {
		return m.ProbableKeyEvent
	}
	return nil
}

func (m *KeyEvent) GetActivated() bool {
	if m != nil && m.Activated != nil {
		return *m.Activated
	}
	return false
}

// Probable key event, mainly for touch screen.
// User's input has ambiguity (e.g. the touch position is merginal)
// so this message expresses the probable event.
type KeyEvent_ProbableKeyEvent struct {
	// message ID is the same as Input message.
	KeyCode      *uint32                `protobuf:"varint,1,opt,name=key_code,json=keyCode" json:"key_code,omitempty"`
	SpecialKey   *KeyEvent_SpecialKey   `protobuf:"varint,3,opt,name=special_key,json=specialKey,enum=commands.KeyEvent_SpecialKey" json:"special_key,omitempty"`
	ModifierKeys []KeyEvent_ModifierKey `protobuf:"varint,4,rep,name=modifier_keys,json=modifierKeys,enum=commands.KeyEvent_ModifierKey" json:"modifier_keys,omitempty"`
	// Sum of probabilities must be lesser or equal than 1.
	// 0<= probability <= 1
	Probability      *float64 `protobuf:"fixed64,10,opt,name=probability" json:"probability,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *KeyEvent_ProbableKeyEvent) Reset()                    { *m = KeyEvent_ProbableKeyEvent{} }
func (m *KeyEvent_ProbableKeyEvent) String() string            { return proto.CompactTextString(m) }
func (*KeyEvent_ProbableKeyEvent) ProtoMessage()               {}
func (*KeyEvent_ProbableKeyEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *KeyEvent_ProbableKeyEvent) GetKeyCode() uint32 {
	if m != nil && m.KeyCode != nil {
		return *m.KeyCode
	}
	return 0
}

func (m *KeyEvent_ProbableKeyEvent) GetSpecialKey() KeyEvent_SpecialKey {
	if m != nil && m.SpecialKey != nil {
		return *m.SpecialKey
	}
	return KeyEvent_NO_SPECIALKEY
}

func (m *KeyEvent_ProbableKeyEvent) GetModifierKeys() []KeyEvent_ModifierKey {
	if m != nil {
		return m.ModifierKeys
	}
	return nil
}

func (m *KeyEvent_ProbableKeyEvent) GetProbability() float64 {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return 0
}

type GenericStorageEntry struct {
	Type *GenericStorageEntry_StorageType `protobuf:"varint,1,opt,name=type,enum=commands.GenericStorageEntry_StorageType" json:"type,omitempty"`
	Key  *string                          `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The type must be bytes instead of string
	// because value might have U+0000 character as a terminator.
	// In this case, characters after the terminator are undefined.
	// Such byte stream cannot be treaed by Java's String class, which
	// is used for PB's string type.
	// Instead, PB's bytes type is converted into ByteString in Java,
	// which can treat C laguage style string described above.
	Value            [][]byte `protobuf:"bytes,3,rep,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GenericStorageEntry) Reset()                    { *m = GenericStorageEntry{} }
func (m *GenericStorageEntry) String() string            { return proto.CompactTextString(m) }
func (*GenericStorageEntry) ProtoMessage()               {}
func (*GenericStorageEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GenericStorageEntry) GetType() GenericStorageEntry_StorageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GenericStorageEntry_SYMBOL_HISTORY
}

func (m *GenericStorageEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *GenericStorageEntry) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SessionCommand struct {
	Type *SessionCommand_CommandType `protobuf:"varint,1,req,name=type,enum=commands.SessionCommand_CommandType" json:"type,omitempty"`
	// Unique number specifying a candidate word.
	Id *int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// This is used with SWITCH_INPUT_MODE, TURN_ON_IME and TURN_OFF_IME.
	CompositionMode *CompositionMode `protobuf:"varint,3,opt,name=composition_mode,json=compositionMode,enum=commands.CompositionMode" json:"composition_mode,omitempty"`
	// Text argument.  This is used by CONVERT_REVERSE at this moment.
	Text *string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	// New cursor position in preedit. Used with MOVE_CURSOR.
	CursorPosition          *uint32                         `protobuf:"varint,5,opt,name=cursor_position,json=cursorPosition" json:"cursor_position,omitempty"`
	UsageStatsEvent         *SessionCommand_UsageStatsEvent `protobuf:"varint,7,opt,name=usage_stats_event,json=usageStatsEvent,enum=commands.SessionCommand_UsageStatsEvent" json:"usage_stats_event,omitempty"`
	UsageStatsEventIntValue *int32                          `protobuf:"varint,9,opt,name=usage_stats_event_int_value,json=usageStatsEventIntValue" json:"usage_stats_event_int_value,omitempty"`
	XXX_unrecognized        []byte                          `json:"-"`
}

func (m *SessionCommand) Reset()                    { *m = SessionCommand{} }
func (m *SessionCommand) String() string            { return proto.CompactTextString(m) }
func (*SessionCommand) ProtoMessage()               {}
func (*SessionCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SessionCommand) GetType() SessionCommand_CommandType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SessionCommand_REVERT
}

func (m *SessionCommand) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SessionCommand) GetCompositionMode() CompositionMode {
	if m != nil && m.CompositionMode != nil {
		return *m.CompositionMode
	}
	return CompositionMode_DIRECT
}

func (m *SessionCommand) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *SessionCommand) GetCursorPosition() uint32 {
	if m != nil && m.CursorPosition != nil {
		return *m.CursorPosition
	}
	return 0
}

func (m *SessionCommand) GetUsageStatsEvent() SessionCommand_UsageStatsEvent {
	if m != nil && m.UsageStatsEvent != nil {
		return *m.UsageStatsEvent
	}
	return SessionCommand_INFOLIST_WINDOW_SHOW
}

func (m *SessionCommand) GetUsageStatsEventIntValue() int32 {
	if m != nil && m.UsageStatsEventIntValue != nil {
		return *m.UsageStatsEventIntValue
	}
	return 0
}

type Context struct {
	// Former part of surrounding text.
	PrecedingText *string `protobuf:"bytes,1,opt,name=preceding_text,json=precedingText" json:"preceding_text,omitempty"`
	// Latter part of surrounding text.
	FollowingText *string `protobuf:"bytes,2,opt,name=following_text,json=followingText" json:"following_text,omitempty"`
	// If this is true, suggestion feature is disabled regardless the
	// congiguration.  If this is false, suggestion feature is followed
	// by the user's configuration.  If you want to omit interim
	// suggestions during the key typing, you might want to use
	// request_suggestion.
	// TODO(komatsu): Delete this field and use experimental_features.
	SuppressSuggestion *bool `protobuf:"varint,3,opt,name=suppress_suggestion,json=suppressSuggestion,def=0" json:"suppress_suggestion,omitempty"`
	// Type of the input field being focused.
	InputFieldType *Context_InputFieldType `protobuf:"varint,4,opt,name=input_field_type,json=inputFieldType,enum=commands.Context_InputFieldType" json:"input_field_type,omitempty"`
	// An unique revision ID to specify one specific typing session. A client can
	// use arbitrary value for this field. The converter is expected to clear its
	// internal history segments whenever this value is changed. A client should
	// use the same revision ID whenever the converter should keep it internal
	// history segments. In order to avoid unexpected history learnings, a client
	// should update the revision whenever the input focus is changed.
	Revision *int32 `protobuf:"varint,5,opt,name=revision,def=0" json:"revision,omitempty"`
	// Repeated fields to be used for experimental features.
	ExperimentalFeatures []string `protobuf:"bytes,100,rep,name=experimental_features,json=experimentalFeatures" json:"experimental_features,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *Context) Reset()                    { *m = Context{} }
func (m *Context) String() string            { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

const Default_Context_SuppressSuggestion bool = false
const Default_Context_Revision int32 = 0

func (m *Context) GetPrecedingText() string {
	if m != nil && m.PrecedingText != nil {
		return *m.PrecedingText
	}
	return ""
}

func (m *Context) GetFollowingText() string {
	if m != nil && m.FollowingText != nil {
		return *m.FollowingText
	}
	return ""
}

func (m *Context) GetSuppressSuggestion() bool {
	if m != nil && m.SuppressSuggestion != nil {
		return *m.SuppressSuggestion
	}
	return Default_Context_SuppressSuggestion
}

func (m *Context) GetInputFieldType() Context_InputFieldType {
	if m != nil && m.InputFieldType != nil {
		return *m.InputFieldType
	}
	return Context_NORMAL
}

func (m *Context) GetRevision() int32 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return Default_Context_Revision
}

func (m *Context) GetExperimentalFeatures() []string {
	if m != nil {
		return m.ExperimentalFeatures
	}
	return nil
}

// Clients' capability.
// Users cannot modify this.
// The server has to obey this capability.
type Capability struct {
	TextDeletion     *Capability_TextDeletionCapabilityType `protobuf:"varint,1,opt,name=text_deletion,json=textDeletion,enum=commands.Capability_TextDeletionCapabilityType,def=0" json:"text_deletion,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *Capability) Reset()                    { *m = Capability{} }
func (m *Capability) String() string            { return proto.CompactTextString(m) }
func (*Capability) ProtoMessage()               {}
func (*Capability) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

const Default_Capability_TextDeletion Capability_TextDeletionCapabilityType = Capability_NO_TEXT_DELETION_CAPABILITY

func (m *Capability) GetTextDeletion() Capability_TextDeletionCapabilityType {
	if m != nil && m.TextDeletion != nil {
		return *m.TextDeletion
	}
	return Default_Capability_TextDeletion
}

// Clients' request to the server.
// Users cannot modify this.
// In the future each request may be able to be overwirtten by Config.
// The server does not have to obey this request.
type Request struct {
	// Enable zero query suggestion.
	ZeroQuerySuggestion *bool `protobuf:"varint,1,opt,name=zero_query_suggestion,json=zeroQuerySuggestion,def=0" json:"zero_query_suggestion,omitempty"`
	// Conversion's candidate includes suggestion, prediction and conversion.
	MixedConversion *bool `protobuf:"varint,2,opt,name=mixed_conversion,json=mixedConversion,def=0" json:"mixed_conversion,omitempty"`
	// Use special Romanji table.
	SpecialRomanjiTable *Request_SpecialRomanjiTable `protobuf:"varint,4,opt,name=special_romanji_table,json=specialRomanjiTable,enum=commands.Request_SpecialRomanjiTable,def=0" json:"special_romanji_table,omitempty"`
	SpaceOnAlphanumeric *Request_SpaceOnAlphanumeric `protobuf:"varint,6,opt,name=space_on_alphanumeric,json=spaceOnAlphanumeric,enum=commands.Request_SpaceOnAlphanumeric,def=0" json:"space_on_alphanumeric,omitempty"`
	// Keyboard name for touch devices.
	// For example, "TWELVE_KEY_TOGGLE_KANA", "QWERTY_KANA_NUMBER".
	// It is used to analyze touch event usage stats.
	KeyboardName *string `protobuf:"bytes,7,opt,name=keyboard_name,json=keyboardName" json:"keyboard_name,omitempty"`
	// Enables Composer's input mode auto updating by using surrounding text.
	// For example, when a composition string is "ad", a carret is at the end,
	// and a user selects HIRAGANA mode, if the user moves the carret to between
	// "a" and "d" the mode will be automatically switch to ASCII (temporarily).
	// See details in the Composer::UpdateInputMode.
	UpdateInputModeFromSurroundingText *bool `protobuf:"varint,8,opt,name=update_input_mode_from_surrounding_text,json=updateInputModeFromSurroundingText,def=1" json:"update_input_mode_from_surrounding_text,omitempty"`
	// Enables Kana-modifier-insensitive conversion as follows:
	// 1) Voiced/Semi-voiced kana will be hit by non-modified kana.
	//    e.g.) "ば" and "ぱ" will be hit by key "は".
	// 2) Geminate consonant "っ" will be hit by non-modified kana "つ".
	// 3) Palatalized kana will be hit by non-modified kana.
	//    e.g.) "ゃ" will be hit by key "や".
	// Here is an example of the search: "学校" ("がっこう") will be hit
	// by "かつこう".
	KanaModifierInsensitiveConversion *bool `protobuf:"varint,9,opt,name=kana_modifier_insensitive_conversion,json=kanaModifierInsensitiveConversion,def=0" json:"kana_modifier_insensitive_conversion,omitempty"`
	// Enables Auto partial suggestion.
	// For Auto partial suggestion, we can see first segment only candidates
	// adding to normal realtime conversion suggestion results.
	// If we commit that candidate, we will show suggestions for remaining part
	// of key.
	//
	// Note: This feature can be enabled only for mobile due to UX design.
	AutoPartialSuggestion *bool `protobuf:"varint,10,opt,name=auto_partial_suggestion,json=autoPartialSuggestion,def=0" json:"auto_partial_suggestion,omitempty"`
	// By default, UNICODE emoji is available.
	AvailableEmojiCarrier *int32 `protobuf:"varint,11,opt,name=available_emoji_carrier,json=availableEmojiCarrier,def=1" json:"available_emoji_carrier,omitempty"`
	// By default, Emoji rewriter works on conversion mode only.
	EmojiRewriterCapability *int32                              `protobuf:"varint,12,opt,name=emoji_rewriter_capability,json=emojiRewriterCapability,def=1" json:"emoji_rewriter_capability,omitempty"`
	CrossingEdgeBehavior    *Request_CrossingEdgeBehavior       `protobuf:"varint,13,opt,name=crossing_edge_behavior,json=crossingEdgeBehavior,enum=commands.Request_CrossingEdgeBehavior,def=0" json:"crossing_edge_behavior,omitempty"`
	LanguageAwareInput      *Request_LanguageAwareInputBehavior `protobuf:"varint,14,opt,name=language_aware_input,json=languageAwareInput,enum=commands.Request_LanguageAwareInputBehavior,def=0" json:"language_aware_input,omitempty"`
	// Page size of the candidate list.
	CandidatePageSize *int32 `protobuf:"varint,15,opt,name=candidate_page_size,json=candidatePageSize,def=9" json:"candidate_page_size,omitempty"`
	// The maximum limit of the candidates size.
	// If not set, converter doesn't limit the size.
	// NOTE: Each segment has at least one candidate and meta candidates even if
	//       this value is set to 0.
	CandidatesSizeLimit *int32 `protobuf:"varint,16,opt,name=candidates_size_limit,json=candidatesSizeLimit" json:"candidates_size_limit,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

const Default_Request_ZeroQuerySuggestion bool = false
const Default_Request_MixedConversion bool = false
const Default_Request_SpecialRomanjiTable Request_SpecialRomanjiTable = Request_DEFAULT_TABLE
const Default_Request_SpaceOnAlphanumeric Request_SpaceOnAlphanumeric = Request_SPACE_OR_CONVERT_KEEPING_COMPOSITION
const Default_Request_UpdateInputModeFromSurroundingText bool = true
const Default_Request_KanaModifierInsensitiveConversion bool = false
const Default_Request_AutoPartialSuggestion bool = false
const Default_Request_AvailableEmojiCarrier int32 = 1
const Default_Request_EmojiRewriterCapability int32 = 1
const Default_Request_CrossingEdgeBehavior Request_CrossingEdgeBehavior = Request_DO_NOTHING
const Default_Request_LanguageAwareInput Request_LanguageAwareInputBehavior = Request_DEFAULT_LANGUAGE_AWARE_BEHAVIOR
const Default_Request_CandidatePageSize int32 = 9

func (m *Request) GetZeroQuerySuggestion() bool {
	if m != nil && m.ZeroQuerySuggestion != nil {
		return *m.ZeroQuerySuggestion
	}
	return Default_Request_ZeroQuerySuggestion
}

func (m *Request) GetMixedConversion() bool {
	if m != nil && m.MixedConversion != nil {
		return *m.MixedConversion
	}
	return Default_Request_MixedConversion
}

func (m *Request) GetSpecialRomanjiTable() Request_SpecialRomanjiTable {
	if m != nil && m.SpecialRomanjiTable != nil {
		return *m.SpecialRomanjiTable
	}
	return Default_Request_SpecialRomanjiTable
}

func (m *Request) GetSpaceOnAlphanumeric() Request_SpaceOnAlphanumeric {
	if m != nil && m.SpaceOnAlphanumeric != nil {
		return *m.SpaceOnAlphanumeric
	}
	return Default_Request_SpaceOnAlphanumeric
}

func (m *Request) GetKeyboardName() string {
	if m != nil && m.KeyboardName != nil {
		return *m.KeyboardName
	}
	return ""
}

func (m *Request) GetUpdateInputModeFromSurroundingText() bool {
	if m != nil && m.UpdateInputModeFromSurroundingText != nil {
		return *m.UpdateInputModeFromSurroundingText
	}
	return Default_Request_UpdateInputModeFromSurroundingText
}

func (m *Request) GetKanaModifierInsensitiveConversion() bool {
	if m != nil && m.KanaModifierInsensitiveConversion != nil {
		return *m.KanaModifierInsensitiveConversion
	}
	return Default_Request_KanaModifierInsensitiveConversion
}

func (m *Request) GetAutoPartialSuggestion() bool {
	if m != nil && m.AutoPartialSuggestion != nil {
		return *m.AutoPartialSuggestion
	}
	return Default_Request_AutoPartialSuggestion
}

func (m *Request) GetAvailableEmojiCarrier() int32 {
	if m != nil && m.AvailableEmojiCarrier != nil {
		return *m.AvailableEmojiCarrier
	}
	return Default_Request_AvailableEmojiCarrier
}

func (m *Request) GetEmojiRewriterCapability() int32 {
	if m != nil && m.EmojiRewriterCapability != nil {
		return *m.EmojiRewriterCapability
	}
	return Default_Request_EmojiRewriterCapability
}

func (m *Request) GetCrossingEdgeBehavior() Request_CrossingEdgeBehavior {
	if m != nil && m.CrossingEdgeBehavior != nil {
		return *m.CrossingEdgeBehavior
	}
	return Default_Request_CrossingEdgeBehavior
}

func (m *Request) GetLanguageAwareInput() Request_LanguageAwareInputBehavior {
	if m != nil && m.LanguageAwareInput != nil {
		return *m.LanguageAwareInput
	}
	return Default_Request_LanguageAwareInput
}

func (m *Request) GetCandidatePageSize() int32 {
	if m != nil && m.CandidatePageSize != nil {
		return *m.CandidatePageSize
	}
	return Default_Request_CandidatePageSize
}

func (m *Request) GetCandidatesSizeLimit() int32 {
	if m != nil && m.CandidatesSizeLimit != nil {
		return *m.CandidatesSizeLimit
	}
	return 0
}

// Note there is another ApplicationInfo inside RendererCommand.
// Since Input is not using nested message, define ApplicationInfo here.
type ApplicationInfo struct {
	ProcessId *uint32 `protobuf:"varint,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	ThreadId  *uint32 `protobuf:"varint,2,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	// The time difference between local time and UTC time in seconds.
	// This field is not supported except for NaCl.
	// We use this field in NaCl Mozc because we can't know the local timezone in
	// NaCl environment.
	TimezoneOffset   *int32 `protobuf:"varint,3,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ApplicationInfo) Reset()                    { *m = ApplicationInfo{} }
func (m *ApplicationInfo) String() string            { return proto.CompactTextString(m) }
func (*ApplicationInfo) ProtoMessage()               {}
func (*ApplicationInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ApplicationInfo) GetProcessId() uint32 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *ApplicationInfo) GetThreadId() uint32 {
	if m != nil && m.ThreadId != nil {
		return *m.ThreadId
	}
	return 0
}

func (m *ApplicationInfo) GetTimezoneOffset() int32 {
	if m != nil && m.TimezoneOffset != nil {
		return *m.TimezoneOffset
	}
	return 0
}

type Input struct {
	Type *Input_CommandType `protobuf:"varint,1,req,name=type,enum=commands.Input_CommandType" json:"type,omitempty"`
	// Session ID created by CREATE_SESSION.
	Id *uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// Key combinations used for SEND_KEY or TEST_SEND_KEY.
	Key *KeyEvent `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// Command sent to the session layer used with SEND_COMMAND.
	Command *SessionCommand `protobuf:"bytes,4,opt,name=command" json:"command,omitempty"`
	// Input config
	Config *mozc_config.Config `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
	// Context data
	Context *Context `protobuf:"bytes,6,opt,name=context" json:"context,omitempty"`
	// Client capability
	Capability *Capability `protobuf:"bytes,7,opt,name=capability" json:"capability,omitempty"`
	// Application information, like process id.
	// Server may be able to change the behavior by seeing the
	// the program name.
	ApplicationInfo *ApplicationInfo `protobuf:"bytes,8,opt,name=application_info,json=applicationInfo" json:"application_info,omitempty"`
	// Client request
	Request *Request `protobuf:"bytes,9,opt,name=request" json:"request,omitempty"`
	// If the command is INSERT_TO_STORAGE, all the fields must be filled.
	// If READ_ALL_FROM_STORAGE, key and value fields are ignored.
	StorageEntry          *GenericStorageEntry                        `protobuf:"bytes,10,opt,name=storage_entry,json=storageEntry" json:"storage_entry,omitempty"`
	TouchEvents           []*Input_TouchEvent                         `protobuf:"bytes,12,rep,name=touch_events,json=touchEvents" json:"touch_events,omitempty"`
	UserDictionaryCommand *mozc_user_dictionary.UserDictionaryCommand `protobuf:"bytes,13,opt,name=user_dictionary_command,json=userDictionaryCommand" json:"user_dictionary_command,omitempty"`
	// A flag to control if the server should return suggest-results or not.
	// If this is set to false, regardless of other configurations,
	// the server won't return suggestion results.
	// This is set to true by default.
	// Note that even if this flag is set to false, when a suggestion is shown
	// in the previous phase, it is possible from the client to submit it.
	// This works only for suggestions for the key insersion, but not for
	// others commands, such as predictions or conversions.
	// This flag is used for the performance improvement in terms of the
	// latency.  If you want to suppress the suggestions for the UX improment,
	// you may want to use suppress_suggestion in the Context message.
	RequestSuggestion   *bool                `protobuf:"varint,14,opt,name=request_suggestion,json=requestSuggestion,def=1" json:"request_suggestion,omitempty"`
	EngineReloadRequest *EngineReloadRequest `protobuf:"bytes,15,opt,name=engine_reload_request,json=engineReloadRequest" json:"engine_reload_request,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

const Default_Input_RequestSuggestion bool = true

func (m *Input) GetType() Input_CommandType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Input_NONE
}

func (m *Input) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Input) GetKey() *KeyEvent {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Input) GetCommand() *SessionCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Input) GetConfig() *mozc_config.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Input) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Input) GetCapability() *Capability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func (m *Input) GetApplicationInfo() *ApplicationInfo {
	if m != nil {
		return m.ApplicationInfo
	}
	return nil
}

func (m *Input) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Input) GetStorageEntry() *GenericStorageEntry {
	if m != nil {
		return m.StorageEntry
	}
	return nil
}

func (m *Input) GetTouchEvents() []*Input_TouchEvent {
	if m != nil {
		return m.TouchEvents
	}
	return nil
}

func (m *Input) GetUserDictionaryCommand() *mozc_user_dictionary.UserDictionaryCommand {
	if m != nil {
		return m.UserDictionaryCommand
	}
	return nil
}

func (m *Input) GetRequestSuggestion() bool {
	if m != nil && m.RequestSuggestion != nil {
		return *m.RequestSuggestion
	}
	return Default_Input_RequestSuggestion
}

func (m *Input) GetEngineReloadRequest() *EngineReloadRequest {
	if m != nil {
		return m.EngineReloadRequest
	}
	return nil
}

type Input_TouchPosition struct {
	Action *Input_TouchAction `protobuf:"varint,1,opt,name=action,enum=commands.Input_TouchAction" json:"action,omitempty"`
	// x, y potision: keyboad left-top is (0, 0), right-bottom is (1, 1).
	X *float32 `protobuf:"fixed32,2,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,3,opt,name=y" json:"y,omitempty"`
	// timestamp (in ms) is set to zero when the touch event starts.
	Timestamp        *int64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Input_TouchPosition) Reset()                    { *m = Input_TouchPosition{} }
func (m *Input_TouchPosition) String() string            { return proto.CompactTextString(m) }
func (*Input_TouchPosition) ProtoMessage()               {}
func (*Input_TouchPosition) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 0} }

func (m *Input_TouchPosition) GetAction() Input_TouchAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Input_TOUCH_DOWN
}

func (m *Input_TouchPosition) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Input_TouchPosition) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *Input_TouchPosition) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

// TouchEvent contains source_id and stroke.
// Touch_events contain all key touch event.
// Statistical information are collected for each source_id
// by SessionUsageObserver.
type Input_TouchEvent struct {
	// source_id specifies the user action such as "X button pressed".
	// It must be unique within the same keyboard_name,
	// which is set in Request message.
	SourceId         *uint32                `protobuf:"varint,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Stroke           []*Input_TouchPosition `protobuf:"bytes,2,rep,name=stroke" json:"stroke,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Input_TouchEvent) Reset()                    { *m = Input_TouchEvent{} }
func (m *Input_TouchEvent) String() string            { return proto.CompactTextString(m) }
func (*Input_TouchEvent) ProtoMessage()               {}
func (*Input_TouchEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 1} }

func (m *Input_TouchEvent) GetSourceId() uint32 {
	if m != nil && m.SourceId != nil {
		return *m.SourceId
	}
	return 0
}

func (m *Input_TouchEvent) GetStroke() []*Input_TouchPosition {
	if m != nil {
		return m.Stroke
	}
	return nil
}

// Result contains data to be submitted to the host application by the
// ime client.
type Result struct {
	Type *Result_ResultType `protobuf:"varint,1,req,name=type,enum=commands.Result_ResultType" json:"type,omitempty"`
	// The result of conversion.
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	// Source of the value.  It is almost always the reading of the value.
	Key *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// The caret position after the result submission.
	// "0" means the end of the result, and a positive value means moving forward
	// and a negative value backward.
	// e.g.) "-s", where s is the length of value, means the caret position
	// after the committing should be the beginning of the committed value.
	CursorOffset     *int32 `protobuf:"varint,4,opt,name=cursor_offset,json=cursorOffset,def=0" json:"cursor_offset,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

const Default_Result_CursorOffset int32 = 0

func (m *Result) GetType() Result_ResultType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Result_NONE
}

func (m *Result) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Result) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Result) GetCursorOffset() int32 {
	if m != nil && m.CursorOffset != nil {
		return *m.CursorOffset
	}
	return Default_Result_CursorOffset
}

// Preedit represents a composition data, which is rendered on the
// host application by the ime client.  On Japanese IME, the both
// Preedit and Conversion statuses are represented by this message.
type Preedit struct {
	Cursor  *uint32            `protobuf:"varint,1,req,name=cursor" json:"cursor,omitempty"`
	Segment []*Preedit_Segment `protobuf:"group,2,rep,name=Segment,json=segment" json:"segment,omitempty"`
	// The position of the first segment whose annotation is 'HIGHLIGHT'. Not set
	// if there are no such segments.
	HighlightedPosition *uint32 `protobuf:"varint,3,opt,name=highlighted_position,json=highlightedPosition" json:"highlighted_position,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *Preedit) Reset()                    { *m = Preedit{} }
func (m *Preedit) String() string            { return proto.CompactTextString(m) }
func (*Preedit) ProtoMessage()               {}
func (*Preedit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Preedit) GetCursor() uint32 {
	if m != nil && m.Cursor != nil {
		return *m.Cursor
	}
	return 0
}

func (m *Preedit) GetSegment() []*Preedit_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *Preedit) GetHighlightedPosition() uint32 {
	if m != nil && m.HighlightedPosition != nil {
		return *m.HighlightedPosition
	}
	return 0
}

// The string data of Preedit is separated into Segment messages
// presenting the ime server's status.  On Preedit status of
// Japanese IME, there are up to three segments; left side chars of
// cursor, forcused char, right side chars of cursor.  On Conversion
// status of Japanese IME, the messages literally represent the
// segments of the conversion.
type Preedit_Segment struct {
	Annotation *Preedit_Segment_Annotation `protobuf:"varint,3,req,name=annotation,enum=commands.Preedit_Segment_Annotation" json:"annotation,omitempty"`
	Value      *string                     `protobuf:"bytes,4,req,name=value" json:"value,omitempty"`
	// The length of value in characters.  This is NOT a number in
	// bytes or logical character units.  So, the length of "abc" and
	// "あいう" should be 3, "ヴ" should be 1 and "ｳﾞ" and "う゛"
	// should be 2.
	ValueLength *uint32 `protobuf:"varint,5,req,name=value_length,json=valueLength" json:"value_length,omitempty"`
	// Source of the value.  It is almost always the reading of the value.
	Key              *string `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Preedit_Segment) Reset()                    { *m = Preedit_Segment{} }
func (m *Preedit_Segment) String() string            { return proto.CompactTextString(m) }
func (*Preedit_Segment) ProtoMessage()               {}
func (*Preedit_Segment) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9, 0} }

func (m *Preedit_Segment) GetAnnotation() Preedit_Segment_Annotation {
	if m != nil && m.Annotation != nil {
		return *m.Annotation
	}
	return Preedit_Segment_NONE
}

func (m *Preedit_Segment) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Preedit_Segment) GetValueLength() uint32 {
	if m != nil && m.ValueLength != nil {
		return *m.ValueLength
	}
	return 0
}

func (m *Preedit_Segment) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type Status struct {
	// Whether IME is ON or OFF
	Activated *bool `protobuf:"varint,1,opt,name=activated" json:"activated,omitempty"`
	// Visible composition mode when IME is activated. This mode may come from a
	// temporary composition mode. See |comeback_mode|.
	// TODO(yukawa): Rename this field to "visible_mode".
	Mode *CompositionMode `protobuf:"varint,2,opt,name=mode,enum=commands.CompositionMode" json:"mode,omitempty"`
	// True composition mode that is suitable for system global and permanent
	// composition mode. When a temporary composition mode exists,
	// |comeback_mode| can be different from |mode|.
	// TODO(yukawa): Use more appropriate name.
	ComebackMode     *CompositionMode `protobuf:"varint,3,opt,name=comeback_mode,json=comebackMode,enum=commands.CompositionMode" json:"comeback_mode,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Status) GetActivated() bool {
	if m != nil && m.Activated != nil {
		return *m.Activated
	}
	return false
}

func (m *Status) GetMode() CompositionMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return CompositionMode_DIRECT
}

func (m *Status) GetComebackMode() CompositionMode {
	if m != nil && m.ComebackMode != nil {
		return *m.ComebackMode
	}
	return CompositionMode_DIRECT
}

// This message contains which characters are to be deleted by client.
// E.g. if current composition and surrounding text are
//     "この感じは漢字は"
//                ^^^^^^
// and we send DeletionRange with offset == -3 and length == 3, then they will
// be rendered like:
//     "この漢字は"
//          ^^^^^^
type DeletionRange struct {
	// Offset of start of range.
	Offset *int32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	// Length of the range.
	Length           *int32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeletionRange) Reset()                    { *m = DeletionRange{} }
func (m *DeletionRange) String() string            { return proto.CompactTextString(m) }
func (*DeletionRange) ProtoMessage()               {}
func (*DeletionRange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *DeletionRange) GetOffset() int32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *DeletionRange) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

type Output struct {
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// This variable is going to be obsolete.
	Mode       *CompositionMode `protobuf:"varint,2,opt,name=mode,enum=commands.CompositionMode" json:"mode,omitempty"`
	Consumed   *bool            `protobuf:"varint,3,opt,name=consumed" json:"consumed,omitempty"`
	Result     *Result          `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Preedit    *Preedit         `protobuf:"bytes,5,opt,name=preedit" json:"preedit,omitempty"`
	Candidates *Candidates      `protobuf:"bytes,6,opt,name=candidates" json:"candidates,omitempty"`
	Key        *KeyEvent        `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	// when URL is non empty, UI can open the page with a browser,
	// after finishing the all rendering part.
	// We are using this feature for bug-report system.
	Url *string `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	// Output config
	Config        *mozc_config.Config   `protobuf:"bytes,9,opt,name=config" json:"config,omitempty"`
	PreeditMethod *Output_PreeditMethod `protobuf:"varint,10,opt,name=preedit_method,json=preeditMethod,enum=commands.Output_PreeditMethod,def=0" json:"preedit_method,omitempty"`
	ErrorCode     *Output_ErrorCode     `protobuf:"varint,11,opt,name=error_code,json=errorCode,enum=commands.Output_ErrorCode,def=0" json:"error_code,omitempty"`
	// The current IME status.
	Status *Status `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`
	// All flatten candidate words stored in 1D array.  This value is
	// filled only when the content is changed.
	AllCandidateWords *CandidateList `protobuf:"bytes,14,opt,name=all_candidate_words,json=allCandidateWords" json:"all_candidate_words,omitempty"`
	// Range of characters to be deleted by client.
	DeletionRange  *DeletionRange   `protobuf:"bytes,16,opt,name=deletion_range,json=deletionRange" json:"deletion_range,omitempty"`
	LaunchToolMode *Output_ToolMode `protobuf:"varint,17,opt,name=launch_tool_mode,json=launchToolMode,enum=commands.Output_ToolMode,def=0" json:"launch_tool_mode,omitempty"`
	Callback       *Output_Callback `protobuf:"bytes,18,opt,name=callback" json:"callback,omitempty"`
	// Used when the command is READ_ALL_FROM_STORAGE.
	StorageEntry                *GenericStorageEntry                              `protobuf:"bytes,19,opt,name=storage_entry,json=storageEntry" json:"storage_entry,omitempty"`
	UserDictionaryCommandStatus *mozc_user_dictionary.UserDictionaryCommandStatus `protobuf:"bytes,21,opt,name=user_dictionary_command_status,json=userDictionaryCommandStatus" json:"user_dictionary_command_status,omitempty"`
	EngineReloadResponse        *EngineReloadResponse                             `protobuf:"bytes,22,opt,name=engine_reload_response,json=engineReloadResponse" json:"engine_reload_response,omitempty"`
	XXX_unrecognized            []byte                                            `json:"-"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

const Default_Output_PreeditMethod Output_PreeditMethod = Output_ASCII
const Default_Output_ErrorCode Output_ErrorCode = Output_SESSION_SUCCESS
const Default_Output_LaunchToolMode Output_ToolMode = Output_NO_TOOL

func (m *Output) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Output) GetMode() CompositionMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return CompositionMode_DIRECT
}

func (m *Output) GetConsumed() bool {
	if m != nil && m.Consumed != nil {
		return *m.Consumed
	}
	return false
}

func (m *Output) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Output) GetPreedit() *Preedit {
	if m != nil {
		return m.Preedit
	}
	return nil
}

func (m *Output) GetCandidates() *Candidates {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *Output) GetKey() *KeyEvent {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Output) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *Output) GetConfig() *mozc_config.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Output) GetPreeditMethod() Output_PreeditMethod {
	if m != nil && m.PreeditMethod != nil {
		return *m.PreeditMethod
	}
	return Default_Output_PreeditMethod
}

func (m *Output) GetErrorCode() Output_ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_Output_ErrorCode
}

func (m *Output) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Output) GetAllCandidateWords() *CandidateList {
	if m != nil {
		return m.AllCandidateWords
	}
	return nil
}

func (m *Output) GetDeletionRange() *DeletionRange {
	if m != nil {
		return m.DeletionRange
	}
	return nil
}

func (m *Output) GetLaunchToolMode() Output_ToolMode {
	if m != nil && m.LaunchToolMode != nil {
		return *m.LaunchToolMode
	}
	return Default_Output_LaunchToolMode
}

func (m *Output) GetCallback() *Output_Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

func (m *Output) GetStorageEntry() *GenericStorageEntry {
	if m != nil {
		return m.StorageEntry
	}
	return nil
}

func (m *Output) GetUserDictionaryCommandStatus() *mozc_user_dictionary.UserDictionaryCommandStatus {
	if m != nil {
		return m.UserDictionaryCommandStatus
	}
	return nil
}

func (m *Output) GetEngineReloadResponse() *EngineReloadResponse {
	if m != nil {
		return m.EngineReloadResponse
	}
	return nil
}

// Callback request to the client.
type Output_Callback struct {
	// Callback command to be sent from the client to the server.  The
	// optional values such as id and composition_mode can be modified
	// or added by the client.
	SessionCommand *SessionCommand `protobuf:"bytes,1,opt,name=session_command,json=sessionCommand" json:"session_command,omitempty"`
	// Callback command should be sent after this delay.
	DelayMillisec    *uint32 `protobuf:"varint,2,opt,name=delay_millisec,json=delayMillisec" json:"delay_millisec,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Output_Callback) Reset()                    { *m = Output_Callback{} }
func (m *Output_Callback) String() string            { return proto.CompactTextString(m) }
func (*Output_Callback) ProtoMessage()               {}
func (*Output_Callback) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 0} }

func (m *Output_Callback) GetSessionCommand() *SessionCommand {
	if m != nil {
		return m.SessionCommand
	}
	return nil
}

func (m *Output_Callback) GetDelayMillisec() uint32 {
	if m != nil && m.DelayMillisec != nil {
		return *m.DelayMillisec
	}
	return 0
}

type Command struct {
	Input            *Input  `protobuf:"bytes,1,req,name=input" json:"input,omitempty"`
	Output           *Output `protobuf:"bytes,2,req,name=output" json:"output,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *Command) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Command) GetOutput() *Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type CommandList struct {
	// This message is used for unittest.
	Commands         []*Command `protobuf:"bytes,1,rep,name=commands" json:"commands,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CommandList) Reset()                    { *m = CommandList{} }
func (m *CommandList) String() string            { return proto.CompactTextString(m) }
func (*CommandList) ProtoMessage()               {}
func (*CommandList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *CommandList) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyEvent)(nil), "commands.KeyEvent")
	proto.RegisterType((*KeyEvent_ProbableKeyEvent)(nil), "commands.KeyEvent.ProbableKeyEvent")
	proto.RegisterType((*GenericStorageEntry)(nil), "commands.GenericStorageEntry")
	proto.RegisterType((*SessionCommand)(nil), "commands.SessionCommand")
	proto.RegisterType((*Context)(nil), "commands.Context")
	proto.RegisterType((*Capability)(nil), "commands.Capability")
	proto.RegisterType((*Request)(nil), "commands.Request")
	proto.RegisterType((*ApplicationInfo)(nil), "commands.ApplicationInfo")
	proto.RegisterType((*Input)(nil), "commands.Input")
	proto.RegisterType((*Input_TouchPosition)(nil), "commands.Input.TouchPosition")
	proto.RegisterType((*Input_TouchEvent)(nil), "commands.Input.TouchEvent")
	proto.RegisterType((*Result)(nil), "commands.Result")
	proto.RegisterType((*Preedit)(nil), "commands.Preedit")
	proto.RegisterType((*Preedit_Segment)(nil), "commands.Preedit.Segment")
	proto.RegisterType((*Status)(nil), "commands.Status")
	proto.RegisterType((*DeletionRange)(nil), "commands.DeletionRange")
	proto.RegisterType((*Output)(nil), "commands.Output")
	proto.RegisterType((*Output_Callback)(nil), "commands.Output.Callback")
	proto.RegisterType((*Command)(nil), "commands.Command")
	proto.RegisterType((*CommandList)(nil), "commands.CommandList")
	proto.RegisterEnum("commands.CompositionMode", CompositionMode_name, CompositionMode_value)
	proto.RegisterEnum("commands.KeyEvent_SpecialKey", KeyEvent_SpecialKey_name, KeyEvent_SpecialKey_value)
	proto.RegisterEnum("commands.KeyEvent_ModifierKey", KeyEvent_ModifierKey_name, KeyEvent_ModifierKey_value)
	proto.RegisterEnum("commands.KeyEvent_InputStyle", KeyEvent_InputStyle_name, KeyEvent_InputStyle_value)
	proto.RegisterEnum("commands.GenericStorageEntry_StorageType", GenericStorageEntry_StorageType_name, GenericStorageEntry_StorageType_value)
	proto.RegisterEnum("commands.SessionCommand_CommandType", SessionCommand_CommandType_name, SessionCommand_CommandType_value)
	proto.RegisterEnum("commands.SessionCommand_UsageStatsEvent", SessionCommand_UsageStatsEvent_name, SessionCommand_UsageStatsEvent_value)
	proto.RegisterEnum("commands.Context_InputFieldType", Context_InputFieldType_name, Context_InputFieldType_value)
	proto.RegisterEnum("commands.Capability_TextDeletionCapabilityType", Capability_TextDeletionCapabilityType_name, Capability_TextDeletionCapabilityType_value)
	proto.RegisterEnum("commands.Request_SpecialRomanjiTable", Request_SpecialRomanjiTable_name, Request_SpecialRomanjiTable_value)
	proto.RegisterEnum("commands.Request_SpaceOnAlphanumeric", Request_SpaceOnAlphanumeric_name, Request_SpaceOnAlphanumeric_value)
	proto.RegisterEnum("commands.Request_EmojiCarrierType", Request_EmojiCarrierType_name, Request_EmojiCarrierType_value)
	proto.RegisterEnum("commands.Request_RewriterCapability", Request_RewriterCapability_name, Request_RewriterCapability_value)
	proto.RegisterEnum("commands.Request_CrossingEdgeBehavior", Request_CrossingEdgeBehavior_name, Request_CrossingEdgeBehavior_value)
	proto.RegisterEnum("commands.Request_LanguageAwareInputBehavior", Request_LanguageAwareInputBehavior_name, Request_LanguageAwareInputBehavior_value)
	proto.RegisterEnum("commands.Input_CommandType", Input_CommandType_name, Input_CommandType_value)
	proto.RegisterEnum("commands.Input_TouchAction", Input_TouchAction_name, Input_TouchAction_value)
	proto.RegisterEnum("commands.Result_ResultType", Result_ResultType_name, Result_ResultType_value)
	proto.RegisterEnum("commands.Preedit_Segment_Annotation", Preedit_Segment_Annotation_name, Preedit_Segment_Annotation_value)
	proto.RegisterEnum("commands.Output_PreeditMethod", Output_PreeditMethod_name, Output_PreeditMethod_value)
	proto.RegisterEnum("commands.Output_ErrorCode", Output_ErrorCode_name, Output_ErrorCode_value)
	proto.RegisterEnum("commands.Output_ToolMode", Output_ToolMode_name, Output_ToolMode_value)
}

func init() { proto.RegisterFile("mozc/commands/commands.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 4828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4f, 0x77, 0xdb, 0x48,
	0x72, 0x37, 0x29, 0x4a, 0xa2, 0x8a, 0x22, 0xd5, 0x6a, 0x49, 0x36, 0x2d, 0xff, 0x19, 0x0d, 0xc7,
	0x33, 0xa3, 0x99, 0xd9, 0x91, 0x6d, 0xd9, 0x9e, 0xb1, 0xbd, 0x3b, 0xb3, 0x0b, 0x11, 0xa0, 0x08,
	0x09, 0x04, 0x38, 0x0d, 0xd0, 0x5a, 0x6d, 0x0e, 0xbd, 0x30, 0x09, 0x4b, 0x5c, 0x93, 0x84, 0x16,
	0x00, 0x3d, 0x23, 0xbf, 0x97, 0xec, 0x9c, 0xf3, 0x72, 0xc8, 0x65, 0x5f, 0x3e, 0x45, 0x0e, 0x79,
	0xf9, 0x06, 0x39, 0xe5, 0x98, 0xf7, 0x92, 0x4b, 0xde, 0xcb, 0x87, 0xc8, 0x25, 0x87, 0xdc, 0xf2,
	0xaa, 0x1b, 0x00, 0x41, 0xea, 0xcf, 0xec, 0xdc, 0x72, 0x42, 0x77, 0xd5, 0xaf, 0xff, 0x55, 0x55,
	0x77, 0x55, 0x57, 0x03, 0xee, 0x0e, 0xfd, 0xf7, 0xdd, 0x87, 0x5d, 0x7f, 0x38, 0x74, 0x47, 0xbd,
	0x30, 0x2d, 0xec, 0x9c, 0x05, 0x7e, 0xe4, 0xd3, 0x62, 0x52, 0xdf, 0xbc, 0x3f, 0x83, 0x73, 0x47,
	0xbd, 0x7e, 0xcf, 0x8d, 0xbc, 0x18, 0xb9, 0x59, 0x8d, 0xf9, 0xa3, 0x37, 0xfd, 0x93, 0xf8, 0x13,
	0x73, 0x6a, 0xd3, 0x2d, 0xbd, 0xd1, 0x49, 0x7f, 0xe4, 0xf1, 0xd7, 0xe3, 0xfe, 0xa0, 0xe7, 0x05,
	0x31, 0x66, 0x57, 0x60, 0xc6, 0xa1, 0x17, 0xf0, 0x5e, 0xbf, 0x1b, 0xf5, 0xfd, 0x91, 0x1b, 0x9c,
	0xcf, 0xd6, 0x79, 0x18, 0xf9, 0x81, 0x7b, 0xe2, 0xc9, 0x36, 0xb5, 0x7f, 0xae, 0x40, 0xf1, 0xd0,
	0x3b, 0xd7, 0xde, 0x79, 0xa3, 0x88, 0xde, 0x86, 0xe2, 0x5b, 0xef, 0x9c, 0x77, 0xfd, 0x9e, 0x57,
	0xcd, 0x6d, 0xe5, 0xb6, 0xcb, 0x6c, 0xf1, 0xad, 0x77, 0x5e, 0xf7, 0x7b, 0x1e, 0xbd, 0x0b, 0x4b,
	0x43, 0xbf, 0xd7, 0x7f, 0xd3, 0xf7, 0x82, 0xb0, 0x9a, 0x17, 0xbc, 0x09, 0x81, 0x7e, 0x0b, 0xa5,
	0xf0, 0xcc, 0xeb, 0xf6, 0xdd, 0x01, 0x7f, 0xeb, 0x9d, 0x57, 0xe7, 0xb6, 0x72, 0xdb, 0x95, 0xdd,
	0x7b, 0x3b, 0xa9, 0x1c, 0x92, 0x11, 0x76, 0x6c, 0x89, 0x3a, 0xf4, 0xce, 0x19, 0x84, 0x69, 0x99,
	0xd6, 0xa1, 0x9c, 0x74, 0x86, 0x1d, 0x84, 0xd5, 0xc2, 0xd6, 0xdc, 0x76, 0x65, 0xf7, 0xfe, 0x25,
	0x3d, 0xb4, 0x62, 0x1c, 0x76, 0xb1, 0x3c, 0x9c, 0x54, 0x42, 0x7a, 0x0f, 0x00, 0x67, 0x1f, 0x46,
	0x41, 0x7f, 0x74, 0x52, 0x9d, 0xdf, 0xca, 0x6d, 0x2f, 0xb1, 0xa5, 0xb7, 0xde, 0xb9, 0x2d, 0x08,
	0xf4, 0x10, 0x4a, 0xfd, 0xd1, 0xd9, 0x38, 0xe2, 0x61, 0x74, 0x3e, 0xf0, 0xaa, 0x0b, 0x57, 0xce,
	0x51, 0x47, 0x94, 0x8d, 0xa0, 0x97, 0xa5, 0x86, 0x65, 0x18, 0xd6, 0x11, 0x6f, 0x59, 0xaa, 0xc6,
	0xa0, 0x9f, 0x32, 0xe8, 0x97, 0x50, 0x18, 0xa2, 0x94, 0x16, 0x45, 0x2f, 0xb7, 0x27, 0xbd, 0xd4,
	0xfd, 0xe1, 0x99, 0x1f, 0xf6, 0x51, 0xd8, 0x2d, 0xbf, 0xe7, 0x31, 0x01, 0xa3, 0xdf, 0x01, 0x3d,
	0x0b, 0xfc, 0xd7, 0xee, 0xeb, 0x81, 0x87, 0xeb, 0xe3, 0x1e, 0x0e, 0x54, 0x2d, 0x6e, 0xcd, 0x6d,
	0x97, 0x76, 0x3f, 0xba, 0x64, 0x0a, 0xed, 0x18, 0x9c, 0x10, 0x18, 0x39, 0x9b, 0xa1, 0xa0, 0x42,
	0xdc, 0x6e, 0xd4, 0x7f, 0xe7, 0x46, 0x5e, 0xaf, 0xba, 0xb4, 0x95, 0xdb, 0x2e, 0xb2, 0x09, 0x61,
	0xf3, 0x3f, 0x72, 0x40, 0x66, 0x3b, 0xb9, 0x4e, 0xbd, 0xff, 0x2f, 0x14, 0xb8, 0x05, 0x25, 0xb9,
	0xcc, 0xfe, 0xa0, 0x1f, 0x9d, 0x57, 0x61, 0x2b, 0xb7, 0x9d, 0x63, 0x59, 0x52, 0xed, 0xcf, 0x8b,
	0x00, 0x93, 0x19, 0xd0, 0x55, 0x28, 0x9b, 0x16, 0xb7, 0xdb, 0x5a, 0x5d, 0x57, 0x8c, 0x43, 0xed,
	0x98, 0xdc, 0xa0, 0x4b, 0x30, 0xaf, 0xea, 0xfb, 0xba, 0x43, 0x72, 0x74, 0x01, 0xf2, 0x96, 0x49,
	0xf2, 0x74, 0x11, 0xe6, 0xac, 0x46, 0x83, 0xcc, 0x21, 0xcf, 0x6e, 0x2b, 0x75, 0x8d, 0x14, 0xb0,
	0xa8, 0x99, 0x8e, 0xc6, 0xc8, 0x3c, 0x2d, 0x42, 0xc1, 0xd0, 0x1a, 0x0e, 0x59, 0x40, 0x22, 0xd3,
	0xf7, 0x9b, 0x0e, 0x59, 0xc4, 0xb6, 0x9d, 0x36, 0x29, 0x22, 0x53, 0xb5, 0x8e, 0x4c, 0xb2, 0x44,
	0x01, 0x16, 0x34, 0xbb, 0xae, 0xb4, 0x35, 0x02, 0xd8, 0xa3, 0xaa, 0x19, 0xa4, 0x44, 0xcb, 0xb0,
	0xb4, 0xa7, 0xd4, 0x0f, 0x65, 0xaf, 0xcb, 0x88, 0x69, 0x6a, 0xe6, 0xa1, 0x62, 0x92, 0x32, 0x5d,
	0x86, 0x62, 0xab, 0x13, 0xd7, 0x2a, 0xd8, 0xcf, 0xa1, 0x62, 0x2a, 0x64, 0x05, 0x4b, 0x4d, 0xab,
	0xa5, 0x11, 0x82, 0xbd, 0x68, 0xa6, 0x4a, 0x56, 0xb1, 0xe0, 0x28, 0x7b, 0x84, 0xe2, 0xa8, 0x8d,
	0xc7, 0x64, 0x4d, 0x7c, 0x77, 0xc9, 0xba, 0xf8, 0x3e, 0x21, 0x1b, 0xe2, 0xfb, 0x94, 0xdc, 0x14,
	0xdf, 0x67, 0xe4, 0x96, 0xf8, 0x7e, 0x45, 0xaa, 0xe2, 0xfb, 0x35, 0xb9, 0x2d, 0xbe, 0xcf, 0xc9,
	0xa6, 0xf8, 0xbe, 0x20, 0x77, 0xb0, 0xc3, 0xc6, 0xe3, 0x47, 0xe4, 0xae, 0x2c, 0x3c, 0x26, 0xf7,
	0x64, 0x61, 0x97, 0xdc, 0xa7, 0x25, 0x58, 0x6c, 0x2b, 0xfb, 0x1a, 0xef, 0xb4, 0xc9, 0x07, 0x38,
	0x7d, 0x51, 0x11, 0x4b, 0xdc, 0xc2, 0xe9, 0xeb, 0xa6, 0xad, 0x31, 0x87, 0x7c, 0x28, 0x1b, 0x3c,
	0x21, 0x35, 0x59, 0x78, 0x4a, 0x3e, 0x92, 0x85, 0x67, 0xe4, 0x81, 0x2c, 0x7c, 0x45, 0x3e, 0x96,
	0x85, 0xaf, 0xc9, 0x27, 0xb2, 0xf0, 0x9c, 0x7c, 0x2a, 0x0b, 0x2f, 0xc8, 0xb6, 0x28, 0xec, 0x3e,
	0x22, 0x9f, 0xc9, 0xc2, 0x63, 0xf2, 0xb9, 0x2c, 0xec, 0x92, 0x2f, 0x64, 0xe1, 0x09, 0xf9, 0x85,
	0x2c, 0x3c, 0x25, 0x5f, 0xa2, 0x48, 0x34, 0xdd, 0xee, 0x90, 0x1d, 0x9c, 0x9d, 0xd9, 0x69, 0xb5,
	0x15, 0xf5, 0x11, 0x79, 0x38, 0xa9, 0x3c, 0x26, 0x8f, 0x26, 0x95, 0x5d, 0xf2, 0x78, 0x52, 0x79,
	0x42, 0x76, 0x27, 0x95, 0xa7, 0xe4, 0xc9, 0xa4, 0xf2, 0x8c, 0x3c, 0x9d, 0x54, 0xbe, 0x22, 0xcf,
	0x26, 0x95, 0xaf, 0xc9, 0x57, 0x93, 0xca, 0x73, 0xf2, 0xf5, 0xa4, 0xf2, 0x82, 0x3c, 0x97, 0x6a,
	0x33, 0x1c, 0xbd, 0x6d, 0x1c, 0x93, 0x17, 0x38, 0x45, 0x45, 0x55, 0xc9, 0x4b, 0x94, 0x94, 0xad,
	0xb5, 0x15, 0xa6, 0x38, 0x16, 0x23, 0xbf, 0x44, 0x94, 0xdd, 0xd9, 0x73, 0x98, 0x52, 0x77, 0xc8,
	0xaf, 0xb0, 0x03, 0x55, 0xab, 0xeb, 0x2d, 0xc5, 0x20, 0xdf, 0xa0, 0x10, 0x55, 0xfd, 0x95, 0xae,
	0x6a, 0xe4, 0x5b, 0x61, 0x33, 0xdf, 0x75, 0x14, 0xc3, 0x26, 0xbf, 0xa6, 0x15, 0x00, 0x47, 0xfb,
	0xad, 0xc3, 0x75, 0xb3, 0xdd, 0x71, 0xc8, 0x6f, 0xb0, 0x51, 0x53, 0x31, 0x0f, 0x95, 0xc3, 0x0e,
	0x51, 0xd0, 0xf2, 0x0e, 0x15, 0xf3, 0x40, 0x27, 0x7b, 0xd8, 0xf5, 0xa1, 0xe2, 0x28, 0xc2, 0x5a,
	0xea, 0x38, 0x6e, 0x5d, 0x69, 0xdb, 0xdc, 0xb0, 0xea, 0x87, 0x44, 0x45, 0x83, 0xef, 0x98, 0xaa,
	0xd6, 0xd0, 0x4d, 0x4d, 0xe5, 0x68, 0xf0, 0x1a, 0x36, 0xad, 0x5b, 0xad, 0x96, 0x42, 0x1a, 0xa2,
	0x68, 0x68, 0x0a, 0x23, 0xfb, 0x94, 0xc0, 0xf2, 0x2b, 0x9d, 0x39, 0x1d, 0xc5, 0xe0, 0xc2, 0xb8,
	0x9b, 0xd8, 0x34, 0xa1, 0x48, 0x23, 0xd7, 0xb3, 0x24, 0xb9, 0x19, 0x0e, 0x70, 0x96, 0x09, 0xa9,
	0xd3, 0x26, 0x87, 0xd9, 0x7e, 0x84, 0x91, 0x18, 0x74, 0x0d, 0x56, 0xcc, 0x4e, 0x2b, 0xb3, 0xe9,
	0x6c, 0xd2, 0xaa, 0xfd, 0x53, 0x0e, 0x4a, 0x99, 0x7d, 0x8d, 0x1a, 0xad, 0x3b, 0xcc, 0x20, 0x39,
	0x21, 0x41, 0xc3, 0x21, 0x79, 0xb1, 0xf9, 0x9a, 0x7a, 0xc3, 0x21, 0x05, 0xb1, 0x44, 0xed, 0x58,
	0x76, 0x58, 0x44, 0x21, 0x61, 0xad, 0xd3, 0x26, 0x04, 0x97, 0x8b, 0xd3, 0xe5, 0xa2, 0xf1, 0x16,
	0x02, 0x45, 0x15, 0x7b, 0xf8, 0x0d, 0x5d, 0x01, 0x10, 0x35, 0xd9, 0xcd, 0x8f, 0x39, 0x24, 0x88,
	0xa5, 0x48, 0xf8, 0x8f, 0x79, 0x5a, 0x81, 0x25, 0x49, 0xc0, 0x06, 0x3f, 0x16, 0x28, 0x81, 0x92,
	0xac, 0xc7, 0x4d, 0x8a, 0x74, 0x09, 0x0a, 0x28, 0x4f, 0xf2, 0x23, 0xa9, 0xbd, 0x04, 0x98, 0x9c,
	0xf4, 0x74, 0x05, 0xb2, 0x67, 0xbd, 0x3c, 0x48, 0x14, 0x9b, 0xeb, 0x36, 0xc9, 0xa1, 0x10, 0x54,
	0x9d, 0x69, 0xf5, 0x44, 0x79, 0xf9, 0xda, 0xbf, 0xe6, 0x60, 0x6d, 0xdf, 0x1b, 0x79, 0x41, 0xbf,
	0x6b, 0x4b, 0x77, 0xaa, 0x8d, 0xa2, 0xe0, 0x9c, 0x7e, 0x03, 0x85, 0xe8, 0xfc, 0x4c, 0x9e, 0xae,
	0x95, 0xdd, 0xcf, 0x26, 0xa7, 0xdf, 0x25, 0xe0, 0x9d, 0xb8, 0xe2, 0x9c, 0x9f, 0x79, 0x4c, 0x34,
	0xa3, 0x04, 0xe6, 0xf0, 0xf4, 0xcd, 0x0b, 0xd7, 0x85, 0x45, 0xba, 0x0e, 0xf3, 0xef, 0xdc, 0xc1,
	0xd8, 0xab, 0xce, 0x6d, 0xcd, 0x6d, 0x2f, 0x33, 0x59, 0xa9, 0x1d, 0x40, 0x29, 0xd3, 0x98, 0x52,
	0xa8, 0xd8, 0xc7, 0xad, 0x3d, 0xcb, 0xe0, 0x4d, 0xdd, 0x76, 0x2c, 0x86, 0xe7, 0xe0, 0x3a, 0x10,
	0xad, 0x65, 0x39, 0x7a, 0xdd, 0x32, 0x53, 0x6a, 0x0e, 0x35, 0xae, 0xb5, 0xac, 0x03, 0x3d, 0x25,
	0xe5, 0x6b, 0x7f, 0x5e, 0x81, 0x8a, 0xed, 0x85, 0x61, 0xdf, 0x1f, 0xd5, 0xe5, 0x6c, 0xe9, 0xf3,
	0x74, 0x15, 0xf9, 0xed, 0xca, 0xee, 0x83, 0xc9, 0x2a, 0xa6, 0x71, 0x3b, 0xf1, 0x37, 0xb3, 0x80,
	0x0a, 0xe4, 0xfb, 0x3d, 0x31, 0xff, 0x79, 0x96, 0xef, 0xf7, 0xa8, 0x0a, 0xa4, 0x3b, 0x71, 0x88,
	0x5c, 0xb8, 0xcc, 0xb9, 0x9f, 0x72, 0x99, 0x2b, 0xdd, 0x69, 0x02, 0xa5, 0x50, 0x88, 0xbc, 0x1f,
	0xa2, 0x6a, 0x41, 0xc8, 0x45, 0x94, 0xe9, 0xa7, 0xb0, 0xd2, 0x1d, 0x07, 0xa1, 0x1f, 0xf0, 0x04,
	0x2a, 0x3c, 0x7e, 0x99, 0x55, 0x24, 0xb9, 0x1d, 0x53, 0xa9, 0x03, 0xab, 0xe3, 0xd0, 0x3d, 0xf1,
	0x78, 0x18, 0xb9, 0x51, 0x18, 0x7b, 0x5e, 0xe9, 0xb6, 0xb7, 0xaf, 0x5c, 0x59, 0x07, 0x5b, 0xd8,
	0xd8, 0x40, 0xba, 0xdf, 0x95, 0xf1, 0x34, 0x81, 0xfe, 0x0a, 0xee, 0x5c, 0xe8, 0x95, 0xf7, 0x47,
	0x11, 0x97, 0xda, 0x5a, 0x12, 0x12, 0xb8, 0x35, 0xd3, 0x4a, 0x1f, 0x45, 0xaf, 0x84, 0xfe, 0xfe,
	0xa1, 0x00, 0xa5, 0x8c, 0xf0, 0x70, 0x0b, 0x30, 0xed, 0x15, 0x1e, 0xbc, 0x39, 0x2c, 0xdb, 0x9d,
	0xbd, 0x96, 0x8e, 0x7b, 0x66, 0x1d, 0x88, 0xad, 0x19, 0x68, 0x78, 0x75, 0xc5, 0x54, 0x75, 0x55,
	0x71, 0x34, 0x32, 0x47, 0x6f, 0xc1, 0x5a, 0x53, 0xdf, 0x6f, 0x1a, 0xd2, 0xf4, 0x53, 0x46, 0x81,
	0x6e, 0xc0, 0xaa, 0x7d, 0xa4, 0x3b, 0xf5, 0xa6, 0xb4, 0x53, 0x69, 0xc9, 0xf3, 0xb8, 0xa7, 0xf7,
	0x35, 0x87, 0xdb, 0x8e, 0xe2, 0x74, 0x6c, 0xb2, 0x20, 0x7a, 0x15, 0x23, 0x64, 0x1a, 0x2f, 0xe2,
	0xbe, 0xae, 0x5b, 0x26, 0x4e, 0x82, 0x8b, 0xb9, 0xd8, 0x9a, 0x74, 0x7f, 0x1d, 0x53, 0xb5, 0xc8,
	0x12, 0x5a, 0x0e, 0xd3, 0x6c, 0xcd, 0xe1, 0x75, 0xcb, 0xc4, 0x73, 0x8c, 0x00, 0x6e, 0x99, 0x96,
	0xf5, 0x4a, 0xe3, 0xf5, 0x0e, 0xb3, 0x2d, 0x46, 0x4a, 0xf4, 0x0e, 0xdc, 0x9a, 0x1a, 0xbf, 0xa1,
	0x6b, 0x86, 0xca, 0x9d, 0xe3, 0x36, 0xfa, 0xc6, 0x0d, 0x58, 0xed, 0xd8, 0xe8, 0x6c, 0x70, 0x1e,
	0x36, 0xd7, 0x5e, 0x69, 0xa6, 0x43, 0xca, 0x68, 0xbb, 0x38, 0x02, 0xb7, 0x18, 0x67, 0xda, 0x91,
	0x6e, 0xaa, 0xa4, 0x82, 0x50, 0xed, 0xb7, 0x6d, 0xc5, 0x54, 0xb9, 0xdd, 0xd9, 0xdf, 0xd7, 0x6c,
	0x47, 0xb7, 0x4c, 0xb2, 0x42, 0xb7, 0xe0, 0xae, 0xb5, 0x67, 0x5b, 0x86, 0xe6, 0x68, 0xdc, 0xd6,
	0x4c, 0x95, 0xd7, 0x15, 0xa6, 0x39, 0x78, 0x34, 0x2a, 0x02, 0x41, 0xe8, 0x27, 0x50, 0x9b, 0x46,
	0x18, 0x8a, 0xb9, 0xdf, 0xc1, 0x41, 0xf7, 0x14, 0xc6, 0xc5, 0x31, 0x29, 0x1c, 0xee, 0x3d, 0xb8,
	0x9d, 0xe2, 0x50, 0x34, 0x8a, 0x7d, 0x6c, 0xd6, 0x39, 0xd3, 0xec, 0x8e, 0xe1, 0x10, 0x2a, 0x45,
	0xd1, 0x42, 0x01, 0x31, 0xe5, 0x88, 0x8b, 0xd5, 0xae, 0xe1, 0xa4, 0x12, 0xf9, 0xb4, 0x99, 0xf6,
	0x8a, 0xa3, 0xe3, 0x24, 0xeb, 0x59, 0xb2, 0x89, 0xc7, 0xbb, 0x20, 0x6f, 0xa0, 0x6c, 0x9c, 0x0e,
	0x33, 0xb9, 0x65, 0x72, 0xbd, 0xa5, 0x91, 0x9b, 0x78, 0x86, 0x48, 0x42, 0xa3, 0x21, 0x28, 0xb7,
	0x92, 0x83, 0xd4, 0x6a, 0x24, 0x13, 0xb3, 0x49, 0xb5, 0xf6, 0x3f, 0x8b, 0xb0, 0x32, 0x63, 0x7c,
	0xb4, 0x0a, 0xeb, 0xba, 0xd9, 0xb0, 0x0c, 0xdd, 0x76, 0x38, 0x4a, 0xc8, 0x3a, 0xe2, 0x76, 0xd3,
	0x3a, 0x22, 0xb9, 0xcb, 0x38, 0x4d, 0xf4, 0x3c, 0x79, 0xba, 0x09, 0x37, 0x9b, 0x8a, 0xa9, 0x1e,
	0x31, 0xdd, 0xd1, 0xcd, 0x7d, 0x6e, 0xb5, 0x35, 0x33, 0x16, 0xf9, 0x1c, 0xbd, 0x0b, 0xd5, 0x2c,
	0x2f, 0x5e, 0xaa, 0xe4, 0x16, 0x50, 0xca, 0xf5, 0xa6, 0x82, 0x9e, 0x4d, 0x63, 0xbc, 0xad, 0x18,
	0x9a, 0xe3, 0x68, 0xd9, 0xf6, 0xf3, 0xb4, 0x06, 0xf7, 0x2f, 0x22, 0xa6, 0x7a, 0x59, 0x40, 0x4d,
	0xd8, 0x56, 0xc3, 0x39, 0x52, 0x98, 0x86, 0x7e, 0x6a, 0xcf, 0x52, 0x18, 0x6a, 0xe3, 0xd8, 0xea,
	0x38, 0xa8, 0x14, 0x55, 0x46, 0x52, 0x8b, 0xf4, 0x63, 0xf8, 0xf0, 0x4a, 0x5c, 0xdb, 0x62, 0x0e,
	0x53, 0x74, 0x87, 0x14, 0x51, 0x61, 0xd2, 0x64, 0x1d, 0x4d, 0x9d, 0x58, 0x2d, 0x67, 0xd6, 0x11,
	0x7f, 0x44, 0x96, 0xae, 0x63, 0x3f, 0x26, 0x70, 0x1d, 0x7b, 0x97, 0x94, 0xae, 0x63, 0x3f, 0x21,
	0xcb, 0xd7, 0xb1, 0x9f, 0x92, 0xf2, 0x75, 0xec, 0x67, 0xa4, 0x72, 0x1d, 0xfb, 0x2b, 0xb2, 0x72,
	0x1d, 0xfb, 0x6b, 0x42, 0xae, 0x63, 0x3f, 0x97, 0x76, 0x7c, 0x15, 0xfb, 0x05, 0xa1, 0xa8, 0xca,
	0xab, 0xd8, 0xfb, 0xda, 0xe3, 0x47, 0x64, 0x0d, 0x8f, 0x92, 0x54, 0xea, 0x0d, 0xcb, 0x50, 0x63,
	0xfd, 0xad, 0xd3, 0xdb, 0xb0, 0x91, 0x32, 0xe2, 0xbd, 0x28, 0x59, 0x1b, 0x74, 0x1b, 0x1e, 0xb4,
	0x3a, 0x76, 0x93, 0x59, 0x56, 0x8b, 0xcb, 0xd3, 0x49, 0xb7, 0x4c, 0xae, 0xea, 0x8a, 0x61, 0x4d,
	0x19, 0xda, 0x4d, 0xfa, 0x39, 0x7c, 0x72, 0x51, 0xb9, 0x4d, 0x4d, 0x9c, 0x5b, 0xaa, 0xde, 0xce,
	0x18, 0xc2, 0x2d, 0xfa, 0x19, 0x7c, 0x7c, 0x2d, 0x36, 0x35, 0x86, 0x2a, 0x7d, 0x01, 0xcf, 0xae,
	0xb4, 0x19, 0x45, 0x3d, 0xe8, 0xd8, 0x4e, 0x4b, 0x33, 0x1d, 0xae, 0x99, 0xca, 0x9e, 0xa1, 0xa9,
	0x99, 0x51, 0x6e, 0xd3, 0xe7, 0xf0, 0xf4, 0xe7, 0x34, 0x4d, 0x07, 0xdd, 0xa4, 0x3b, 0xf0, 0xf9,
	0x95, 0x2d, 0x35, 0x73, 0xdf, 0xd0, 0xed, 0x66, 0x66, 0xa4, 0x3b, 0xf4, 0x4b, 0xf8, 0xec, 0x27,
	0xf1, 0x69, 0xf7, 0x77, 0x0f, 0x0a, 0xc5, 0x05, 0xb2, 0x78, 0x50, 0x28, 0x16, 0xc9, 0xd2, 0x41,
	0xa1, 0x08, 0xa4, 0x54, 0xfb, 0xef, 0x3c, 0x2c, 0xd6, 0xfd, 0x91, 0x70, 0x76, 0x1f, 0x43, 0xe5,
	0x2c, 0xf0, 0xba, 0x5e, 0xaf, 0x3f, 0x3a, 0xe1, 0xc2, 0x15, 0xe6, 0x84, 0x2b, 0x2c, 0xa7, 0x54,
	0x27, 0x86, 0xbd, 0xf1, 0x07, 0x03, 0xff, 0xfb, 0x14, 0x26, 0x23, 0x89, 0x72, 0x4a, 0x15, 0xb0,
	0xaf, 0x60, 0x2d, 0x1c, 0x9f, 0x9d, 0x05, 0x5e, 0x18, 0xf2, 0x70, 0x7c, 0x72, 0xe2, 0x85, 0xc2,
	0x7d, 0xa2, 0x5f, 0x2e, 0xbe, 0x9c, 0x7f, 0xe3, 0x0e, 0x42, 0x8f, 0xd1, 0x04, 0x61, 0xa7, 0x00,
	0x7a, 0x00, 0x44, 0x5e, 0xa0, 0xdf, 0xf4, 0xbd, 0x41, 0x8f, 0x8b, 0x10, 0xa1, 0x20, 0x1c, 0xe9,
	0x56, 0xd6, 0x99, 0x8b, 0x29, 0xcb, 0x4b, 0x74, 0x03, 0x81, 0x22, 0x3c, 0xa8, 0xf4, 0xa7, 0xea,
	0xf4, 0x1e, 0x14, 0x03, 0xef, 0x5d, 0x3f, 0x4c, 0xfc, 0xf6, 0xfc, 0xcb, 0xdc, 0x23, 0x96, 0x92,
	0xe8, 0x13, 0xd8, 0xf0, 0x7e, 0x38, 0xf3, 0x82, 0xfe, 0xd0, 0x1b, 0x45, 0xee, 0x80, 0xbf, 0xf1,
	0xdc, 0x68, 0x1c, 0x78, 0x61, 0xb5, 0xb7, 0x35, 0xb7, 0xbd, 0xc4, 0xd6, 0xb3, 0xcc, 0x46, 0xcc,
	0xab, 0xfd, 0x1a, 0x2a, 0xd3, 0xa3, 0xa2, 0x2f, 0x35, 0x2d, 0x86, 0x71, 0x79, 0x0e, 0x63, 0xc9,
	0xb6, 0x62, 0xdb, 0x47, 0x16, 0x53, 0xe5, 0x9d, 0xd0, 0xd1, 0x0c, 0x32, 0x27, 0x20, 0x9d, 0xd6,
	0x9e, 0xc6, 0x48, 0xa1, 0xf6, 0x9f, 0x39, 0x80, 0xba, 0x7b, 0x16, 0x5f, 0x36, 0xe9, 0x1f, 0xa1,
	0x8c, 0x4b, 0xe1, 0x3d, 0x6f, 0xe0, 0x09, 0x09, 0xc9, 0xa8, 0xee, 0x61, 0x66, 0xb1, 0x29, 0x78,
	0x07, 0x25, 0xab, 0xc6, 0xc0, 0x09, 0x19, 0x67, 0xf1, 0xf2, 0x8e, 0x69, 0x09, 0x27, 0xc2, 0x55,
	0xcd, 0xd0, 0xc4, 0x66, 0xa9, 0x2b, 0x6d, 0x65, 0x4f, 0x37, 0x74, 0xe7, 0x98, 0x2d, 0x47, 0x99,
	0x86, 0xb5, 0xdf, 0xc2, 0xe6, 0xd5, 0x1d, 0xd1, 0x0f, 0xe0, 0xba, 0xae, 0xc8, 0x0d, 0xdc, 0xb5,
	0x82, 0xa1, 0xa1, 0x8b, 0xaa, 0x6b, 0x2a, 0x1e, 0xef, 0xc2, 0x7d, 0xe5, 0x6a, 0x7f, 0xb7, 0x0a,
	0x8b, 0xcc, 0xfb, 0xe3, 0xd8, 0x0b, 0x23, 0xfa, 0x02, 0x36, 0xde, 0x7b, 0x81, 0xcf, 0xff, 0x38,
	0xf6, 0x82, 0xf3, 0xac, 0x09, 0xe4, 0xb2, 0x26, 0xb0, 0x86, 0x98, 0xef, 0x10, 0x92, 0xb1, 0x81,
	0x47, 0x40, 0x86, 0xfd, 0x1f, 0xbc, 0x1e, 0xef, 0xfa, 0xa3, 0x77, 0x5e, 0x20, 0xf4, 0x97, 0xcf,
	0xb6, 0x5a, 0x11, 0xec, 0x7a, 0xca, 0xa5, 0xa7, 0xb0, 0x91, 0x64, 0x16, 0x02, 0x7f, 0xe8, 0x8e,
	0xfe, 0xd0, 0xe7, 0x91, 0xfb, 0x7a, 0x90, 0x98, 0xce, 0xc7, 0x13, 0x69, 0xc6, 0xd3, 0x4b, 0x52,
	0x0c, 0x4c, 0xa2, 0x1d, 0x04, 0xbf, 0x2c, 0xab, 0x5a, 0x43, 0xe9, 0x18, 0x0e, 0x77, 0x70, 0x67,
	0xb2, 0xb5, 0xf0, 0x22, 0x86, 0xfe, 0x09, 0x47, 0x72, 0xbb, 0x1e, 0xf7, 0x47, 0xdc, 0x1d, 0x9c,
	0x9d, 0xba, 0xa3, 0xf1, 0x10, 0x83, 0xee, 0x38, 0xd5, 0x73, 0xe9, 0x48, 0x6e, 0xd7, 0xb3, 0x46,
	0x4a, 0x06, 0xfc, 0xf2, 0x81, 0xb8, 0xcc, 0x63, 0x3c, 0x92, 0xf8, 0xf5, 0x43, 0x4d, 0x6b, 0xc7,
	0x8e, 0xb2, 0x6d, 0xd9, 0x3a, 0x8a, 0x1d, 0x27, 0x70, 0xa1, 0x29, 0xfd, 0x08, 0xca, 0x6f, 0xbd,
	0xf3, 0xd7, 0xbe, 0x1b, 0xf4, 0xf8, 0xc8, 0x1d, 0xca, 0xec, 0xd0, 0x12, 0x5b, 0x4e, 0x88, 0xa6,
	0x3b, 0xf4, 0xe8, 0x31, 0x7c, 0x3a, 0x3e, 0xeb, 0xb9, 0x91, 0xc7, 0xe5, 0x66, 0xc2, 0x98, 0x98,
	0xbf, 0x09, 0xfc, 0x21, 0x0f, 0xc7, 0x41, 0xe0, 0x8f, 0x47, 0x93, 0x4d, 0x5e, 0x14, 0x82, 0x2d,
	0x44, 0xc1, 0xd8, 0x63, 0x35, 0xd9, 0x48, 0x18, 0x38, 0x06, 0xc5, 0x8d, 0xc0, 0x1f, 0xda, 0x93,
	0x06, 0x62, 0x63, 0xbf, 0x82, 0x07, 0x6f, 0xdd, 0x91, 0xcb, 0xd3, 0x4c, 0x4c, 0x7f, 0x14, 0x7a,
	0x23, 0x8c, 0x83, 0xdf, 0x79, 0x59, 0x85, 0x2d, 0x65, 0x15, 0xf6, 0x21, 0x36, 0x49, 0xee, 0x6e,
	0xfa, 0xa4, 0x41, 0x46, 0x85, 0xdf, 0xc0, 0x2d, 0x77, 0x1c, 0xf9, 0xfc, 0xcc, 0x0d, 0x22, 0xd4,
	0x63, 0xc6, 0x62, 0x20, 0xdb, 0xd5, 0x06, 0xa2, 0xda, 0x12, 0x94, 0xb1, 0x99, 0x17, 0x70, 0xcb,
	0x7d, 0xe7, 0xf6, 0x07, 0x22, 0xfb, 0xe5, 0x0d, 0xfd, 0x3f, 0xf4, 0x79, 0xd7, 0x0d, 0x82, 0xbe,
	0x17, 0x54, 0x4b, 0x72, 0xeb, 0x3f, 0x66, 0x1b, 0x29, 0x42, 0x43, 0x40, 0x5d, 0xf2, 0xe9, 0x37,
	0x70, 0x5b, 0x36, 0x08, 0xbc, 0xef, 0x83, 0x7e, 0xe4, 0x05, 0xbc, 0x9b, 0x6e, 0x89, 0xea, 0x72,
	0xd2, 0xf8, 0x96, 0xc0, 0xb0, 0x18, 0x92, 0xd9, 0xc1, 0xa7, 0x70, 0xb3, 0x1b, 0xf8, 0x61, 0x88,
	0x12, 0xf5, 0x7a, 0x27, 0x1e, 0x7f, 0xed, 0x9d, 0xba, 0xef, 0xfa, 0x7e, 0x50, 0x2d, 0x0b, 0x93,
	0xf8, 0xe4, 0xa2, 0x49, 0xd4, 0x63, 0xbc, 0xd6, 0x3b, 0xf1, 0xf6, 0x62, 0xf4, 0x4b, 0x50, 0x2d,
	0x6e, 0x5a, 0x4e, 0x53, 0x37, 0xf7, 0xd9, 0x7a, 0xf7, 0x12, 0x04, 0xfd, 0x13, 0xac, 0x0f, 0xdc,
	0xd1, 0xc9, 0x18, 0xaf, 0x04, 0xee, 0xf7, 0x6e, 0x10, 0x6b, 0xb7, 0x5a, 0x11, 0xe3, 0xfc, 0xe2,
	0xe2, 0x38, 0x46, 0x8c, 0x56, 0x10, 0x2c, 0xb4, 0x9a, 0x8e, 0xf6, 0x41, 0x62, 0xeb, 0x69, 0xf4,
	0xaa, 0x08, 0x37, 0xb2, 0xa7, 0x35, 0x95, 0x57, 0xba, 0xc5, 0x18, 0x1d, 0x5c, 0x68, 0x4c, 0x1f,
	0xc3, 0x5a, 0x9a, 0x4d, 0xe6, 0x67, 0xe2, 0x66, 0xd2, 0x7f, 0xef, 0x55, 0x57, 0xa4, 0x8c, 0x5e,
	0xb0, 0xd5, 0x94, 0xdb, 0xc6, 0xe8, 0xb2, 0xff, 0xde, 0xa3, 0xbb, 0xb0, 0x31, 0x49, 0x40, 0x0b,
	0x38, 0x1f, 0xf4, 0x87, 0xfd, 0xa8, 0x4a, 0xc4, 0xed, 0x65, 0xd2, 0x5f, 0x88, 0x70, 0x03, 0x59,
	0xb5, 0x7f, 0x29, 0xc0, 0xda, 0x25, 0xfb, 0x13, 0xaf, 0x07, 0x53, 0x3b, 0x94, 0xdc, 0xc0, 0xdb,
	0x80, 0x73, 0xa4, 0x19, 0xaf, 0x84, 0xff, 0xb3, 0xb9, 0x63, 0xf1, 0xa6, 0xce, 0x94, 0x7d, 0xc5,
	0x54, 0x08, 0xd0, 0x0f, 0xe1, 0xde, 0x2c, 0x53, 0x31, 0x1a, 0x47, 0xba, 0xea, 0x34, 0x15, 0xbb,
	0xae, 0xeb, 0xa4, 0x84, 0x91, 0x75, 0xc3, 0xd0, 0xeb, 0x87, 0x53, 0x2d, 0xcb, 0xd8, 0xed, 0x84,
	0x3c, 0xdd, 0xa6, 0x82, 0xa1, 0xad, 0x63, 0xed, 0xef, 0x1b, 0x1a, 0xbf, 0xd8, 0x94, 0x60, 0xe0,
	0x7a, 0x81, 0x3b, 0xdd, 0x83, 0x08, 0xa9, 0xbe, 0x3b, 0xd2, 0x98, 0x73, 0xcc, 0x5b, 0xd6, 0x9e,
	0x6e, 0x68, 0x53, 0x5d, 0xac, 0xd3, 0x8f, 0xe0, 0x83, 0x8b, 0xec, 0xe9, 0x3e, 0x6e, 0xe2, 0xcc,
	0xf7, 0x2d, 0x55, 0x31, 0xa7, 0xda, 0xde, 0xc7, 0x99, 0x4f, 0xc8, 0xd3, 0x6d, 0x3e, 0xc0, 0x48,
	0xcc, 0xb4, 0x1c, 0xab, 0x53, 0x6f, 0x4e, 0xb5, 0xda, 0xc6, 0x09, 0x65, 0x19, 0xd3, 0xed, 0x3e,
	0xc3, 0x35, 0xa5, 0x57, 0x99, 0x19, 0x89, 0xc6, 0x7e, 0x6d, 0x19, 0xa5, 0x92, 0x62, 0xd2, 0x95,
	0xc7, 0xdc, 0x95, 0x29, 0x6e, 0x3a, 0xbf, 0x98, 0xbb, 0x85, 0x71, 0x4c, 0xca, 0xbd, 0x52, 0x30,
	0x09, 0x7c, 0x03, 0xe5, 0x33, 0x99, 0xce, 0x8c, 0xac, 0x63, 0x10, 0xad, 0x7d, 0x8f, 0x36, 0x74,
	0xf1, 0xf8, 0xdc, 0x86, 0xbf, 0xe8, 0xec, 0x25, 0x37, 0x44, 0x60, 0x39, 0x8b, 0x94, 0x17, 0x90,
	0x59, 0xac, 0xb8, 0x4f, 0x4b, 0x16, 0xc9, 0xd7, 0xfe, 0x0a, 0x48, 0xf6, 0x78, 0x11, 0x4e, 0x55,
	0xa4, 0xd4, 0xf4, 0xba, 0xa5, 0x6a, 0x5c, 0xa4, 0x46, 0xe2, 0x7c, 0x8f, 0x55, 0xb7, 0x5a, 0x56,
	0x4c, 0xc9, 0x8b, 0x0c, 0x8b, 0xd5, 0x70, 0xf6, 0x14, 0xf3, 0x30, 0xa6, 0x15, 0xf0, 0x5a, 0x7d,
	0xa8, 0xaa, 0x7a, 0x5c, 0x2f, 0xd6, 0x7e, 0x0f, 0xf4, 0x92, 0x23, 0x48, 0xa4, 0xa8, 0x1d, 0xae,
	0xbc, 0x52, 0x74, 0x23, 0xde, 0x18, 0x15, 0x00, 0x39, 0x69, 0x5b, 0xce, 0xb0, 0x02, 0xd0, 0x66,
	0x9a, 0xaa, 0x8b, 0x40, 0x9a, 0xe4, 0xb1, 0x9e, 0xb9, 0xf7, 0x16, 0x64, 0x0a, 0xcd, 0x20, 0x8b,
	0x35, 0x15, 0xd6, 0x2f, 0x3b, 0x9e, 0xb0, 0xc1, 0xe4, 0x80, 0x22, 0x37, 0x50, 0xa3, 0xf1, 0x75,
	0xec, 0x48, 0x77, 0x9a, 0x18, 0x71, 0xd6, 0x2d, 0xd3, 0xee, 0xb4, 0x90, 0x9b, 0xab, 0xfd, 0x35,
	0x6c, 0x5e, 0x7d, 0xf8, 0xa0, 0x02, 0x7f, 0xe2, 0xf8, 0x91, 0x5b, 0xdb, 0xb4, 0x66, 0xf9, 0x32,
	0x37, 0x96, 0x43, 0x83, 0x9d, 0xe1, 0x64, 0x56, 0x93, 0x3f, 0x28, 0x14, 0xe7, 0x48, 0xa1, 0xf6,
	0x0e, 0x56, 0x94, 0xb3, 0xb3, 0x41, 0xbf, 0xeb, 0xa2, 0x8b, 0xd0, 0x47, 0x6f, 0x7c, 0x7a, 0x0f,
	0xe0, 0x2c, 0xf0, 0xbb, 0x18, 0x95, 0xf6, 0x7b, 0xf1, 0xfb, 0xc4, 0x52, 0x4c, 0xd1, 0x7b, 0xf4,
	0x0e, 0x2c, 0x45, 0xa7, 0x81, 0xe7, 0xf6, 0x78, 0x9c, 0x61, 0x2a, 0xb3, 0xa2, 0x24, 0xe8, 0x3d,
	0xfa, 0x29, 0xac, 0x44, 0xfd, 0xa1, 0xf7, 0xde, 0x1f, 0x79, 0xdc, 0x7f, 0xf3, 0x26, 0xf4, 0x22,
	0x11, 0xce, 0xce, 0xb3, 0x4a, 0x42, 0xb6, 0x04, 0xb5, 0xf6, 0xf7, 0x65, 0x98, 0x97, 0x07, 0xe6,
	0xc3, 0xa9, 0x24, 0xd7, 0x9d, 0xc9, 0x09, 0x2d, 0xd8, 0xd7, 0xe6, 0xb6, 0x0a, 0x22, 0xb7, 0xf5,
	0x40, 0x26, 0xeb, 0x70, 0x9c, 0xd2, 0x2e, 0xbd, 0xf8, 0xd0, 0x21, 0x13, 0x78, 0xbb, 0xb0, 0x18,
	0x73, 0x44, 0xc0, 0x53, 0xda, 0xad, 0x5e, 0x95, 0x74, 0x62, 0x09, 0x90, 0x7e, 0x01, 0x0b, 0xf2,
	0xed, 0x4f, 0x84, 0xc6, 0xa5, 0xdd, 0xb5, 0x9d, 0xa1, 0xff, 0xbe, 0xbb, 0x13, 0xbf, 0x07, 0xd6,
	0xc5, 0x87, 0xc5, 0x10, 0xfa, 0x05, 0x0e, 0x20, 0x62, 0x6e, 0x11, 0xe7, 0x94, 0x76, 0x57, 0x2f,
	0x04, 0xe3, 0x2c, 0x41, 0xd0, 0xa7, 0x00, 0x19, 0x07, 0xba, 0x28, 0xf0, 0xeb, 0x97, 0xc5, 0xb3,
	0x2c, 0x83, 0xa3, 0x2a, 0x10, 0x77, 0xa2, 0x2c, 0xde, 0x1f, 0xbd, 0xf1, 0x45, 0x6c, 0x52, 0xca,
	0x66, 0xf1, 0x66, 0xd4, 0xc9, 0x56, 0xdc, 0x19, 0xfd, 0x7e, 0x01, 0x8b, 0x81, 0x74, 0x7e, 0x22,
	0x00, 0x99, 0x9a, 0x68, 0xec, 0x15, 0x59, 0x82, 0xa0, 0x7b, 0x50, 0x8e, 0xdf, 0x29, 0xb9, 0x37,
	0x8a, 0x02, 0xf9, 0x18, 0x54, 0xca, 0xbe, 0x48, 0x5d, 0x92, 0x51, 0x65, 0xcb, 0xe1, 0x74, 0x32,
	0x76, 0x39, 0xf2, 0xc7, 0xdd, 0x53, 0x99, 0x9d, 0x0b, 0xab, 0xcb, 0xe2, 0xb9, 0x6d, 0x73, 0x56,
	0xd3, 0x0e, 0x62, 0xa4, 0xc6, 0x4a, 0x51, 0x5a, 0x0e, 0x69, 0x17, 0x6e, 0xcd, 0x3e, 0x9d, 0x26,
	0x9a, 0x2c, 0x8b, 0xc9, 0x7c, 0x21, 0xd5, 0x32, 0x03, 0xda, 0xe9, 0x84, 0x5e, 0xa0, 0xa6, 0xd5,
	0x44, 0xb9, 0x1b, 0xe3, 0xcb, 0xc8, 0xf4, 0x09, 0xd0, 0x78, 0xc9, 0xd9, 0xa8, 0xaa, 0x92, 0x09,
	0xfc, 0x56, 0x63, 0x7e, 0x26, 0xa0, 0xfa, 0x0e, 0x36, 0xe2, 0xf7, 0xdf, 0xc0, 0x1b, 0xf8, 0x6e,
	0x8f, 0x27, 0x72, 0x5d, 0x99, 0x15, 0x92, 0x26, 0x60, 0x4c, 0xa0, 0x12, 0x19, 0xaf, 0x79, 0x17,
	0x89, 0x9b, 0x7f, 0x03, 0x65, 0x21, 0x87, 0x34, 0x6d, 0xfa, 0x04, 0x16, 0xdc, 0x6e, 0xe6, 0xd6,
	0x73, 0xe7, 0x52, 0xb1, 0x29, 0x02, 0xc2, 0x62, 0x28, 0x5d, 0x86, 0xdc, 0x0f, 0x62, 0x87, 0xe4,
	0x59, 0xee, 0x07, 0xac, 0xc9, 0xed, 0x91, 0x67, 0xb9, 0x73, 0x7a, 0x17, 0x96, 0x70, 0x2f, 0x86,
	0x91, 0x3b, 0x3c, 0x13, 0x5b, 0x61, 0x8e, 0x4d, 0x08, 0x9b, 0xbf, 0x07, 0x98, 0xe8, 0x01, 0xf7,
	0x7a, 0xe8, 0x8f, 0x83, 0xae, 0x37, 0x39, 0x09, 0x8a, 0x92, 0xa0, 0xf7, 0xe8, 0x33, 0x58, 0x08,
	0xa3, 0xc0, 0x7f, 0xeb, 0x55, 0xf3, 0x42, 0xa1, 0xf7, 0x2e, 0x9d, 0x59, 0xb2, 0x10, 0x16, 0x83,
	0x6b, 0xff, 0x3e, 0x93, 0x73, 0x2d, 0x42, 0xc1, 0xb4, 0x4c, 0x3c, 0x8f, 0x29, 0x54, 0xea, 0x4c,
	0x53, 0x44, 0xce, 0xd0, 0x8e, 0xcf, 0x64, 0x0a, 0x95, 0xf8, 0x26, 0x95, 0xd0, 0xf2, 0xe2, 0xd1,
	0x47, 0x33, 0xe5, 0xbb, 0xcb, 0x1c, 0x1e, 0xec, 0x8e, 0x66, 0x3b, 0x3c, 0x25, 0x15, 0xd0, 0x6f,
	0xc8, 0xbc, 0x64, 0x9c, 0x68, 0x4c, 0x53, 0xaf, 0x75, 0xcb, 0x6c, 0xe8, 0xfb, 0x64, 0x41, 0x1c,
	0xed, 0x93, 0xfa, 0x22, 0xbd, 0x09, 0x14, 0xeb, 0x3a, 0x3a, 0x2c, 0x4d, 0x4d, 0xe8, 0x37, 0xe9,
	0x0a, 0x94, 0x90, 0xce, 0xb4, 0xef, 0x3a, 0x9a, 0xed, 0x90, 0x55, 0xf1, 0xfe, 0x74, 0x6c, 0xd6,
	0xb9, 0xaa, 0x38, 0x0a, 0x29, 0x8a, 0xa9, 0x34, 0x3b, 0xce, 0xe4, 0x69, 0x92, 0x69, 0x86, 0xa5,
	0xa8, 0x04, 0xb0, 0x47, 0xf1, 0x06, 0xc4, 0x3b, 0xb6, 0xc6, 0xd2, 0x34, 0x7f, 0x09, 0xaf, 0x86,
	0x19, 0x7a, 0xc6, 0xdf, 0x2c, 0x8b, 0x8c, 0x9f, 0x64, 0x99, 0x1d, 0x9c, 0xc5, 0x2c, 0x82, 0xd0,
	0x12, 0x2c, 0x22, 0xc2, 0xec, 0xb4, 0x49, 0x19, 0x57, 0x69, 0x5a, 0xdc, 0x6a, 0x6b, 0x4c, 0xa6,
	0x5d, 0x2b, 0x53, 0xe9, 0x54, 0xdb, 0x51, 0xd0, 0x19, 0x1b, 0x56, 0x47, 0xe5, 0x38, 0x63, 0x42,
	0xa7, 0x42, 0x14, 0x21, 0x8d, 0x94, 0x99, 0xe4, 0xa4, 0x6f, 0xd1, 0x4d, 0xb8, 0x99, 0x62, 0x14,
	0x55, 0xe5, 0x4a, 0xc7, 0x69, 0x72, 0x74, 0xca, 0xa4, 0x8a, 0xe1, 0x94, 0x7c, 0x96, 0xc4, 0x20,
	0x02, 0xd7, 0x23, 0x33, 0xaf, 0xb7, 0x61, 0x83, 0x69, 0x8a, 0xca, 0x15, 0xc3, 0xe0, 0x0d, 0x66,
	0xb5, 0x52, 0xd6, 0x06, 0xea, 0x46, 0xae, 0x28, 0x21, 0xdd, 0x16, 0xb9, 0x30, 0xd4, 0x8d, 0x58,
	0x5c, 0xbc, 0x32, 0x85, 0x1d, 0xa7, 0xba, 0xda, 0xa4, 0xf7, 0x61, 0x53, 0x20, 0x34, 0x73, 0x5f,
	0x37, 0x35, 0x2e, 0x25, 0x9a, 0xaa, 0xe0, 0xce, 0x65, 0xf9, 0xda, 0xbb, 0xb5, 0x5f, 0x42, 0x29,
	0xb3, 0x11, 0xc4, 0x23, 0x9f, 0x08, 0xd5, 0x84, 0x66, 0x72, 0x93, 0x7a, 0xcb, 0x7a, 0xa5, 0x49,
	0x13, 0x92, 0xf5, 0x4e, 0x9b, 0xcc, 0x1d, 0x14, 0x8a, 0x25, 0xb2, 0x5c, 0xfb, 0xc7, 0x1c, 0x2c,
	0x30, 0x2f, 0x1c, 0x0f, 0xae, 0xf1, 0x49, 0x92, 0x1f, 0x7f, 0x32, 0x3e, 0x29, 0x7d, 0x1e, 0xca,
	0x6f, 0xe5, 0xb7, 0x97, 0xe2, 0xe7, 0xa1, 0xe4, 0x19, 0x69, 0x6e, 0xf2, 0x8c, 0xf4, 0x09, 0x94,
	0xe3, 0xd7, 0x92, 0xd8, 0x3b, 0x16, 0x92, 0x9c, 0xcb, 0xb2, 0xa4, 0xc7, 0xee, 0xb1, 0x06, 0x30,
	0x19, 0x23, 0xb3, 0x45, 0x00, 0x16, 0x6c, 0x87, 0xc9, 0xf8, 0xe1, 0xbf, 0xf2, 0xb0, 0xd8, 0x0e,
	0x3c, 0xaf, 0xd7, 0x8f, 0xe8, 0x4d, 0x58, 0x90, 0xed, 0xc5, 0x94, 0xcb, 0x2c, 0xae, 0xd1, 0x27,
	0xb0, 0x18, 0x7a, 0x27, 0x43, 0x6f, 0x14, 0x89, 0x4d, 0x0a, 0x59, 0x47, 0x11, 0xb7, 0xdd, 0xb1,
	0x25, 0x80, 0x25, 0x48, 0xfa, 0x18, 0xd6, 0x4f, 0xfb, 0x27, 0xa7, 0x83, 0xfe, 0xc9, 0x69, 0xe4,
	0xf5, 0x26, 0xef, 0x3a, 0x73, 0xe2, 0x00, 0x58, 0xcb, 0xf0, 0x92, 0xcd, 0xbd, 0xf9, 0x6f, 0x39,
	0x58, 0x8c, 0xfb, 0xa1, 0x2a, 0x80, 0x3b, 0x1a, 0xf9, 0x91, 0x1b, 0x37, 0x9a, 0x79, 0xbb, 0x9a,
	0x19, 0x76, 0x47, 0x49, 0xb1, 0x2c, 0xd3, 0x6e, 0x22, 0xd1, 0x42, 0x56, 0xa2, 0x1f, 0xc2, 0xb2,
	0x28, 0xf0, 0x81, 0x37, 0x3a, 0x89, 0x4e, 0xab, 0xf3, 0x62, 0xb5, 0x25, 0x41, 0x33, 0x04, 0x29,
	0x11, 0xfa, 0x42, 0x2a, 0xf4, 0xda, 0x53, 0x80, 0xc9, 0x20, 0x19, 0x61, 0x96, 0x61, 0xa9, 0x63,
	0xaa, 0x1a, 0x33, 0x74, 0x53, 0x23, 0x39, 0xac, 0xa6, 0xcf, 0x39, 0x24, 0x5f, 0xfb, 0x73, 0x0e,
	0x16, 0xec, 0xc8, 0x8d, 0xc6, 0xe1, 0xf4, 0x2f, 0x1e, 0xb9, 0x99, 0x5f, 0x3c, 0xd2, 0x5f, 0x50,
	0xf2, 0x7f, 0xd9, 0x2f, 0x28, 0xdf, 0x42, 0xb9, 0xeb, 0x0f, 0xbd, 0xd7, 0x6e, 0xf7, 0xed, 0x5f,
	0xf8, 0x0e, 0xb7, 0x9c, 0xe0, 0xb1, 0x56, 0xfb, 0x35, 0x94, 0x93, 0xb4, 0x14, 0x73, 0x47, 0x27,
	0x1e, 0xea, 0x3e, 0x36, 0xa6, 0x9c, 0x08, 0xb5, 0xe2, 0x1a, 0xd2, 0x63, 0x29, 0xc9, 0x77, 0xc0,
	0xb8, 0x56, 0xfb, 0x5f, 0x80, 0x05, 0x6b, 0x1c, 0x61, 0xec, 0x25, 0x43, 0xa9, 0x5c, 0x1a, 0x4a,
	0xfd, 0xcc, 0xa5, 0x6c, 0x42, 0xb1, 0xeb, 0x8f, 0xc2, 0xf1, 0xd0, 0xeb, 0xc9, 0xac, 0x25, 0x4b,
	0xeb, 0x74, 0x1b, 0x16, 0x02, 0x61, 0xc1, 0x71, 0xb8, 0x45, 0x66, 0x37, 0x11, 0x8b, 0xf9, 0x18,
	0x8f, 0x9c, 0x49, 0x9b, 0x88, 0xc3, 0xac, 0xd5, 0x0b, 0xc6, 0xc2, 0x12, 0x84, 0x0c, 0x9c, 0x92,
	0xeb, 0x70, 0x1c, 0x68, 0x4d, 0x05, 0x4e, 0x09, 0x8f, 0x65, 0x70, 0x49, 0x88, 0xb8, 0x78, 0x7d,
	0x88, 0x48, 0x60, 0x6e, 0x1c, 0x0c, 0x44, 0x44, 0xb5, 0xc4, 0xb0, 0x98, 0x09, 0x00, 0x97, 0x7e,
	0x3a, 0x00, 0x34, 0x44, 0x72, 0x18, 0x67, 0xc9, 0x87, 0x5e, 0x74, 0xea, 0xf7, 0x44, 0xac, 0x34,
	0xf5, 0xef, 0x8d, 0x14, 0x7b, 0xb2, 0xaa, 0x96, 0x40, 0xbd, 0x9c, 0x17, 0x57, 0x48, 0x91, 0x43,
	0x9e, 0x50, 0xe9, 0x01, 0x80, 0x17, 0x04, 0x7e, 0x20, 0xff, 0x12, 0x2a, 0x89, 0x9e, 0x36, 0x2f,
	0xf4, 0xa4, 0x21, 0xa4, 0xee, 0xf7, 0xbc, 0x97, 0x2b, 0xb1, 0x7f, 0xe4, 0x76, 0xa7, 0x5e, 0xd7,
	0x6c, 0x9b, 0x2d, 0x79, 0x09, 0x0f, 0x75, 0x11, 0x0a, 0x4b, 0x8e, 0x03, 0xa6, 0x8c, 0x2e, 0xa4,
	0x85, 0xb3, 0x98, 0x4f, 0xf7, 0x61, 0xcd, 0x1d, 0x0c, 0xf8, 0x24, 0x83, 0xf1, 0xbd, 0x1f, 0xf4,
	0x42, 0x11, 0x07, 0x95, 0x76, 0x6f, 0x5d, 0x22, 0x67, 0xa3, 0x1f, 0x46, 0x6c, 0xd5, 0x1d, 0x0c,
	0x52, 0xca, 0x11, 0xb6, 0xa0, 0xdf, 0x42, 0x25, 0x49, 0xd7, 0xf2, 0x00, 0xcd, 0x54, 0x24, 0x33,
	0xa6, 0xfa, 0x98, 0xb2, 0x62, 0x56, 0xee, 0x4d, 0x19, 0xb5, 0x01, 0x64, 0xe0, 0x8e, 0x47, 0xdd,
	0x53, 0x1e, 0xf9, 0xfe, 0x40, 0x6e, 0x94, 0xd5, 0x59, 0xab, 0x8c, 0x85, 0xe0, 0xf8, 0xfe, 0x00,
	0xad, 0xf2, 0xe5, 0xa2, 0x69, 0x71, 0xc7, 0xb2, 0x0c, 0x56, 0x91, 0x6d, 0x13, 0x06, 0x7d, 0x06,
	0xc5, 0xae, 0x3b, 0x18, 0xe0, 0x1e, 0xaa, 0xd2, 0xd9, 0x80, 0x39, 0xee, 0xa5, 0x1e, 0x03, 0x58,
	0x0a, 0xbd, 0x18, 0xfc, 0xae, 0xfd, 0xfc, 0xe0, 0xf7, 0x1d, 0xdc, 0xbf, 0x22, 0x7a, 0xe5, 0xb1,
	0x4e, 0x36, 0x44, 0xa7, 0x8f, 0x7f, 0x46, 0x10, 0x1b, 0x2b, 0xed, 0xce, 0xf8, 0x6a, 0x26, 0x75,
	0xe0, 0xe6, 0x6c, 0x6c, 0x1a, 0x9e, 0xf9, 0xa3, 0xd0, 0xab, 0xde, 0x14, 0xe3, 0xdd, 0xbf, 0x2a,
	0x38, 0x95, 0x28, 0xb6, 0xee, 0x5d, 0x42, 0xdd, 0x8c, 0xa0, 0x98, 0xc8, 0x89, 0x2a, 0xb0, 0x12,
	0xca, 0x8b, 0x53, 0x1a, 0x8f, 0xe7, 0x7e, 0xe2, 0x66, 0x55, 0x09, 0xa7, 0x7f, 0x70, 0xf8, 0x58,
	0x58, 0x89, 0x7b, 0xce, 0x87, 0xfd, 0xc1, 0xa0, 0x1f, 0x7a, 0xdd, 0xf8, 0x42, 0x59, 0x16, 0xd4,
	0x56, 0x4c, 0xac, 0x3d, 0x80, 0xf2, 0xd4, 0x96, 0x91, 0xff, 0x84, 0xd4, 0x75, 0x9d, 0xdc, 0x48,
	0x7f, 0xe8, 0xca, 0xd5, 0x9e, 0xc1, 0x52, 0xba, 0x1d, 0x30, 0x48, 0x98, 0xd9, 0x10, 0xe4, 0x46,
	0x96, 0xd8, 0x50, 0x74, 0xa3, 0xc3, 0x34, 0x92, 0xab, 0x1d, 0x43, 0x31, 0xb5, 0x93, 0x12, 0x24,
	0x26, 0x44, 0x6e, 0x88, 0xe0, 0x45, 0xc4, 0x81, 0xf1, 0x9b, 0x1a, 0xc9, 0x61, 0x07, 0x99, 0x90,
	0x45, 0xe0, 0xf2, 0xb4, 0x0a, 0xeb, 0x47, 0x16, 0xc3, 0x08, 0x65, 0x5f, 0xb7, 0x1d, 0x11, 0xd5,
	0x08, 0x38, 0xc6, 0x15, 0xcb, 0xa4, 0x7c, 0x50, 0x28, 0xae, 0x10, 0x72, 0x50, 0x28, 0xae, 0x93,
	0x8d, 0xda, 0xef, 0x60, 0x71, 0xb2, 0xf6, 0x79, 0x99, 0x9a, 0x44, 0x8f, 0x5d, 0xda, 0x5d, 0x99,
	0x89, 0x9e, 0x99, 0xe4, 0xe2, 0xde, 0xf5, 0x85, 0x81, 0x8a, 0xd0, 0x62, 0x6a, 0xef, 0x4a, 0xc3,
	0x65, 0x31, 0xbf, 0xf6, 0xab, 0x34, 0xae, 0xc6, 0x4d, 0x49, 0xbf, 0x84, 0xf4, 0x77, 0xd7, 0x6a,
	0x4e, 0x04, 0xe8, 0x53, 0x17, 0x52, 0xa9, 0x90, 0x14, 0xf2, 0xf9, 0xdf, 0xe6, 0x60, 0x65, 0xe6,
	0x94, 0x97, 0xbf, 0x50, 0x31, 0xad, 0xee, 0x90, 0x1b, 0x18, 0x31, 0xa5, 0xc9, 0x30, 0xf1, 0xff,
	0x4a, 0xa3, 0x63, 0x18, 0x3c, 0xfd, 0x43, 0x4a, 0x64, 0x4b, 0x9a, 0x8a, 0xd1, 0xe0, 0x52, 0x31,
	0x73, 0x58, 0x17, 0x10, 0x59, 0x2f, 0x60, 0x13, 0xc1, 0x4f, 0x9b, 0xcc, 0x8b, 0x5c, 0x5b, 0x1a,
	0xc9, 0x25, 0xa9, 0x22, 0x9b, 0x2c, 0xec, 0x0d, 0x60, 0xc7, 0x0f, 0x4e, 0xe4, 0x8e, 0x70, 0x47,
	0xbd, 0xc0, 0xef, 0xf7, 0x76, 0x84, 0x38, 0xe4, 0xc1, 0xba, 0xf3, 0x07, 0xf7, 0xcc, 0x1d, 0x79,
	0x61, 0xfc, 0xef, 0xec, 0xeb, 0xf1, 0x9b, 0xbd, 0x72, 0x1b, 0x4b, 0xf1, 0xb2, 0xc2, 0xdf, 0x7d,
	0x71, 0xd2, 0x8f, 0x4e, 0xc7, 0xaf, 0x71, 0xc1, 0x0f, 0x23, 0x7f, 0x78, 0xfe, 0xd6, 0xed, 0x07,
	0xee, 0xc3, 0x61, 0xf8, 0xf6, 0x6d, 0xe8, 0x05, 0xef, 0x1e, 0x4e, 0xfd, 0xc3, 0xfb, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x69, 0xd3, 0xe8, 0x61, 0x35, 0x2c, 0x00, 0x00,
}
