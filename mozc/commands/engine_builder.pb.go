// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/commands/engine_builder.proto

package commands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Specify the type of engine to build.
type EngineReloadRequest_EngineType int32

const (
	EngineReloadRequest_DESKTOP EngineReloadRequest_EngineType = 0
	EngineReloadRequest_MOBILE  EngineReloadRequest_EngineType = 1
)

var EngineReloadRequest_EngineType_name = map[int32]string{
	0: "DESKTOP",
	1: "MOBILE",
}
var EngineReloadRequest_EngineType_value = map[string]int32{
	"DESKTOP": 0,
	"MOBILE":  1,
}

func (x EngineReloadRequest_EngineType) Enum() *EngineReloadRequest_EngineType {
	p := new(EngineReloadRequest_EngineType)
	*p = x
	return p
}
func (x EngineReloadRequest_EngineType) String() string {
	return proto.EnumName(EngineReloadRequest_EngineType_name, int32(x))
}
func (x *EngineReloadRequest_EngineType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EngineReloadRequest_EngineType_value, data, "EngineReloadRequest_EngineType")
	if err != nil {
		return err
	}
	*x = EngineReloadRequest_EngineType(value)
	return nil
}
func (EngineReloadRequest_EngineType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0}
}

type EngineReloadResponse_Status int32

const (
	// Reload command is accepted.
	EngineReloadResponse_ACCEPTED EngineReloadResponse_Status = 0
	// New data is verified and ready.
	EngineReloadResponse_RELOAD_READY EngineReloadResponse_Status = 1
	// Engine was replaced by a new instance.
	EngineReloadResponse_RELOADED EngineReloadResponse_Status = 2
	// Failed to start reload becuase another reload job is currently running.
	EngineReloadResponse_ALREADY_RUNNING EngineReloadResponse_Status = 3
	// Erros in data file.
	EngineReloadResponse_ENGINE_VERSION_MISMATCH EngineReloadResponse_Status = 4
	EngineReloadResponse_DATA_MISSING            EngineReloadResponse_Status = 5
	EngineReloadResponse_DATA_BROKEN             EngineReloadResponse_Status = 6
	// File doesn't exist or underlying memory mapping failed.
	EngineReloadResponse_MMAP_FAILURE EngineReloadResponse_Status = 7
	// File rename is failed.
	EngineReloadResponse_INSTALL_FAILURE EngineReloadResponse_Status = 8
	EngineReloadResponse_UNKNOWN_ERROR   EngineReloadResponse_Status = 9
)

var EngineReloadResponse_Status_name = map[int32]string{
	0: "ACCEPTED",
	1: "RELOAD_READY",
	2: "RELOADED",
	3: "ALREADY_RUNNING",
	4: "ENGINE_VERSION_MISMATCH",
	5: "DATA_MISSING",
	6: "DATA_BROKEN",
	7: "MMAP_FAILURE",
	8: "INSTALL_FAILURE",
	9: "UNKNOWN_ERROR",
}
var EngineReloadResponse_Status_value = map[string]int32{
	"ACCEPTED":                0,
	"RELOAD_READY":            1,
	"RELOADED":                2,
	"ALREADY_RUNNING":         3,
	"ENGINE_VERSION_MISMATCH": 4,
	"DATA_MISSING":            5,
	"DATA_BROKEN":             6,
	"MMAP_FAILURE":            7,
	"INSTALL_FAILURE":         8,
	"UNKNOWN_ERROR":           9,
}

func (x EngineReloadResponse_Status) Enum() *EngineReloadResponse_Status {
	p := new(EngineReloadResponse_Status)
	*p = x
	return p
}
func (x EngineReloadResponse_Status) String() string {
	return proto.EnumName(EngineReloadResponse_Status_name, int32(x))
}
func (x *EngineReloadResponse_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EngineReloadResponse_Status_value, data, "EngineReloadResponse_Status")
	if err != nil {
		return err
	}
	*x = EngineReloadResponse_Status(value)
	return nil
}
func (EngineReloadResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1, 0}
}

type EngineReloadRequest struct {
	EngineType *EngineReloadRequest_EngineType `protobuf:"varint,1,req,name=engine_type,json=engineType,enum=commands.EngineReloadRequest_EngineType" json:"engine_type,omitempty"`
	// Path to the data file to be loaded in a new engine.
	FilePath *string `protobuf:"bytes,2,req,name=file_path,json=filePath" json:"file_path,omitempty"`
	// If provided, also atomically renames |file_path| to this location.  Since
	// EngineBuilder validates the data file content before creating a new engine
	// instance, this option is useful when you want to perform i) data
	// verification, ii) install (file rename), and iii) engine reload at the same
	// time in Mozc server side.
	InstallLocation *string `protobuf:"bytes,3,opt,name=install_location,json=installLocation" json:"install_location,omitempty"`
	// Explicitly specifies the magic number to be used for data validation.
	// Since acceptable magic number is embedded in Mozc server, this option is
	// unnecessary for normal cases.  However, this is required for some unit
	// tests as test data has a different magic number.
	MagicNumber      *string `protobuf:"bytes,4,opt,name=magic_number,json=magicNumber" json:"magic_number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EngineReloadRequest) Reset()                    { *m = EngineReloadRequest{} }
func (m *EngineReloadRequest) String() string            { return proto.CompactTextString(m) }
func (*EngineReloadRequest) ProtoMessage()               {}
func (*EngineReloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *EngineReloadRequest) GetEngineType() EngineReloadRequest_EngineType {
	if m != nil && m.EngineType != nil {
		return *m.EngineType
	}
	return EngineReloadRequest_DESKTOP
}

func (m *EngineReloadRequest) GetFilePath() string {
	if m != nil && m.FilePath != nil {
		return *m.FilePath
	}
	return ""
}

func (m *EngineReloadRequest) GetInstallLocation() string {
	if m != nil && m.InstallLocation != nil {
		return *m.InstallLocation
	}
	return ""
}

func (m *EngineReloadRequest) GetMagicNumber() string {
	if m != nil && m.MagicNumber != nil {
		return *m.MagicNumber
	}
	return ""
}

type EngineReloadResponse struct {
	Status *EngineReloadResponse_Status `protobuf:"varint,1,req,name=status,enum=commands.EngineReloadResponse_Status" json:"status,omitempty"`
	// The original request is copied in response for convenience (the reload
	// command runs asynchronously but client doesn't need to keep the original
	// request).
	Request          *EngineReloadRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *EngineReloadResponse) Reset()                    { *m = EngineReloadResponse{} }
func (m *EngineReloadResponse) String() string            { return proto.CompactTextString(m) }
func (*EngineReloadResponse) ProtoMessage()               {}
func (*EngineReloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *EngineReloadResponse) GetStatus() EngineReloadResponse_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EngineReloadResponse_ACCEPTED
}

func (m *EngineReloadResponse) GetRequest() *EngineReloadRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*EngineReloadRequest)(nil), "commands.EngineReloadRequest")
	proto.RegisterType((*EngineReloadResponse)(nil), "commands.EngineReloadResponse")
	proto.RegisterEnum("commands.EngineReloadRequest_EngineType", EngineReloadRequest_EngineType_name, EngineReloadRequest_EngineType_value)
	proto.RegisterEnum("commands.EngineReloadResponse_Status", EngineReloadResponse_Status_name, EngineReloadResponse_Status_value)
}

func init() { proto.RegisterFile("mozc/commands/engine_builder.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6a, 0xdb, 0x4c,
	0x14, 0xc5, 0x23, 0x25, 0x9f, 0x63, 0x5f, 0xe7, 0x6b, 0xa6, 0x93, 0x42, 0x0d, 0xa1, 0xe0, 0x1a,
	0x02, 0x2e, 0x05, 0x19, 0xb2, 0xe9, 0xaa, 0x0b, 0x39, 0x9a, 0xa6, 0xc2, 0xf2, 0xc8, 0x8c, 0xe4,
	0x96, 0x76, 0x23, 0xc6, 0xd6, 0xc4, 0x56, 0x2d, 0x69, 0x14, 0x69, 0x54, 0x70, 0xdf, 0xaf, 0xaf,
	0xd0, 0x07, 0xe9, 0x13, 0x14, 0xfd, 0x71, 0x4a, 0xa0, 0xed, 0x6e, 0xf8, 0xdd, 0x73, 0xae, 0x74,
	0x0f, 0x07, 0x46, 0x89, 0xfc, 0xb6, 0x9e, 0xac, 0x65, 0x92, 0xf0, 0x34, 0x2c, 0x26, 0x22, 0xdd,
	0x44, 0xa9, 0x08, 0x56, 0x65, 0x14, 0x87, 0x22, 0x37, 0xb2, 0x5c, 0x2a, 0x89, 0xbb, 0x87, 0xf1,
	0xe8, 0xa7, 0x06, 0x17, 0xa4, 0x96, 0x30, 0x11, 0x4b, 0x1e, 0x32, 0x71, 0x5f, 0x8a, 0x42, 0x61,
	0x1b, 0xfa, 0xad, 0x53, 0xed, 0x33, 0x31, 0xd0, 0x86, 0xfa, 0xf8, 0xc9, 0xf5, 0xd8, 0x38, 0xf8,
	0x8c, 0x3f, 0x78, 0x5a, 0xe6, 0xef, 0x33, 0xc1, 0x40, 0x3c, 0xbc, 0xf1, 0x25, 0xf4, 0xee, 0xa2,
	0x58, 0x04, 0x19, 0x57, 0xdb, 0x81, 0x3e, 0xd4, 0xc7, 0x3d, 0xd6, 0xad, 0xc0, 0x82, 0xab, 0x2d,
	0x7e, 0x05, 0x28, 0x4a, 0x0b, 0xc5, 0xe3, 0x38, 0x88, 0xe5, 0x9a, 0xab, 0x48, 0xa6, 0x83, 0xe3,
	0xa1, 0x36, 0xee, 0xb1, 0xf3, 0x96, 0x3b, 0x2d, 0xc6, 0x2f, 0xe1, 0x2c, 0xe1, 0x9b, 0x68, 0x1d,
	0xa4, 0x65, 0xb2, 0x12, 0xf9, 0xe0, 0xa4, 0x96, 0xf5, 0x6b, 0x46, 0x6b, 0x34, 0xba, 0x02, 0xf8,
	0xfd, 0x13, 0xb8, 0x0f, 0xa7, 0x16, 0xf1, 0x66, 0xbe, 0xbb, 0x40, 0x47, 0x18, 0xa0, 0x33, 0x77,
	0xa7, 0xb6, 0x43, 0x90, 0x36, 0xfa, 0xa1, 0xc3, 0xb3, 0xc7, 0x07, 0x14, 0x99, 0x4c, 0x0b, 0x81,
	0xdf, 0x42, 0xa7, 0x50, 0x5c, 0x95, 0x45, 0x7b, 0xf0, 0xd5, 0xdf, 0x0e, 0x6e, 0xf4, 0x86, 0x57,
	0x8b, 0x59, 0x6b, 0xc2, 0x6f, 0xe0, 0x34, 0x6f, 0xb2, 0x18, 0xe8, 0x43, 0x6d, 0xdc, 0xbf, 0x7e,
	0xf1, 0xcf, 0xc0, 0xd8, 0x41, 0x3d, 0xfa, 0xae, 0x41, 0xa7, 0xd9, 0x85, 0xcf, 0xa0, 0x6b, 0xde,
	0xdc, 0x90, 0x85, 0x4f, 0x2c, 0x74, 0x84, 0x11, 0x9c, 0x31, 0xe2, 0xb8, 0xa6, 0x15, 0x30, 0x62,
	0x5a, 0x9f, 0x90, 0x56, 0xcd, 0x1b, 0x42, 0x2c, 0xa4, 0xe3, 0x0b, 0x38, 0x37, 0x9d, 0x7a, 0x14,
	0xb0, 0x25, 0xa5, 0x36, 0xbd, 0x45, 0xc7, 0xf8, 0x12, 0x9e, 0x13, 0x7a, 0x6b, 0x53, 0x12, 0x7c,
	0x20, 0xcc, 0xb3, 0x5d, 0x1a, 0xcc, 0x6d, 0x6f, 0x6e, 0xfa, 0x37, 0xef, 0xd1, 0x49, 0xb5, 0xd1,
	0x32, 0x7d, 0xb3, 0x42, 0x5e, 0x25, 0xff, 0x0f, 0x9f, 0x43, 0xbf, 0x26, 0x53, 0xe6, 0xce, 0x08,
	0x45, 0x9d, 0x4a, 0x32, 0x9f, 0x9b, 0x8b, 0xe0, 0x9d, 0x69, 0x3b, 0x4b, 0x46, 0xd0, 0x69, 0xf5,
	0x19, 0x9b, 0x7a, 0xbe, 0xe9, 0x38, 0x0f, 0xb0, 0x8b, 0x9f, 0xc2, 0xff, 0x4b, 0x3a, 0xa3, 0xee,
	0x47, 0x1a, 0x10, 0xc6, 0x5c, 0x86, 0x7a, 0xd3, 0x7b, 0x30, 0x64, 0xbe, 0x31, 0xaa, 0x06, 0x1a,
	0x3c, 0x0d, 0x73, 0x19, 0x85, 0x46, 0x94, 0x66, 0xa5, 0x4a, 0x84, 0xda, 0xca, 0xd0, 0xf8, 0xc2,
	0x33, 0x9e, 0x8a, 0x42, 0x34, 0x35, 0x5c, 0x95, 0x77, 0x53, 0xbc, 0xa8, 0x5e, 0x4d, 0x38, 0xd3,
	0xa6, 0xa3, 0x9f, 0x5f, 0x6f, 0x22, 0xb5, 0x2d, 0x57, 0x55, 0x76, 0x13, 0x25, 0x93, 0xfd, 0x8e,
	0x47, 0x39, 0x9f, 0x24, 0xc5, 0x6e, 0x57, 0x88, 0xfc, 0xeb, 0xe4, 0x51, 0xbf, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xf3, 0xca, 0x08, 0x9d, 0xef, 0x02, 0x00, 0x00,
}
