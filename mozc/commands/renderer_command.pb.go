// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mozc/commands/renderer_command.proto

package commands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RendererCommand_CommandType int32

const (
	RendererCommand_NOOP     RendererCommand_CommandType = 0
	RendererCommand_UPDATE   RendererCommand_CommandType = 1
	RendererCommand_SHUTDOWN RendererCommand_CommandType = 2
)

var RendererCommand_CommandType_name = map[int32]string{
	0: "NOOP",
	1: "UPDATE",
	2: "SHUTDOWN",
}
var RendererCommand_CommandType_value = map[string]int32{
	"NOOP":     0,
	"UPDATE":   1,
	"SHUTDOWN": 2,
}

func (x RendererCommand_CommandType) Enum() *RendererCommand_CommandType {
	p := new(RendererCommand_CommandType)
	*p = x
	return p
}
func (x RendererCommand_CommandType) String() string {
	return proto.EnumName(RendererCommand_CommandType_name, int32(x))
}
func (x *RendererCommand_CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RendererCommand_CommandType_value, data, "RendererCommand_CommandType")
	if err != nil {
		return err
	}
	*x = RendererCommand_CommandType(value)
	return nil
}
func (RendererCommand_CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0}
}

// Used as bit flags in |style_bits|.
// These constants correspond to CFS_* in Imm.h
type RendererCommand_CompositionForm_Style int32

const (
	RendererCommand_CompositionForm_DEFAULT        RendererCommand_CompositionForm_Style = 0
	RendererCommand_CompositionForm_RECT           RendererCommand_CompositionForm_Style = 1
	RendererCommand_CompositionForm_POINT          RendererCommand_CompositionForm_Style = 2
	RendererCommand_CompositionForm_FORCE_POSITION RendererCommand_CompositionForm_Style = 32
)

var RendererCommand_CompositionForm_Style_name = map[int32]string{
	0:  "DEFAULT",
	1:  "RECT",
	2:  "POINT",
	32: "FORCE_POSITION",
}
var RendererCommand_CompositionForm_Style_value = map[string]int32{
	"DEFAULT":        0,
	"RECT":           1,
	"POINT":          2,
	"FORCE_POSITION": 32,
}

func (x RendererCommand_CompositionForm_Style) Enum() *RendererCommand_CompositionForm_Style {
	p := new(RendererCommand_CompositionForm_Style)
	*p = x
	return p
}
func (x RendererCommand_CompositionForm_Style) String() string {
	return proto.EnumName(RendererCommand_CompositionForm_Style_name, int32(x))
}
func (x *RendererCommand_CompositionForm_Style) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RendererCommand_CompositionForm_Style_value, data, "RendererCommand_CompositionForm_Style")
	if err != nil {
		return err
	}
	*x = RendererCommand_CompositionForm_Style(value)
	return nil
}
func (RendererCommand_CompositionForm_Style) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 3, 0}
}

// Used as bit flags in |style_bits|.
// These constants correspond to CFS_* in Imm.h
type RendererCommand_CandidateForm_Style int32

const (
	RendererCommand_CandidateForm_DEFAULT      RendererCommand_CandidateForm_Style = 0
	RendererCommand_CandidateForm_CANDIDATEPOS RendererCommand_CandidateForm_Style = 64
	RendererCommand_CandidateForm_EXCLUDE      RendererCommand_CandidateForm_Style = 128
)

var RendererCommand_CandidateForm_Style_name = map[int32]string{
	0:   "DEFAULT",
	64:  "CANDIDATEPOS",
	128: "EXCLUDE",
}
var RendererCommand_CandidateForm_Style_value = map[string]int32{
	"DEFAULT":      0,
	"CANDIDATEPOS": 64,
	"EXCLUDE":      128,
}

func (x RendererCommand_CandidateForm_Style) Enum() *RendererCommand_CandidateForm_Style {
	p := new(RendererCommand_CandidateForm_Style)
	*p = x
	return p
}
func (x RendererCommand_CandidateForm_Style) String() string {
	return proto.EnumName(RendererCommand_CandidateForm_Style_name, int32(x))
}
func (x *RendererCommand_CandidateForm_Style) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RendererCommand_CandidateForm_Style_value, data, "RendererCommand_CandidateForm_Style")
	if err != nil {
		return err
	}
	*x = RendererCommand_CandidateForm_Style(value)
	return nil
}
func (RendererCommand_CandidateForm_Style) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 4, 0}
}

// Represents IM Framework used in the client.
// Currently only Windows IM frameworks are supported.
type RendererCommand_ApplicationInfo_InputFrameworkType int32

const (
	RendererCommand_ApplicationInfo_UNKNOWN_FRAMEWORK RendererCommand_ApplicationInfo_InputFrameworkType = 0
	RendererCommand_ApplicationInfo_TSF               RendererCommand_ApplicationInfo_InputFrameworkType = 1
	RendererCommand_ApplicationInfo_IMM32             RendererCommand_ApplicationInfo_InputFrameworkType = 2
	RendererCommand_ApplicationInfo_IMKit             RendererCommand_ApplicationInfo_InputFrameworkType = 3
	RendererCommand_ApplicationInfo_IBus              RendererCommand_ApplicationInfo_InputFrameworkType = 4
)

var RendererCommand_ApplicationInfo_InputFrameworkType_name = map[int32]string{
	0: "UNKNOWN_FRAMEWORK",
	1: "TSF",
	2: "IMM32",
	3: "IMKit",
	4: "IBus",
}
var RendererCommand_ApplicationInfo_InputFrameworkType_value = map[string]int32{
	"UNKNOWN_FRAMEWORK": 0,
	"TSF":               1,
	"IMM32":             2,
	"IMKit":             3,
	"IBus":              4,
}

func (x RendererCommand_ApplicationInfo_InputFrameworkType) Enum() *RendererCommand_ApplicationInfo_InputFrameworkType {
	p := new(RendererCommand_ApplicationInfo_InputFrameworkType)
	*p = x
	return p
}
func (x RendererCommand_ApplicationInfo_InputFrameworkType) String() string {
	return proto.EnumName(RendererCommand_ApplicationInfo_InputFrameworkType_name, int32(x))
}
func (x *RendererCommand_ApplicationInfo_InputFrameworkType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RendererCommand_ApplicationInfo_InputFrameworkType_value, data, "RendererCommand_ApplicationInfo_InputFrameworkType")
	if err != nil {
		return err
	}
	*x = RendererCommand_ApplicationInfo_InputFrameworkType(value)
	return nil
}
func (RendererCommand_ApplicationInfo_InputFrameworkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 8, 0}
}

// used in Windows:
// Indicates if a UI element is expected to be displayed or not.  Note
// taht |RendererCommand::visible| should be prior to these flags, that is,
// you should hide all UI elements if |RendererCommand::visible| is false
// regardless of the visibility specified in this field.
type RendererCommand_ApplicationInfo_UIVisibility int32

const (
	RendererCommand_ApplicationInfo_ShowUIDefault         RendererCommand_ApplicationInfo_UIVisibility = 0
	RendererCommand_ApplicationInfo_ShowCompositionWindow RendererCommand_ApplicationInfo_UIVisibility = 1
	RendererCommand_ApplicationInfo_ShowCandidateWindow   RendererCommand_ApplicationInfo_UIVisibility = 2
	RendererCommand_ApplicationInfo_ShowSuggestWindow     RendererCommand_ApplicationInfo_UIVisibility = 4
)

var RendererCommand_ApplicationInfo_UIVisibility_name = map[int32]string{
	0: "ShowUIDefault",
	1: "ShowCompositionWindow",
	2: "ShowCandidateWindow",
	4: "ShowSuggestWindow",
}
var RendererCommand_ApplicationInfo_UIVisibility_value = map[string]int32{
	"ShowUIDefault":         0,
	"ShowCompositionWindow": 1,
	"ShowCandidateWindow":   2,
	"ShowSuggestWindow":     4,
}

func (x RendererCommand_ApplicationInfo_UIVisibility) Enum() *RendererCommand_ApplicationInfo_UIVisibility {
	p := new(RendererCommand_ApplicationInfo_UIVisibility)
	*p = x
	return p
}
func (x RendererCommand_ApplicationInfo_UIVisibility) String() string {
	return proto.EnumName(RendererCommand_ApplicationInfo_UIVisibility_name, int32(x))
}
func (x *RendererCommand_ApplicationInfo_UIVisibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RendererCommand_ApplicationInfo_UIVisibility_value, data, "RendererCommand_ApplicationInfo_UIVisibility")
	if err != nil {
		return err
	}
	*x = RendererCommand_ApplicationInfo_UIVisibility(value)
	return nil
}
func (RendererCommand_ApplicationInfo_UIVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 8, 1}
}

type RendererCommand struct {
	Type *RendererCommand_CommandType `protobuf:"varint,1,opt,name=type,enum=commands.RendererCommand_CommandType,def=0" json:"type,omitempty"`
	// set visibility
	// if visible is false, the content of output
	// is basically ignored.
	Visible *bool   `protobuf:"varint,2,opt,name=visible,def=0" json:"visible,omitempty"`
	Output  *Output `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
	// Preedit rectangle
	PreeditRectangle *RendererCommand_Rectangle       `protobuf:"bytes,4,opt,name=preedit_rectangle,json=preeditRectangle" json:"preedit_rectangle,omitempty"`
	ApplicationInfo  *RendererCommand_ApplicationInfo `protobuf:"bytes,5,opt,name=application_info,json=applicationInfo" json:"application_info,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *RendererCommand) Reset()                    { *m = RendererCommand{} }
func (m *RendererCommand) String() string            { return proto.CompactTextString(m) }
func (*RendererCommand) ProtoMessage()               {}
func (*RendererCommand) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

const Default_RendererCommand_Type RendererCommand_CommandType = RendererCommand_NOOP
const Default_RendererCommand_Visible bool = false

func (m *RendererCommand) GetType() RendererCommand_CommandType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_RendererCommand_Type
}

func (m *RendererCommand) GetVisible() bool {
	if m != nil && m.Visible != nil {
		return *m.Visible
	}
	return Default_RendererCommand_Visible
}

func (m *RendererCommand) GetOutput() *Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *RendererCommand) GetPreeditRectangle() *RendererCommand_Rectangle {
	if m != nil {
		return m.PreeditRectangle
	}
	return nil
}

func (m *RendererCommand) GetApplicationInfo() *RendererCommand_ApplicationInfo {
	if m != nil {
		return m.ApplicationInfo
	}
	return nil
}

type RendererCommand_Rectangle struct {
	Left             *int32 `protobuf:"varint,1,opt,name=left" json:"left,omitempty"`
	Top              *int32 `protobuf:"varint,2,opt,name=top" json:"top,omitempty"`
	Right            *int32 `protobuf:"varint,3,opt,name=right" json:"right,omitempty"`
	Bottom           *int32 `protobuf:"varint,4,opt,name=bottom" json:"bottom,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RendererCommand_Rectangle) Reset()                    { *m = RendererCommand_Rectangle{} }
func (m *RendererCommand_Rectangle) String() string            { return proto.CompactTextString(m) }
func (*RendererCommand_Rectangle) ProtoMessage()               {}
func (*RendererCommand_Rectangle) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *RendererCommand_Rectangle) GetLeft() int32 {
	if m != nil && m.Left != nil {
		return *m.Left
	}
	return 0
}

func (m *RendererCommand_Rectangle) GetTop() int32 {
	if m != nil && m.Top != nil {
		return *m.Top
	}
	return 0
}

func (m *RendererCommand_Rectangle) GetRight() int32 {
	if m != nil && m.Right != nil {
		return *m.Right
	}
	return 0
}

func (m *RendererCommand_Rectangle) GetBottom() int32 {
	if m != nil && m.Bottom != nil {
		return *m.Bottom
	}
	return 0
}

type RendererCommand_Point struct {
	X                *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RendererCommand_Point) Reset()                    { *m = RendererCommand_Point{} }
func (m *RendererCommand_Point) String() string            { return proto.CompactTextString(m) }
func (*RendererCommand_Point) ProtoMessage()               {}
func (*RendererCommand_Point) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *RendererCommand_Point) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *RendererCommand_Point) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

// TODO(yukawa): make a common font format for all platforms.
type RendererCommand_WinLogFont struct {
	Height           *int32  `protobuf:"varint,1,opt,name=height,def=0" json:"height,omitempty"`
	Width            *int32  `protobuf:"varint,2,opt,name=width,def=0" json:"width,omitempty"`
	Escapement       *int32  `protobuf:"varint,3,opt,name=escapement,def=0" json:"escapement,omitempty"`
	Orientation      *int32  `protobuf:"varint,4,opt,name=orientation,def=0" json:"orientation,omitempty"`
	Weight           *int32  `protobuf:"varint,5,opt,name=weight,def=0" json:"weight,omitempty"`
	Italic           *bool   `protobuf:"varint,6,opt,name=italic,def=0" json:"italic,omitempty"`
	Underline        *bool   `protobuf:"varint,7,opt,name=underline,def=0" json:"underline,omitempty"`
	StrikeOut        *bool   `protobuf:"varint,8,opt,name=strike_out,json=strikeOut,def=0" json:"strike_out,omitempty"`
	CharSet          *int32  `protobuf:"varint,9,opt,name=char_set,json=charSet,def=1" json:"char_set,omitempty"`
	OutPrecision     *int32  `protobuf:"varint,10,opt,name=out_precision,json=outPrecision,def=0" json:"out_precision,omitempty"`
	ClipPrecision    *int32  `protobuf:"varint,11,opt,name=clip_precision,json=clipPrecision,def=0" json:"clip_precision,omitempty"`
	Quality          *int32  `protobuf:"varint,12,opt,name=quality,def=0" json:"quality,omitempty"`
	PitchAndFamily   *int32  `protobuf:"varint,13,opt,name=pitch_and_family,json=pitchAndFamily,def=0" json:"pitch_and_family,omitempty"`
	FaceName         *string `protobuf:"bytes,14,opt,name=face_name,json=faceName" json:"face_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RendererCommand_WinLogFont) Reset()                    { *m = RendererCommand_WinLogFont{} }
func (m *RendererCommand_WinLogFont) String() string            { return proto.CompactTextString(m) }
func (*RendererCommand_WinLogFont) ProtoMessage()               {}
func (*RendererCommand_WinLogFont) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2} }

const Default_RendererCommand_WinLogFont_Height int32 = 0
const Default_RendererCommand_WinLogFont_Width int32 = 0
const Default_RendererCommand_WinLogFont_Escapement int32 = 0
const Default_RendererCommand_WinLogFont_Orientation int32 = 0
const Default_RendererCommand_WinLogFont_Weight int32 = 0
const Default_RendererCommand_WinLogFont_Italic bool = false
const Default_RendererCommand_WinLogFont_Underline bool = false
const Default_RendererCommand_WinLogFont_StrikeOut bool = false
const Default_RendererCommand_WinLogFont_CharSet int32 = 1
const Default_RendererCommand_WinLogFont_OutPrecision int32 = 0
const Default_RendererCommand_WinLogFont_ClipPrecision int32 = 0
const Default_RendererCommand_WinLogFont_Quality int32 = 0
const Default_RendererCommand_WinLogFont_PitchAndFamily int32 = 0

func (m *RendererCommand_WinLogFont) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return Default_RendererCommand_WinLogFont_Height
}

func (m *RendererCommand_WinLogFont) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return Default_RendererCommand_WinLogFont_Width
}

func (m *RendererCommand_WinLogFont) GetEscapement() int32 {
	if m != nil && m.Escapement != nil {
		return *m.Escapement
	}
	return Default_RendererCommand_WinLogFont_Escapement
}

func (m *RendererCommand_WinLogFont) GetOrientation() int32 {
	if m != nil && m.Orientation != nil {
		return *m.Orientation
	}
	return Default_RendererCommand_WinLogFont_Orientation
}

func (m *RendererCommand_WinLogFont) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return Default_RendererCommand_WinLogFont_Weight
}

func (m *RendererCommand_WinLogFont) GetItalic() bool {
	if m != nil && m.Italic != nil {
		return *m.Italic
	}
	return Default_RendererCommand_WinLogFont_Italic
}

func (m *RendererCommand_WinLogFont) GetUnderline() bool {
	if m != nil && m.Underline != nil {
		return *m.Underline
	}
	return Default_RendererCommand_WinLogFont_Underline
}

func (m *RendererCommand_WinLogFont) GetStrikeOut() bool {
	if m != nil && m.StrikeOut != nil {
		return *m.StrikeOut
	}
	return Default_RendererCommand_WinLogFont_StrikeOut
}

func (m *RendererCommand_WinLogFont) GetCharSet() int32 {
	if m != nil && m.CharSet != nil {
		return *m.CharSet
	}
	return Default_RendererCommand_WinLogFont_CharSet
}

func (m *RendererCommand_WinLogFont) GetOutPrecision() int32 {
	if m != nil && m.OutPrecision != nil {
		return *m.OutPrecision
	}
	return Default_RendererCommand_WinLogFont_OutPrecision
}

func (m *RendererCommand_WinLogFont) GetClipPrecision() int32 {
	if m != nil && m.ClipPrecision != nil {
		return *m.ClipPrecision
	}
	return Default_RendererCommand_WinLogFont_ClipPrecision
}

func (m *RendererCommand_WinLogFont) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return Default_RendererCommand_WinLogFont_Quality
}

func (m *RendererCommand_WinLogFont) GetPitchAndFamily() int32 {
	if m != nil && m.PitchAndFamily != nil {
		return *m.PitchAndFamily
	}
	return Default_RendererCommand_WinLogFont_PitchAndFamily
}

func (m *RendererCommand_WinLogFont) GetFaceName() string {
	if m != nil && m.FaceName != nil {
		return *m.FaceName
	}
	return ""
}

// An equivalent to COMPOSITIONFORM in IMM32. (For Windows only)
// TODO(yukawa): make a common composition form format for all platforms.
type RendererCommand_CompositionForm struct {
	CurrentPosition  *RendererCommand_Point     `protobuf:"bytes,2,opt,name=current_position,json=currentPosition" json:"current_position,omitempty"`
	Area             *RendererCommand_Rectangle `protobuf:"bytes,3,opt,name=area" json:"area,omitempty"`
	StyleBits        *uint32                    `protobuf:"varint,4,opt,name=style_bits,json=styleBits,def=0" json:"style_bits,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RendererCommand_CompositionForm) Reset()         { *m = RendererCommand_CompositionForm{} }
func (m *RendererCommand_CompositionForm) String() string { return proto.CompactTextString(m) }
func (*RendererCommand_CompositionForm) ProtoMessage()    {}
func (*RendererCommand_CompositionForm) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 3}
}

const Default_RendererCommand_CompositionForm_StyleBits uint32 = 0

func (m *RendererCommand_CompositionForm) GetCurrentPosition() *RendererCommand_Point {
	if m != nil {
		return m.CurrentPosition
	}
	return nil
}

func (m *RendererCommand_CompositionForm) GetArea() *RendererCommand_Rectangle {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *RendererCommand_CompositionForm) GetStyleBits() uint32 {
	if m != nil && m.StyleBits != nil {
		return *m.StyleBits
	}
	return Default_RendererCommand_CompositionForm_StyleBits
}

// An equivalent to CANDIDATEFORM in IMM32. (For Windows only)
// TODO(yukawa): make a common candidate form format for all platforms.
type RendererCommand_CandidateForm struct {
	CurrentPosition  *RendererCommand_Point     `protobuf:"bytes,2,opt,name=current_position,json=currentPosition" json:"current_position,omitempty"`
	Area             *RendererCommand_Rectangle `protobuf:"bytes,3,opt,name=area" json:"area,omitempty"`
	StyleBits        *uint32                    `protobuf:"varint,4,opt,name=style_bits,json=styleBits,def=0" json:"style_bits,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RendererCommand_CandidateForm) Reset()         { *m = RendererCommand_CandidateForm{} }
func (m *RendererCommand_CandidateForm) String() string { return proto.CompactTextString(m) }
func (*RendererCommand_CandidateForm) ProtoMessage()    {}
func (*RendererCommand_CandidateForm) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 4}
}

const Default_RendererCommand_CandidateForm_StyleBits uint32 = 0

func (m *RendererCommand_CandidateForm) GetCurrentPosition() *RendererCommand_Point {
	if m != nil {
		return m.CurrentPosition
	}
	return nil
}

func (m *RendererCommand_CandidateForm) GetArea() *RendererCommand_Rectangle {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *RendererCommand_CandidateForm) GetStyleBits() uint32 {
	if m != nil && m.StyleBits != nil {
		return *m.StyleBits
	}
	return Default_RendererCommand_CandidateForm_StyleBits
}

// An equivalent to IMECHARPOSITION in IMM32. (For Windows only)
// TODO(yukawa): make a common candidate form format for all platforms.
type RendererCommand_CharacterPosition struct {
	Position         *uint32                    `protobuf:"varint,1,opt,name=position" json:"position,omitempty"`
	TopLeft          *RendererCommand_Point     `protobuf:"bytes,2,opt,name=top_left,json=topLeft" json:"top_left,omitempty"`
	LineHeight       *uint32                    `protobuf:"varint,3,opt,name=line_height,json=lineHeight" json:"line_height,omitempty"`
	DocumentArea     *RendererCommand_Rectangle `protobuf:"bytes,4,opt,name=document_area,json=documentArea" json:"document_area,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RendererCommand_CharacterPosition) Reset()         { *m = RendererCommand_CharacterPosition{} }
func (m *RendererCommand_CharacterPosition) String() string { return proto.CompactTextString(m) }
func (*RendererCommand_CharacterPosition) ProtoMessage()    {}
func (*RendererCommand_CharacterPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 5}
}

func (m *RendererCommand_CharacterPosition) GetPosition() uint32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *RendererCommand_CharacterPosition) GetTopLeft() *RendererCommand_Point {
	if m != nil {
		return m.TopLeft
	}
	return nil
}

func (m *RendererCommand_CharacterPosition) GetLineHeight() uint32 {
	if m != nil && m.LineHeight != nil {
		return *m.LineHeight
	}
	return 0
}

func (m *RendererCommand_CharacterPosition) GetDocumentArea() *RendererCommand_Rectangle {
	if m != nil {
		return m.DocumentArea
	}
	return nil
}

// This message is a subset of Win32 GUITHREADINFO. (For Windows only)
// TODO(yukawa): make a common candidate form format for all platforms.
type RendererCommand_CaretInfo struct {
	Blinking           *bool                      `protobuf:"varint,1,opt,name=blinking,def=0" json:"blinking,omitempty"`
	CaretRect          *RendererCommand_Rectangle `protobuf:"bytes,2,opt,name=caret_rect,json=caretRect" json:"caret_rect,omitempty"`
	TargetWindowHandle *uint32                    `protobuf:"varint,3,opt,name=target_window_handle,json=targetWindowHandle" json:"target_window_handle,omitempty"`
	XXX_unrecognized   []byte                     `json:"-"`
}

func (m *RendererCommand_CaretInfo) Reset()                    { *m = RendererCommand_CaretInfo{} }
func (m *RendererCommand_CaretInfo) String() string            { return proto.CompactTextString(m) }
func (*RendererCommand_CaretInfo) ProtoMessage()               {}
func (*RendererCommand_CaretInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 6} }

const Default_RendererCommand_CaretInfo_Blinking bool = false

func (m *RendererCommand_CaretInfo) GetBlinking() bool {
	if m != nil && m.Blinking != nil {
		return *m.Blinking
	}
	return Default_RendererCommand_CaretInfo_Blinking
}

func (m *RendererCommand_CaretInfo) GetCaretRect() *RendererCommand_Rectangle {
	if m != nil {
		return m.CaretRect
	}
	return nil
}

func (m *RendererCommand_CaretInfo) GetTargetWindowHandle() uint32 {
	if m != nil && m.TargetWindowHandle != nil {
		return *m.TargetWindowHandle
	}
	return 0
}

// Visual information about mode indicator.
type RendererCommand_IndicatorInfo struct {
	Status           *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RendererCommand_IndicatorInfo) Reset()         { *m = RendererCommand_IndicatorInfo{} }
func (m *RendererCommand_IndicatorInfo) String() string { return proto.CompactTextString(m) }
func (*RendererCommand_IndicatorInfo) ProtoMessage()    {}
func (*RendererCommand_IndicatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 7}
}

func (m *RendererCommand_IndicatorInfo) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Application information Mozc UI is attaching
type RendererCommand_ApplicationInfo struct {
	ProcessId *uint32 `protobuf:"varint,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	ThreadId  *uint32 `protobuf:"varint,2,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	// used in Windows:
	// WHND of the message-only window:
	ReceiverHandle *uint32 `protobuf:"varint,3,opt,name=receiver_handle,json=receiverHandle" json:"receiver_handle,omitempty"`
	// used in Windows:
	// HWND of the window where composition is displayed.
	TargetWindowHandle *uint32 `protobuf:"varint,4,opt,name=target_window_handle,json=targetWindowHandle" json:"target_window_handle,omitempty"`
	// used in Windows:
	// Preffered font for composition string.
	CompositionFont *RendererCommand_WinLogFont `protobuf:"bytes,5,opt,name=composition_font,json=compositionFont" json:"composition_font,omitempty"`
	// Specifies which IM Framework is used in the client.
	InputFramework *RendererCommand_ApplicationInfo_InputFrameworkType `protobuf:"varint,6,opt,name=input_framework,json=inputFramework,enum=commands.RendererCommand_ApplicationInfo_InputFrameworkType,def=0" json:"input_framework,omitempty"`
	// used in Windows:
	// Specifies where and how the renderer process shows the composition
	// window (if necessary).
	CompositionForm *RendererCommand_CompositionForm `protobuf:"bytes,7,opt,name=composition_form,json=compositionForm" json:"composition_form,omitempty"`
	// used in Windows:
	// Specifies where and how the renderer process shows the candidate
	// window (if necessary).
	// Currently only one candidate window is supported.
	// TODO(yukawa): support multiple candidate windows.
	CandidateForm *RendererCommand_CandidateForm `protobuf:"bytes,8,opt,name=candidate_form,json=candidateForm" json:"candidate_form,omitempty"`
	// used in Windows:
	UiVisibilities *int32 `protobuf:"varint,9,opt,name=ui_visibilities,json=uiVisibilities,def=0" json:"ui_visibilities,omitempty"`
	// used in Windows:
	// Specifies the target position in composition window.
	CompositionTarget *RendererCommand_CharacterPosition `protobuf:"bytes,10,opt,name=composition_target,json=compositionTarget" json:"composition_target,omitempty"`
	// used in Windows:
	// Represents caret information.
	CaretInfo *RendererCommand_CaretInfo `protobuf:"bytes,11,opt,name=caret_info,json=caretInfo" json:"caret_info,omitempty"`
	// A string representation of PangoFontDescription
	// http://developer.gnome.org/pango/stable/pango-Fonts.html#pango-font-description-from-string
	// This field is not application specific information but temporaly locate
	// here.
	// TODO(nona): Make new message if necessary.
	PangoFontDescription *string `protobuf:"bytes,13,opt,name=pango_font_description,json=pangoFontDescription" json:"pango_font_description,omitempty"`
	// used in Windows:
	IndicatorInfo    *RendererCommand_IndicatorInfo `protobuf:"bytes,14,opt,name=indicator_info,json=indicatorInfo" json:"indicator_info,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *RendererCommand_ApplicationInfo) Reset()         { *m = RendererCommand_ApplicationInfo{} }
func (m *RendererCommand_ApplicationInfo) String() string { return proto.CompactTextString(m) }
func (*RendererCommand_ApplicationInfo) ProtoMessage()    {}
func (*RendererCommand_ApplicationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 8}
}

const Default_RendererCommand_ApplicationInfo_InputFramework RendererCommand_ApplicationInfo_InputFrameworkType = RendererCommand_ApplicationInfo_UNKNOWN_FRAMEWORK
const Default_RendererCommand_ApplicationInfo_UiVisibilities int32 = 0

func (m *RendererCommand_ApplicationInfo) GetProcessId() uint32 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *RendererCommand_ApplicationInfo) GetThreadId() uint32 {
	if m != nil && m.ThreadId != nil {
		return *m.ThreadId
	}
	return 0
}

func (m *RendererCommand_ApplicationInfo) GetReceiverHandle() uint32 {
	if m != nil && m.ReceiverHandle != nil {
		return *m.ReceiverHandle
	}
	return 0
}

func (m *RendererCommand_ApplicationInfo) GetTargetWindowHandle() uint32 {
	if m != nil && m.TargetWindowHandle != nil {
		return *m.TargetWindowHandle
	}
	return 0
}

func (m *RendererCommand_ApplicationInfo) GetCompositionFont() *RendererCommand_WinLogFont {
	if m != nil {
		return m.CompositionFont
	}
	return nil
}

func (m *RendererCommand_ApplicationInfo) GetInputFramework() RendererCommand_ApplicationInfo_InputFrameworkType {
	if m != nil && m.InputFramework != nil {
		return *m.InputFramework
	}
	return Default_RendererCommand_ApplicationInfo_InputFramework
}

func (m *RendererCommand_ApplicationInfo) GetCompositionForm() *RendererCommand_CompositionForm {
	if m != nil {
		return m.CompositionForm
	}
	return nil
}

func (m *RendererCommand_ApplicationInfo) GetCandidateForm() *RendererCommand_CandidateForm {
	if m != nil {
		return m.CandidateForm
	}
	return nil
}

func (m *RendererCommand_ApplicationInfo) GetUiVisibilities() int32 {
	if m != nil && m.UiVisibilities != nil {
		return *m.UiVisibilities
	}
	return Default_RendererCommand_ApplicationInfo_UiVisibilities
}

func (m *RendererCommand_ApplicationInfo) GetCompositionTarget() *RendererCommand_CharacterPosition {
	if m != nil {
		return m.CompositionTarget
	}
	return nil
}

func (m *RendererCommand_ApplicationInfo) GetCaretInfo() *RendererCommand_CaretInfo {
	if m != nil {
		return m.CaretInfo
	}
	return nil
}

func (m *RendererCommand_ApplicationInfo) GetPangoFontDescription() string {
	if m != nil && m.PangoFontDescription != nil {
		return *m.PangoFontDescription
	}
	return ""
}

func (m *RendererCommand_ApplicationInfo) GetIndicatorInfo() *RendererCommand_IndicatorInfo {
	if m != nil {
		return m.IndicatorInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*RendererCommand)(nil), "commands.RendererCommand")
	proto.RegisterType((*RendererCommand_Rectangle)(nil), "commands.RendererCommand.Rectangle")
	proto.RegisterType((*RendererCommand_Point)(nil), "commands.RendererCommand.Point")
	proto.RegisterType((*RendererCommand_WinLogFont)(nil), "commands.RendererCommand.WinLogFont")
	proto.RegisterType((*RendererCommand_CompositionForm)(nil), "commands.RendererCommand.CompositionForm")
	proto.RegisterType((*RendererCommand_CandidateForm)(nil), "commands.RendererCommand.CandidateForm")
	proto.RegisterType((*RendererCommand_CharacterPosition)(nil), "commands.RendererCommand.CharacterPosition")
	proto.RegisterType((*RendererCommand_CaretInfo)(nil), "commands.RendererCommand.CaretInfo")
	proto.RegisterType((*RendererCommand_IndicatorInfo)(nil), "commands.RendererCommand.IndicatorInfo")
	proto.RegisterType((*RendererCommand_ApplicationInfo)(nil), "commands.RendererCommand.ApplicationInfo")
	proto.RegisterEnum("commands.RendererCommand_CommandType", RendererCommand_CommandType_name, RendererCommand_CommandType_value)
	proto.RegisterEnum("commands.RendererCommand_CompositionForm_Style", RendererCommand_CompositionForm_Style_name, RendererCommand_CompositionForm_Style_value)
	proto.RegisterEnum("commands.RendererCommand_CandidateForm_Style", RendererCommand_CandidateForm_Style_name, RendererCommand_CandidateForm_Style_value)
	proto.RegisterEnum("commands.RendererCommand_ApplicationInfo_InputFrameworkType", RendererCommand_ApplicationInfo_InputFrameworkType_name, RendererCommand_ApplicationInfo_InputFrameworkType_value)
	proto.RegisterEnum("commands.RendererCommand_ApplicationInfo_UIVisibility", RendererCommand_ApplicationInfo_UIVisibility_name, RendererCommand_ApplicationInfo_UIVisibility_value)
}

func init() { proto.RegisterFile("mozc/commands/renderer_command.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x36, 0x6d, 0xc9, 0xa2, 0x46, 0x7f, 0xf4, 0x9e, 0xfc, 0x28, 0x4a, 0x82, 0x38, 0x76, 0xce,
	0x89, 0xcf, 0x09, 0x8e, 0x9d, 0xb8, 0x01, 0x8a, 0x1a, 0x2d, 0x5a, 0x59, 0x3f, 0xb0, 0x12, 0x47,
	0x12, 0x28, 0xa9, 0x2e, 0x72, 0x43, 0xac, 0xc9, 0x95, 0xb4, 0x30, 0xc9, 0x65, 0x97, 0xcb, 0x38,
	0xea, 0x55, 0x1f, 0xa6, 0xaf, 0xd0, 0xc7, 0xe8, 0x6d, 0x9f, 0xa0, 0x4f, 0xd0, 0xfb, 0x02, 0xc5,
	0x2e, 0x49, 0xfd, 0x38, 0x75, 0xe2, 0x5e, 0xf6, 0x4a, 0xdc, 0xef, 0x9b, 0x99, 0x9d, 0x99, 0xdd,
	0x99, 0x59, 0xc1, 0x13, 0x8f, 0xfd, 0x60, 0x1f, 0xd8, 0xcc, 0xf3, 0xb0, 0xef, 0x84, 0x07, 0x9c,
	0xf8, 0x0e, 0xe1, 0x84, 0x5b, 0x09, 0xb2, 0x1f, 0x70, 0x26, 0x18, 0xd2, 0x53, 0x81, 0xda, 0x83,
	0x55, 0xf9, 0xf4, 0x23, 0x96, 0xdb, 0xf9, 0xe5, 0x2e, 0x54, 0xcc, 0xc4, 0x44, 0x23, 0xa6, 0xd0,
	0xd7, 0x90, 0x11, 0xb3, 0x80, 0x54, 0xb5, 0x6d, 0x6d, 0xaf, 0x7c, 0xf8, 0xef, 0xfd, 0xb9, 0xca,
	0x15, 0xc1, 0xfd, 0xe4, 0x77, 0x38, 0x0b, 0xc8, 0x51, 0xa6, 0xdb, 0xeb, 0xf5, 0x4d, 0xa5, 0x88,
	0x1e, 0x41, 0xee, 0x1d, 0x0d, 0xe9, 0xb9, 0x4b, 0xaa, 0xeb, 0xdb, 0xda, 0x9e, 0x7e, 0x94, 0x1d,
	0x63, 0x37, 0x24, 0x66, 0x8a, 0xa2, 0x3d, 0xd8, 0x64, 0x91, 0x08, 0x22, 0x51, 0xdd, 0xd8, 0xd6,
	0xf6, 0x0a, 0x87, 0xc6, 0x62, 0x8f, 0x9e, 0xc2, 0xcd, 0x84, 0x47, 0x7d, 0xd8, 0x0a, 0x38, 0x21,
	0x0e, 0x15, 0x16, 0x27, 0xb6, 0xc0, 0xfe, 0xc4, 0x25, 0xd5, 0x8c, 0x52, 0xda, 0xbd, 0xde, 0x31,
	0x33, 0x15, 0x35, 0x8d, 0x44, 0x7b, 0x8e, 0xa0, 0x21, 0x18, 0x38, 0x08, 0x5c, 0x6a, 0x63, 0x41,
	0x99, 0x6f, 0x51, 0x7f, 0xcc, 0xaa, 0x59, 0x65, 0xf0, 0xbf, 0xd7, 0x1b, 0xac, 0x2f, 0x34, 0x3a,
	0xfe, 0x98, 0x99, 0x15, 0xbc, 0x0a, 0xd4, 0x2c, 0xc8, 0x2f, 0xb6, 0x40, 0x90, 0x71, 0xc9, 0x58,
	0xa8, 0x04, 0x66, 0x4d, 0xf5, 0x8d, 0x0c, 0xd8, 0x10, 0x2c, 0x50, 0xf9, 0xc8, 0x9a, 0xf2, 0x13,
	0xdd, 0x82, 0x2c, 0xa7, 0x93, 0x69, 0x9c, 0x83, 0xac, 0x19, 0x2f, 0xd0, 0x1d, 0xd8, 0x3c, 0x67,
	0x42, 0x30, 0x4f, 0x45, 0x99, 0x35, 0x93, 0x55, 0x6d, 0x17, 0xb2, 0x7d, 0x46, 0x7d, 0x81, 0x8a,
	0xa0, 0xbd, 0x4f, 0x2c, 0x6b, 0xef, 0xe5, 0x6a, 0x96, 0x18, 0xd5, 0x66, 0xb5, 0xdf, 0x36, 0x00,
	0xce, 0xa8, 0x7f, 0xca, 0x26, 0x6d, 0xe6, 0x0b, 0x74, 0x0f, 0x36, 0xa7, 0x44, 0x6d, 0xa1, 0xe4,
	0x8f, 0xb4, 0xe7, 0x66, 0x02, 0xa0, 0xbb, 0x90, 0xbd, 0xa4, 0x8e, 0x98, 0xc6, 0xba, 0x92, 0x89,
	0xd7, 0xe8, 0x31, 0x00, 0x09, 0x6d, 0x1c, 0x10, 0x8f, 0xf8, 0x89, 0x6b, 0x92, 0x5d, 0x02, 0xd1,
	0x2e, 0x14, 0x18, 0xa7, 0xc4, 0x17, 0x2a, 0xfc, 0xd8, 0x4f, 0x29, 0xb3, 0x8c, 0xca, 0xbd, 0x2f,
	0xe3, 0xbd, 0xb3, 0xf3, 0xbd, 0x63, 0x00, 0x3d, 0x84, 0x4d, 0x2a, 0xb0, 0x4b, 0xed, 0xea, 0xe6,
	0xf2, 0xed, 0x48, 0x40, 0xb4, 0x0b, 0xf9, 0x48, 0x66, 0xdf, 0xa5, 0x3e, 0xa9, 0xe6, 0x96, 0x25,
	0x16, 0x38, 0x7a, 0x02, 0x10, 0x0a, 0x4e, 0x2f, 0x88, 0xc5, 0x22, 0x51, 0xd5, 0x57, 0xa4, 0x62,
	0xa2, 0x17, 0x09, 0xf4, 0x00, 0x74, 0x7b, 0x8a, 0xb9, 0x15, 0x12, 0x51, 0xcd, 0xc7, 0x6e, 0xbc,
	0x30, 0x73, 0x12, 0x1a, 0x10, 0x81, 0xfe, 0x03, 0x25, 0x16, 0x09, 0x2b, 0xe0, 0xc4, 0xa6, 0xa1,
	0x8c, 0x04, 0x52, 0x4f, 0x8b, 0x2c, 0x12, 0xfd, 0x14, 0x46, 0x7b, 0x50, 0xb6, 0x5d, 0x1a, 0x2c,
	0x09, 0x16, 0x52, 0xc1, 0x92, 0x24, 0x16, 0x92, 0xf7, 0x21, 0xf7, 0x7d, 0x84, 0x5d, 0x2a, 0x66,
	0xd5, 0x62, 0x2a, 0x92, 0x22, 0xe8, 0x19, 0x18, 0x01, 0x15, 0xf6, 0xd4, 0xc2, 0xbe, 0x63, 0x8d,
	0xb1, 0x47, 0xdd, 0x59, 0xb5, 0x94, 0x4a, 0x95, 0x15, 0x55, 0xf7, 0x9d, 0xb6, 0x22, 0xd0, 0x7d,
	0xc8, 0x8f, 0xb1, 0x4d, 0x2c, 0x1f, 0x7b, 0xa4, 0x5a, 0xde, 0xd6, 0xf6, 0xf2, 0xa6, 0x2e, 0x81,
	0x2e, 0xf6, 0x48, 0xed, 0x0f, 0x0d, 0x2a, 0x0d, 0xe6, 0x05, 0x2c, 0xa4, 0x32, 0xd7, 0x6d, 0xc6,
	0x3d, 0xf4, 0x0a, 0x0c, 0x3b, 0xe2, 0x9c, 0xf8, 0xc2, 0x4a, 0x71, 0x75, 0xb6, 0x85, 0xc3, 0x47,
	0xd7, 0x5f, 0x6b, 0x75, 0xa3, 0xcc, 0x4a, 0xa2, 0xd8, 0x4f, 0xf4, 0xd0, 0xe7, 0x90, 0xc1, 0x9c,
	0xe0, 0xa4, 0x38, 0x6f, 0x54, 0x67, 0x4a, 0x01, 0x6d, 0xcb, 0x53, 0x99, 0xb9, 0xc4, 0x3a, 0xa7,
	0x22, 0x54, 0x17, 0xa3, 0x24, 0x83, 0xcb, 0x2b, 0xf0, 0x98, 0x8a, 0x70, 0xe7, 0x2b, 0xc8, 0x0e,
	0xe4, 0x02, 0x15, 0x20, 0xd7, 0x6c, 0xb5, 0xeb, 0xa3, 0xd3, 0xa1, 0xb1, 0x86, 0x74, 0xc8, 0x98,
	0xad, 0xc6, 0xd0, 0xd0, 0x50, 0x1e, 0xb2, 0xfd, 0x5e, 0xa7, 0x3b, 0x34, 0xd6, 0x11, 0x82, 0x72,
	0xbb, 0x67, 0x36, 0x5a, 0x56, 0xbf, 0x37, 0xe8, 0x0c, 0x3b, 0xbd, 0xae, 0xb1, 0xfd, 0x2a, 0xa3,
	0x6b, 0xc6, 0x7a, 0xed, 0x77, 0x0d, 0x4a, 0x0d, 0xec, 0x3b, 0xd4, 0xc1, 0x82, 0xfc, 0x93, 0xa2,
	0x7f, 0xf9, 0x97, 0xd1, 0x1b, 0x50, 0x6c, 0xd4, 0xbb, 0xcd, 0x4e, 0xb3, 0x3e, 0x6c, 0xf5, 0x7b,
	0x03, 0xe3, 0x1b, 0x54, 0x84, 0x5c, 0xeb, 0xbb, 0xc6, 0xe9, 0xa8, 0xd9, 0x32, 0x7e, 0xd4, 0x92,
	0xa0, 0x7f, 0xd5, 0x60, 0xab, 0x31, 0xc5, 0x1c, 0xdb, 0x82, 0xf0, 0xb9, 0xb3, 0x35, 0xd0, 0xe7,
	0x01, 0xcb, 0x22, 0x2f, 0x99, 0xf3, 0x35, 0x3a, 0x02, 0x5d, 0xb0, 0xc0, 0x52, 0xad, 0xe8, 0x86,
	0xc9, 0xc8, 0x09, 0x16, 0x9c, 0xca, 0x76, 0xf5, 0x08, 0x0a, 0xb2, 0xce, 0xac, 0xa4, 0x7f, 0x6c,
	0x28, 0xd3, 0x20, 0xa1, 0x93, 0xb8, 0x88, 0x4f, 0xa0, 0xe4, 0x30, 0x3b, 0x92, 0x0d, 0xc1, 0x52,
	0xe9, 0xfa, 0x1b, 0x4d, 0xb9, 0x98, 0x6a, 0xd6, 0x39, 0xc1, 0xb5, 0x9f, 0x34, 0xc8, 0x37, 0x30,
	0x27, 0x42, 0x36, 0x52, 0xf4, 0x18, 0xf4, 0x73, 0x97, 0xfa, 0x17, 0xd4, 0x9f, 0xa8, 0x80, 0xe6,
	0x65, 0x3d, 0x87, 0xd1, 0x31, 0x80, 0x2d, 0xe5, 0xd5, 0x44, 0x48, 0x22, 0xbb, 0xd1, 0xbe, 0x79,
	0xa5, 0x26, 0xd7, 0xe8, 0x39, 0xdc, 0x12, 0x98, 0x4f, 0x88, 0xb0, 0x2e, 0xa9, 0xef, 0xb0, 0x4b,
	0x6b, 0x8a, 0x7d, 0xc7, 0x25, 0x49, 0xa0, 0x28, 0xe6, 0xce, 0x14, 0x75, 0xa2, 0x98, 0xda, 0x17,
	0x50, 0xea, 0xf8, 0x8e, 0xec, 0xf9, 0x8c, 0x2b, 0x4f, 0xf7, 0x60, 0x33, 0x14, 0x58, 0x44, 0xa1,
	0xf2, 0x73, 0x65, 0x88, 0x0d, 0x14, 0x6e, 0x26, 0x7c, 0xed, 0x67, 0x1d, 0x2a, 0x57, 0x26, 0x08,
	0x7a, 0x08, 0x10, 0x70, 0x66, 0x93, 0x30, 0xb4, 0xa8, 0x93, 0x1c, 0x5d, 0x3e, 0x41, 0x3a, 0x8e,
	0xac, 0x7f, 0x31, 0xe5, 0x04, 0x3b, 0x92, 0x5d, 0x8f, 0x0f, 0x36, 0x06, 0x3a, 0x0e, 0x7a, 0x0a,
	0x15, 0x4e, 0x6c, 0x42, 0xdf, 0x11, 0xbe, 0xea, 0x77, 0x39, 0x85, 0x63, 0x9f, 0xaf, 0x8d, 0x32,
	0x73, 0x5d, 0x94, 0xa8, 0x07, 0x86, 0xbd, 0xe8, 0x2c, 0xd6, 0x98, 0xf9, 0x22, 0x99, 0x8e, 0x4f,
	0xae, 0xcf, 0xf0, 0x62, 0xe4, 0x98, 0x15, 0x7b, 0xb9, 0x2f, 0xf9, 0x02, 0xbd, 0x87, 0x0a, 0xf5,
	0x83, 0x48, 0x58, 0x63, 0x8e, 0x3d, 0x72, 0xc9, 0xf8, 0x85, 0xea, 0xfa, 0xe5, 0xc3, 0x2f, 0x6f,
	0x3c, 0x6d, 0xf7, 0x3b, 0xd2, 0x40, 0x3b, 0xd5, 0x57, 0xcf, 0x8d, 0xad, 0x51, 0xf7, 0x75, 0xb7,
	0x77, 0xd6, 0xb5, 0xda, 0x66, 0xfd, 0x4d, 0xeb, 0xac, 0x67, 0xbe, 0x36, 0xcb, 0x74, 0x45, 0x4c,
	0x0e, 0xfa, 0xd5, 0x50, 0xb8, 0xa7, 0xc6, 0xc9, 0x47, 0x07, 0xfd, 0x95, 0xb6, 0x7a, 0x25, 0x1e,
	0xee, 0xa1, 0x2e, 0x94, 0xed, 0xb4, 0xf5, 0xc4, 0x36, 0x75, 0x65, 0xf3, 0xe9, 0x47, 0x6c, 0x2e,
	0xb7, 0x2a, 0xb3, 0x64, 0xaf, 0x74, 0xae, 0xff, 0x41, 0x25, 0xa2, 0x96, 0x7a, 0x18, 0x51, 0x97,
	0x0a, 0x4a, 0xc2, 0x74, 0x52, 0x3d, 0x37, 0xcb, 0x11, 0xfd, 0x76, 0x89, 0x40, 0x6f, 0x01, 0x2d,
	0x47, 0x14, 0x1f, 0x9f, 0x9a, 0x5a, 0x85, 0xc3, 0x67, 0x1f, 0xd9, 0xff, 0x6a, 0xd7, 0x30, 0xb7,
	0x96, 0xcc, 0x0c, 0x95, 0x95, 0x45, 0x51, 0xa9, 0x07, 0x51, 0xe1, 0x53, 0x45, 0x35, 0x2f, 0xd8,
	0xa4, 0xa8, 0xd4, 0x9d, 0x7e, 0x09, 0x77, 0x02, 0xec, 0x4f, 0x98, 0xba, 0x36, 0x96, 0x43, 0x42,
	0x9b, 0xd3, 0x40, 0xb5, 0xa6, 0x92, 0x9a, 0x60, 0xb7, 0x14, 0x2b, 0xaf, 0x45, 0x73, 0xc1, 0xc9,
	0x8c, 0xd2, 0xb4, 0xb0, 0xe2, 0xdd, 0xcb, 0x9f, 0xca, 0xe8, 0x4a, 0x21, 0x9a, 0x25, 0xba, 0xbc,
	0xdc, 0x19, 0x02, 0xfa, 0xf0, 0xc2, 0xa0, 0xdb, 0xf0, 0xe1, 0x95, 0x31, 0xd6, 0x50, 0x0e, 0x36,
	0x86, 0x83, 0x76, 0x3c, 0x78, 0x3a, 0x6f, 0xde, 0x7c, 0x76, 0x68, 0xac, 0xc7, 0x9f, 0xaf, 0xa9,
	0x30, 0x36, 0xe4, 0x60, 0xea, 0x1c, 0x47, 0xa1, 0x91, 0xd9, 0x71, 0xa1, 0x38, 0xea, 0xcc, 0x4f,
	0x63, 0x86, 0xb6, 0xa0, 0x34, 0x98, 0xb2, 0xcb, 0x51, 0xa7, 0x49, 0xc6, 0x38, 0x72, 0x85, 0xb1,
	0x86, 0xee, 0xc1, 0x6d, 0x09, 0x2d, 0x5d, 0xa1, 0xb8, 0xb4, 0x0c, 0x0d, 0xdd, 0x85, 0x7f, 0x29,
	0x2a, 0x3d, 0xfa, 0x84, 0x58, 0x97, 0x6e, 0x49, 0x62, 0x10, 0x4d, 0x26, 0x24, 0x4c, 0x4a, 0xd1,
	0xc8, 0xbc, 0xca, 0xe8, 0x45, 0xa3, 0xb4, 0xf3, 0x02, 0x0a, 0x4b, 0x4f, 0x6c, 0xe9, 0x8c, 0x7c,
	0x64, 0x1b, 0x6b, 0x08, 0x60, 0x73, 0xd4, 0x97, 0xe3, 0xc2, 0xd0, 0x50, 0x11, 0xf4, 0xc1, 0xc9,
	0x68, 0xd8, 0xec, 0x9d, 0x75, 0x8d, 0xf5, 0xe3, 0xff, 0xbf, 0x7d, 0x36, 0xa1, 0x62, 0x1a, 0x9d,
	0xcb, 0xe4, 0x1d, 0x08, 0xe6, 0xcd, 0x2e, 0x30, 0xe5, 0xf8, 0xc0, 0x0b, 0x2f, 0x2e, 0x42, 0xc2,
	0xdf, 0x1d, 0xac, 0xfc, 0x1b, 0xf8, 0x33, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x37, 0x85, 0xa7, 0x4d,
	0x0c, 0x00, 0x00,
}
